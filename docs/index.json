[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "lib/browser.js",
    "content": "import PrivateKey from './ecc/src/PrivateKey';\nimport PublicKey from './ecc/src/PublicKey';\nimport Signature from './ecc/src/signature';\nimport key from './ecc/src/KeyUtils';\nimport TransactionBuilder from './chain/src/TransactionBuilder';\nimport Login from './chain/src/AccountLogin';\n\nexport default {\n  PrivateKey,\n  PublicKey,\n  Signature,\n  key,\n  TransactionBuilder,\n  Login\n};\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/browser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "lib/chain/index.js",
    "content": "import ChainStore from './src/ChainStore';\nimport TransactionBuilder from './src/TransactionBuilder';\nimport ChainTypes from './src/ChainTypes';\nimport ObjectId from './src/ObjectId';\nimport NumberUtils from './src/NumberUtils';\nimport TransactionHelper from './src/TransactionHelper';\nimport ChainValidation from './src/ChainValidation';\nimport Login from './src/AccountLogin';\nimport GameMoves from './src/GameMoves';\n\nconst {\n  FetchChainObjects, FetchChain\n} = ChainStore;\n\nexport {\n  ChainStore,\n  TransactionBuilder,\n  FetchChainObjects,\n  ChainTypes,\n  ObjectId,\n  NumberUtils,\n  TransactionHelper,\n  ChainValidation,\n  FetchChain,\n  Login,\n  GameMoves\n};\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/chain/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "FetchChainObjects",
    "memberof": "lib/chain/index.js",
    "static": true,
    "longname": "lib/chain/index.js~FetchChainObjects",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "lib/chain/src/AccountLogin.js",
    "content": "import PrivateKey from '../../ecc/src/PrivateKey';\nimport key from '../../ecc/src/KeyUtils';\n\nimport {get, set} from './state';\n\nlet _keyCachePriv = {};\nlet _keyCachePub = {};\n\nclass AccountLogin {\n  constructor() {\n    let state = {loggedIn: false, roles: ['active', 'owner', 'memo']};\n    this.get = get(state);\n    this.set = set(state);\n\n    this.subs = {};\n  }\n\n  addSubscription(cb) {\n    this.subs[cb] = cb;\n  }\n\n  setRoles(roles) {\n    this.set('roles', roles);\n  }\n\n  generateKeys(accountName, password, roles, prefix) {\n    if (!accountName || !password) {\n      throw new Error('Account name or password required');\n    }\n\n    if (password.length < 12) {\n      throw new Error('Password must have at least 12 characters');\n    }\n\n    let privKeys = {};\n    let pubKeys = {};\n\n    (roles || this.get('roles')).forEach((role) => {\n      let seed = password + accountName + role;\n      let pkey = _keyCachePriv[seed]\n        ? _keyCachePriv[seed]\n        : PrivateKey.fromSeed(key.normalize_brainKey(seed));\n      _keyCachePriv[seed] = pkey;\n\n      privKeys[role] = pkey;\n      pubKeys[role] = _keyCachePub[seed] ? _keyCachePub[seed] : pkey.toPublicKey().toString(prefix);\n\n      _keyCachePub[seed] = pubKeys[role];\n    });\n\n    return {privKeys, pubKeys};\n  }\n\n  checkKeys({accountName, password, auths}) {\n    if (!accountName || !password || !auths) {\n      throw new Error('checkKeys: Missing inputs');\n    }\n\n    let hasKey = false;\n    let roles = Object.keys(auths);\n\n    for (let i = 0, len = roles.length; i < len; i++) {\n      let role = roles[i];\n      let {privKeys, pubKeys} = this.generateKeys(accountName, password, [role]);\n      auths[role].forEach((roleKey) => {\n        if (roleKey[0] === pubKeys[role]) {\n          hasKey = true;\n          this.set(role, {priv: privKeys[role], pub: pubKeys[role]});\n        }\n      });\n    }\n\n    if (hasKey) {\n      this.set('name', accountName);\n    }\n\n    this.set('loggedIn', hasKey);\n\n    return hasKey;\n  }\n\n  signTransaction(tr) {\n    let hasKey = false;\n\n    this.get('roles').forEach((role) => {\n      let myKey = this.get(role);\n\n      if (myKey) {\n        hasKey = true;\n        console.log('adding signer:', myKey.pub);\n        tr.add_signer(myKey.priv, myKey.pub);\n      }\n    });\n\n    if (!hasKey) {\n      throw new Error('You do not have any private keys to sign this transaction');\n    }\n  }\n}\n\nexport default new AccountLogin();\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/chain/src/AccountLogin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "_keyCachePriv",
    "memberof": "lib/chain/src/AccountLogin.js",
    "static": true,
    "longname": "lib/chain/src/AccountLogin.js~_keyCachePriv",
    "access": "private",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/AccountLogin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "_keyCachePub",
    "memberof": "lib/chain/src/AccountLogin.js",
    "static": true,
    "longname": "lib/chain/src/AccountLogin.js~_keyCachePub",
    "access": "private",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/AccountLogin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "class",
    "name": "AccountLogin",
    "memberof": "lib/chain/src/AccountLogin.js",
    "static": true,
    "longname": "lib/chain/src/AccountLogin.js~AccountLogin",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/chain/src/AccountLogin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "pseudoExport": true,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 55,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/chain/src/AccountLogin.js~AccountLogin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/AccountLogin.js~AccountLogin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "get",
    "memberof": "lib/chain/src/AccountLogin.js~AccountLogin",
    "static": false,
    "longname": "lib/chain/src/AccountLogin.js~AccountLogin#get",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "set",
    "memberof": "lib/chain/src/AccountLogin.js~AccountLogin",
    "static": false,
    "longname": "lib/chain/src/AccountLogin.js~AccountLogin#set",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "subs",
    "memberof": "lib/chain/src/AccountLogin.js~AccountLogin",
    "static": false,
    "longname": "lib/chain/src/AccountLogin.js~AccountLogin#subs",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "addSubscription",
    "memberof": "lib/chain/src/AccountLogin.js~AccountLogin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/AccountLogin.js~AccountLogin#addSubscription",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "setRoles",
    "memberof": "lib/chain/src/AccountLogin.js~AccountLogin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/AccountLogin.js~AccountLogin#setRoles",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "roles",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "generateKeys",
    "memberof": "lib/chain/src/AccountLogin.js~AccountLogin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/AccountLogin.js~AccountLogin#generateKeys",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "accountName",
        "types": [
          "*"
        ]
      },
      {
        "name": "password",
        "types": [
          "*"
        ]
      },
      {
        "name": "roles",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"privKeys\": *, \"pubKeys\": *}"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "checkKeys",
    "memberof": "lib/chain/src/AccountLogin.js~AccountLogin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/AccountLogin.js~AccountLogin#checkKeys",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"accountName\": *, \"password\": *, \"auths\": *}"
        ],
        "defaultRaw": {
          "accountName": null,
          "password": null,
          "auths": null
        },
        "defaultValue": "{\"accountName\":null,\"password\":null,\"auths\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "signTransaction",
    "memberof": "lib/chain/src/AccountLogin.js~AccountLogin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/AccountLogin.js~AccountLogin#signTransaction",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "tr",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "accountLogin",
    "memberof": "lib/chain/src/AccountLogin.js",
    "static": true,
    "longname": "lib/chain/src/AccountLogin.js~accountLogin",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/chain/src/AccountLogin.js",
    "importStyle": "accountLogin",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "lib/chain/src/AccountLogin.js~AccountLogin"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "lib/chain/src/ChainStore.js",
    "content": "import Immutable from 'immutable';\nimport BigInteger from 'bigi';\nimport ChainTypes from './ChainTypes';\nimport ChainValidation from './ChainValidation';\nimport ee from './EmitterInstance';\nimport {Apis} from '../../ws';\n\nconst {object_type, impl_object_type} = ChainTypes;\nlet emitter = ee.emitter();\n\nlet op_history = parseInt(object_type.operation_history, 10);\nlet limit_order = parseInt(object_type.limit_order, 10);\nlet call_order = parseInt(object_type.call_order, 10);\nlet proposal = parseInt(object_type.proposal, 10);\nlet witness_object_type = parseInt(object_type.witness, 10);\nlet worker_object_type = parseInt(object_type.worker, 10);\nlet committee_member_object_type = parseInt(object_type.committee_member, 10);\nlet account_object_type = parseInt(object_type.account, 10);\nlet asset_object_type = parseInt(object_type.asset, 10);\nlet tournament_object_type = parseInt(object_type.tournament, 10);\nlet tournament_details_object_type = parseInt(object_type.tournament_details, 10);\n\nlet order_prefix = `1.${limit_order}.`;\nlet call_order_prefix = `1.${call_order}.`;\nlet proposal_prefix = `1.${proposal}.`;\nlet operation_history_prefix = `1.${op_history}.`;\nlet balance_prefix = `2.${parseInt(impl_object_type.account_balance, 10)}.`;\nlet account_stats_prefix = `2.${parseInt(impl_object_type.account_statistics, 10)}.`;\nlet transaction_prefix = `2.${parseInt(impl_object_type.transaction, 10)}.`;\nlet account_transaction_history_prefix = `2.${parseInt(\n  impl_object_type.account_transaction_history,\n  10\n)}.`;\nlet asset_dynamic_data_prefix = `2.${parseInt(impl_object_type.asset_dynamic_data, 10)}.`;\nlet bitasset_data_prefix = `2.${parseInt(impl_object_type.asset_bitasset_data, 10)}.`;\nlet block_summary_prefix = `2.${parseInt(impl_object_type.block_summary, 10)}.`;\nlet witness_prefix = `1.${witness_object_type}.`;\nlet worker_prefix = `1.${worker_object_type}.`;\nlet committee_prefix = `1.${committee_member_object_type}.`;\nlet asset_prefix = `1.${asset_object_type}.`;\nlet account_prefix = `1.${account_object_type}.`;\nlet tournament_prefix = `1.${tournament_object_type}.`;\nlet tournament_details_prefix = `1.${tournament_details_object_type}.`;\n\n// count last operations should be stored in memory\nlet operations_stack_size = 100;\n// count last blocks should be stored in memory\nlet block_stack_size = 20;\n\nconst DEBUG = JSON.parse(process.env.npm_config__graphene_chain_chain_debug || false);\n\n/**\n *  @brief maintains a local cache of blockchain state\n *\n *  The ChainStore maintains a local cache of blockchain state and exposes\n *  an API that makes it easy to query objects and receive updates when\n *  objects are available.\n */\nclass ChainStore {\n  constructor() {\n    /** tracks everyone who wants to receive updates when the cache changes */\n    this.subscribers = new Set();\n    this.subscribed = false;\n    /*\n        * Tracks specific objects such as accounts that can trigger additional\n        * fetching that should only happen if we're actually interested in the account\n        */\n    this.subbed_accounts = new Set();\n    this.subbed_witnesses = new Set();\n    this.subbed_committee = new Set();\n\n    this.clearCache();\n    this.progress = 0;\n    // this.chain_time_offset is used to estimate the blockchain time\n    this.chain_time_offset = [];\n    this.dispatchFrequency = 40;\n  }\n\n  /**\n   * Clears all cached state.  This should be called any time the network connection is\n   * reset.\n   */\n  clearCache() {\n    this.objects_by_id = Immutable.Map();\n    this.accounts_by_name = Immutable.Map();\n    this.assets_by_symbol = Immutable.Map();\n    this.account_ids_by_key = Immutable.Map();\n    this.balance_objects_by_address = Immutable.Map();\n    this.get_account_refs_of_keys_calls = Immutable.Set();\n    this.event_groups_list_by_sport_id = Immutable.Map();\n    this.betting_market_groups_list_by_sport_id = Immutable.Map();\n    this.betting_markets_list_by_sport_id = Immutable.Map();\n    this.account_history_requests = new Map(); // /< tracks pending history requests\n    this.witness_by_account_id = new Map();\n    this.witnesses = Immutable.Set();\n    this.account_by_witness_id = new Map();\n    this.committee_by_account_id = new Map();\n    this.objects_by_vote_id = new Map();\n    this.fetching_get_full_accounts = new Map();\n    this.recent_operations = Immutable.List();\n    this.recent_blocks = Immutable.List();\n    this.recent_blocks_by_id = Immutable.Map();\n    this.last_processed_block = null;\n    this.simple_objects_by_id = Immutable.Map();\n\n    clearTimeout(this.timeout);\n\n    // tournament_ids_by_state is a\n    //   Map(account => Map(state_string => Set of tournament ids))\n    // it maintains a map of tournaments a given account is allowed to participate\n    // in (open-registration tournaments or tournaments they are whitelisted for).\n    // the null account maps to all tournaments\n    // accounts and states will not be tracked until their first access\n    this.tournament_ids_by_state = Immutable.Map().set(null, new Immutable.Map());\n\n    // registered_tournaments_details_by_player is a map of\n    //   Map(registered_account_id => Set of tournament details objects)\n    // it only tracks tournaments which the account has registered to play in\n    this.registered_tournament_ids_by_player = Immutable.Map();\n\n    this.last_tournament_id = undefined;\n\n    this.store_initialized = false;\n  }\n\n  resetCache() {\n    this.subscribed = false;\n    this.subError = null;\n    this.clearCache();\n    this.head_block_time_string = null;\n    this.init()\n      .then(() => {\n        console.log('resetCache init success');\n      })\n      .catch((err) => {\n        console.log('resetCache init error:', err);\n      });\n  }\n\n  setDispatchFrequency(freq) {\n    this.dispatchFrequency = freq;\n  }\n\n  init() {\n    let reconnectCounter = 0;\n\n    let _init = (resolve, reject) => {\n      if (this.subscribed) {\n        return resolve();\n      }\n\n      let db_api = Apis.instance().db_api();\n\n      if (!db_api) {\n        return reject(\n          new Error(\n            'Api not found, please initialize the api instance before calling the ChainStore'\n          )\n        );\n      }\n\n      return db_api\n        .exec('get_objects', [['2.1.0']])\n        .then((optional_objects) => {\n          for (let i = 0, len = optional_objects.length; i < len; i++) {\n            let optional_object = optional_objects[i];\n\n            if (optional_object) {\n              this._updateObject(optional_object, true);\n\n              let head_time = new Date(`${optional_object.time}+00:00`).getTime();\n              this.head_block_time_string = optional_object.time;\n              this.chain_time_offset.push(\n                new Date().getTime() - ChainStore.timeStringToDate(optional_object.time).getTime()\n              );\n              let now = new Date().getTime();\n              let delta = (now - head_time) / 1000;\n              let start = Date.parse('Sep 1, 2015');\n              let progress_delta = head_time - start;\n              this.progress = progress_delta / (now - start);\n\n              if (delta < 60) {\n                Apis.instance()\n                  .db_api()\n                  .exec('set_subscribe_callback', [this.onUpdate.bind(this), true])\n                  .then(() => {\n                    console.log('synced and subscribed, chainstore ready');\n                    this.subscribed = true;\n                    this.fetchRecentOperations();\n                    this.subError = null;\n                    resolve();\n                  })\n                  .catch((error) => {\n                    this.subscribed = false;\n                    this.subError = error;\n                    reject(error);\n                    console.log('Error: ', error);\n                  });\n              } else {\n                console.log('not yet synced, retrying in 1s');\n                this.subscribed = false;\n                reconnectCounter++;\n\n                if (reconnectCounter > 5) {\n                  this.subError = new Error(\n                    'ChainStore sync error, please check your system clock'\n                  );\n                  return reject(this.subError);\n                }\n\n                setTimeout(_init.bind(this, resolve, reject), 1000);\n              }\n            } else {\n              setTimeout(_init.bind(this, resolve, reject), 1000);\n            }\n          }\n        })\n        .catch((error) => {\n          // in the event of an error clear the pending state for id\n          console.log('!!! Chain API error', error);\n          this.objects_by_id = this.objects_by_id.delete('2.1.0');\n          reject(error);\n        });\n    };\n\n    return Apis.instance().init_promise.then(() => new Promise(_init));\n  }\n\n  _subTo(type, id) {\n    let key = `subbed_${type}`;\n\n    if (!this[key].has(id)) {\n      this[key].add(id);\n    }\n  }\n\n  unSubFrom(type, id) {\n    let key = `subbed_${type}`;\n    this[key].delete(id);\n    this.objects_by_id.delete(id);\n  }\n\n  _isSubbedTo(type, id) {\n    let key = `subbed_${type}`;\n    return this[key].has(id);\n  }\n\n  // / map from account id to objects\n  onUpdate(updated_objects) {\n    let cancelledOrders = [];\n    let closedCallOrders = [];\n\n    emitter.emit('heartbeat');\n\n    // updated_objects is the parameter list, it should always be exactly\n    // one element long.\n    // The single parameter to this callback function is a vector of variants, where\n    // each entry indicates one changed object.\n    // If the entry is an object id, it means the object has been removed.  If it\n    // is an full object, then the object is either newly-created or changed.\n    for (let a = 0, len = updated_objects.length; a < len; ++a) {\n      for (let i = 0, sub_len = updated_objects[a].length; i < sub_len; ++i) {\n        let obj = updated_objects[a][i];\n\n        if (ChainValidation.is_object_id(obj)) {\n          // An entry containing only an object ID means that object was removed\n          // console.log(\"removed obj\", obj);\n          // Check if the object exists in the ChainStore\n          let old_obj = this.objects_by_id.get(obj);\n\n          if (obj.search(order_prefix) === 0) {\n            emitter.emit('cancel-order', obj);\n            cancelledOrders.push(obj);\n\n            if (!old_obj) {\n              return;\n            }\n\n            let account = this.objects_by_id.get(old_obj.get('seller'));\n\n            if (account && account.has('orders')) {\n              let limit_orders = account.get('orders');\n\n              if (account.get('orders').has(obj)) {\n                account = account.set('orders', limit_orders.delete(obj));\n                this.objects_by_id = this.objects_by_id.set(account.get('id'), account);\n              }\n            }\n          }\n\n          // Update nested call_order inside account object\n          if (obj.search(call_order_prefix) === 0) {\n            emitter.emit('close-call', obj);\n            closedCallOrders.push(obj);\n\n            if (!old_obj) {\n              return;\n            }\n\n            let account = this.objects_by_id.get(old_obj.get('borrower'));\n\n            if (account && account.has('call_orders')) {\n              let call_orders = account.get('call_orders');\n\n              if (account.get('call_orders').has(obj)) {\n                account = account.set('call_orders', call_orders.delete(obj));\n                this.objects_by_id = this.objects_by_id.set(account.get('id'), account);\n              }\n            }\n          }\n\n          // Remove the object\n          this.objects_by_id = this.objects_by_id.set(obj, null);\n        } else {\n          this._updateObject(obj);\n        }\n      }\n    }\n\n    // Cancelled limit order(s), emit event for any listeners to update their state\n    if (cancelledOrders.length) {\n      emitter.emit('cancel-order', cancelledOrders);\n    }\n\n    // Closed call order, emit event for any listeners to update their state\n    if (closedCallOrders.length) {\n      emitter.emit('close-call', closedCallOrders);\n    }\n\n    this.notifySubscribers();\n  }\n\n  notifySubscribers() {\n    // Dispatch at most only once every x milliseconds\n    if (!this.dispatched) {\n      this.dispatched = true;\n      this.timeout = setTimeout(() => {\n        this.dispatched = false;\n        this.subscribers.forEach((callback) => callback());\n      }, this.dispatchFrequency);\n    }\n  }\n\n  /**\n   *  Add a callback that will be called anytime any object in the cache is updated\n   */\n  subscribe(callback) {\n    if (this.subscribers.has(callback)) {\n      console.error('Subscribe callback already exists', callback);\n    }\n\n    this.subscribers.add(callback);\n  }\n\n  /**\n   *  Remove a callback that was previously added via subscribe\n   */\n  unsubscribe(callback) {\n    if (!this.subscribers.has(callback)) {\n      console.error('Unsubscribe callback does not exists', callback);\n    }\n\n    this.subscribers.delete(callback);\n  }\n\n  /** Clear an object from the cache to force it to be fetched again. This may\n   * be useful if a query failed the first time and the wallet has reason to believe\n   * it may succeede the second time.\n   */\n  clearObjectCache(id) {\n    this.objects_by_id = this.objects_by_id.delete(id);\n  }\n\n  /**\n   * There are three states an object id could be in:\n   *\n   * 1. undefined       - returned if a query is pending\n   * 3. defined         - return an object\n   * 4. null            - query return null\n   *\n   */\n  getObject(id, force = false) {\n    if (!ChainValidation.is_object_id(id)) {\n      throw Error(`argument is not an object id: ${JSON.stringify(id)}`);\n    }\n\n    let result = this.objects_by_id.get(id);\n\n    if (result === undefined || force) {\n      return this.fetchObject(id, force);\n    }\n\n    if (result === true) {\n      return undefined;\n    }\n\n    return result;\n  }\n\n  getSimpleObjectById(id) {\n    return new Promise((success, fail) => {\n      if (!ChainValidation.is_object_id(id)) {\n        return fail(new Error(`argument is not an object id: ${JSON.stringify(id)}`));\n      }\n\n      let result = this.simple_objects_by_id.get(id);\n\n      if (result) {\n        return success(result);\n      }\n\n      Apis.instance()\n        .db_api()\n        .exec('get_objects', [[id]])\n        .then((objects) => {\n          let object = objects[0];\n\n          if (!object) {\n            return success(null);\n          }\n\n          this.simple_objects_by_id = this.simple_objects_by_id.set(id, object);\n          success(object);\n        });\n    });\n  }\n\n  /**\n   *  @return undefined if a query is pending\n   *  @return null if id_or_symbol has been queired and does not exist\n   *  @return object if the id_or_symbol exists\n   */\n  getAsset(id_or_symbol) {\n    if (!id_or_symbol) {\n      return null;\n    }\n\n    if (ChainValidation.is_object_id(id_or_symbol)) {\n      let asset = this.getObject(id_or_symbol);\n\n      if (asset && (asset.get('bitasset') && !asset.getIn(['bitasset', 'current_feed']))) {\n        return undefined;\n      }\n\n      return asset;\n    }\n\n    // / TODO: verify id_or_symbol is a valid symbol name\n\n    let asset_id = this.assets_by_symbol.get(id_or_symbol);\n\n    if (ChainValidation.is_object_id(asset_id)) {\n      let asset = this.getObject(asset_id);\n\n      if (asset && (asset.get('bitasset') && !asset.getIn(['bitasset', 'current_feed']))) {\n        return undefined;\n      }\n\n      return asset;\n    }\n\n    if (asset_id === null) {\n      return null;\n    }\n\n    if (asset_id === true) {\n      return undefined;\n    }\n\n    Apis.instance()\n      .db_api()\n      .exec('lookup_asset_symbols', [[id_or_symbol]])\n      .then((asset_objects) => {\n        if (asset_objects.length && asset_objects[0]) {\n          this._updateObject(asset_objects[0], true);\n        } else {\n          this.assets_by_symbol = this.assets_by_symbol.set(id_or_symbol, null);\n          this.notifySubscribers();\n        }\n      })\n      .catch((error) => {\n        console.log('Error: ', error);\n        this.assets_by_symbol = this.assets_by_symbol.delete(id_or_symbol);\n      });\n\n    return undefined;\n  }\n\n  /**\n   *  @param the public key to find accounts that reference it\n   *\n   *  @return Set of account ids that reference the given key\n   *  @return a empty Set if no items are found\n   *  @return undefined if the result is unknown\n   *\n   *  If this method returns undefined, then it will send a request to\n   *  the server for the current set of accounts after which the\n   *  server will notify us of any accounts that reference these keys\n   */\n  getAccountRefsOfKey(key) {\n    if (this.get_account_refs_of_keys_calls.has(key)) {\n      return this.account_ids_by_key.get(key);\n    }\n\n    this.get_account_refs_of_keys_calls = this.get_account_refs_of_keys_calls.add(key);\n    Apis.instance()\n      .db_api()\n      .exec('get_key_references', [[key]])\n      .then(\n        (vec_account_id) => {\n          let refs = Immutable.Set();\n          vec_account_id = vec_account_id[0];\n          refs = refs.withMutations((r) => {\n            for (let i = 0; i < vec_account_id.length; ++i) {\n              r.add(vec_account_id[i]);\n            }\n          });\n          this.account_ids_by_key = this.account_ids_by_key.set(key, refs);\n          this.notifySubscribers();\n        },\n        () => {\n          this.account_ids_by_key = this.account_ids_by_key.delete(key);\n          this.get_account_refs_of_keys_calls = this.get_account_refs_of_keys_calls.delete(key);\n        }\n      );\n    return undefined;\n  }\n\n  /**\n   * @return a Set of balance ids that are claimable with the given address\n   * @return undefined if a query is pending and the set is not known at this time\n   * @return a empty Set if no items are found\n   *\n   * If this method returns undefined, then it will send a request to the server for\n   * the current state after which it will be subscribed to changes to this set.\n   */\n  getBalanceObjects(address) {\n    let current = this.balance_objects_by_address.get(address);\n\n    if (current === undefined) {\n      /** because balance objects are simply part of the genesis state\n       * there is no need to worry about having to update them / merge\n       * them or index them in updateObject.\n       */\n      this.balance_objects_by_address = this.balance_objects_by_address.set(\n        address,\n        Immutable.Set()\n      );\n      Apis.instance()\n        .db_api()\n        .exec('get_balance_objects', [[address]])\n        .then(\n          (balance_objects) => {\n            let set = new Set();\n\n            for (let i = 0; i < balance_objects.length; ++i) {\n              this._updateObject(balance_objects[i]);\n              set.add(balance_objects[i].id);\n            }\n\n            this.balance_objects_by_address = this.balance_objects_by_address.set(\n              address,\n              Immutable.Set(set)\n            );\n            this.notifySubscribers();\n          },\n          () => {\n            this.balance_objects_by_address = this.balance_objects_by_address.delete(address);\n          }\n        );\n    }\n\n    return this.balance_objects_by_address.get(address);\n  }\n\n  /**\n   * @return a list of tournament ids for upcoming tournaments\n   * @return an empty list if a query is pending and the set is not known at this time\n   *         or if there are no upcoming touraments\n   *\n   * If we have not yet requested tournaments for this account, it will\n   * send a request to the server for the current list, after which it\n   * will be subscribed to changes to this set.\n   */\n  getTournamentIdsInState(accountId, stateString) {\n    let tournamentIdsForThisAccountAndState;\n    let tournamentIdsForThisAccount = this.tournament_ids_by_state.get(accountId);\n\n    if (tournamentIdsForThisAccount === undefined) {\n      tournamentIdsForThisAccountAndState = new Immutable.Set();\n      tournamentIdsForThisAccount = new Immutable.Map().set(\n        stateString,\n        tournamentIdsForThisAccountAndState\n      );\n      this.tournament_ids_by_state = this.tournament_ids_by_state.set(\n        accountId,\n        tournamentIdsForThisAccount\n      );\n    } else {\n      tournamentIdsForThisAccountAndState = tournamentIdsForThisAccount.get(stateString);\n\n      if (tournamentIdsForThisAccountAndState !== undefined) {\n        return tournamentIdsForThisAccountAndState;\n      }\n\n      tournamentIdsForThisAccountAndState = new Immutable.Set();\n      tournamentIdsForThisAccount = tournamentIdsForThisAccount.set(\n        stateString,\n        tournamentIdsForThisAccountAndState\n      );\n      this.tournament_ids_by_state = this.tournament_ids_by_state.set(\n        accountId,\n        tournamentIdsForThisAccount\n      );\n    }\n\n    Apis.instance()\n      .db_api()\n      .exec('get_tournaments_in_state', [stateString, 100])\n      .then((tournaments) => {\n        let originalTournamentIdsInState = this.tournament_ids_by_state.getIn([\n          accountId,\n          stateString\n        ]);\n        // call updateObject on each tournament, which will classify it\n        tournaments.forEach((tournament) => {\n          /**\n           * Fix bug: we cant update tournament_ids_by_state if objects_by_id has a tournament\n           */\n          if (!originalTournamentIdsInState.get(tournament.id)) {\n            this.clearObjectCache(tournament.id);\n          }\n\n          this._updateObject(tournament);\n        });\n\n        let tournament_id = this.tournament_ids_by_state.getIn([accountId, stateString]);\n\n        if (tournament_id !== originalTournamentIdsInState) {\n          this.notifySubscribers();\n        }\n      });\n    return tournamentIdsForThisAccountAndState;\n  }\n\n  getRegisteredTournamentIds(accountId) {\n    let tournamentIds = this.registered_tournament_ids_by_player.get(accountId);\n\n    if (tournamentIds !== undefined) {\n      return tournamentIds;\n    }\n\n    tournamentIds = new Immutable.Set();\n    this.registered_tournament_ids_by_player = this.registered_tournament_ids_by_player.set(\n      accountId,\n      tournamentIds\n    );\n\n    Apis.instance()\n      .db_api()\n      .exec('get_registered_tournaments', [accountId, 100])\n      .then((registered_tournaments) => {\n        let originalTournamentIds = this.registered_tournament_ids_by_player.get(accountId);\n        let newTournamentIds = new Immutable.Set(registered_tournaments);\n\n        if (!originalTournamentIds.equals(newTournamentIds)) {\n          this.registered_tournament_ids_by_player = this.registered_tournament_ids_by_player.set(\n            accountId,\n            newTournamentIds\n          );\n          this.notifySubscribers();\n        }\n      });\n\n    return tournamentIds;\n  }\n\n  /**\n   *  If there is not already a pending request to fetch this object, a new\n   *  request will be made.\n   *\n   *  @return null if the object does not exist,\n   *  @return undefined if the object might exist but is not in cache\n   *  @return the object if it does exist and is in our cache\n   */\n  fetchObject(id, force = false) {\n    if (typeof id !== 'string') {\n      let result = [];\n\n      for (let i = 0; i < id.length; ++i) {\n        result.push(this.fetchObject(id[i]));\n      }\n\n      return result;\n    }\n\n    if (DEBUG) {\n      console.log('!!! fetchObject: ', id, this.subscribed, !this.subscribed && !force);\n    }\n\n    if (!this.subscribed && !force) {\n      return undefined;\n    }\n\n    if (DEBUG) {\n      console.log('maybe fetch object: ', id);\n    }\n\n    if (!ChainValidation.is_object_id(id)) {\n      throw Error(`argument is not an object id: ${id}`);\n    }\n\n    if (id.substring(0, 4) === '1.2.') {\n      return this.fetchFullAccount(id);\n    }\n\n    if (id.search(witness_prefix) === 0) {\n      this._subTo('witnesses', id);\n    }\n\n    if (id.search(committee_prefix) === 0) {\n      this._subTo('committee', id);\n    }\n\n    let result = this.objects_by_id.get(id);\n\n    if (result === undefined) {\n      // the fetch\n      if (DEBUG) {\n        console.log('fetching object: ', id);\n      }\n\n      this.objects_by_id = this.objects_by_id.set(id, true);\n      Apis.instance()\n        .db_api()\n        .exec('get_objects', [[id]])\n        .then((optional_objects) => {\n          for (let i = 0; i < optional_objects.length; i++) {\n            let optional_object = optional_objects[i];\n\n            if (optional_object) {\n              this._updateObject(optional_object, true);\n              this.simple_objects_by_id = this.simple_objects_by_id.set(id, optional_object);\n            } else {\n              this.objects_by_id = this.objects_by_id.set(id, null);\n              this.notifySubscribers();\n            }\n          }\n        })\n        .catch((error) => {\n          // in the event of an error clear the pending state for id\n          console.log('!!! Chain API error', error);\n          this.objects_by_id = this.objects_by_id.delete(id);\n        });\n    } else if (result === true) {\n      // then we are waiting a response\n      return undefined;\n    }\n\n    return result; // we have a response, return it\n  }\n\n  /**\n   *  @return null if no such account exists\n   *  @return undefined if such an account may exist,\n   *  and fetch the the full account if not already pending\n   *  @return the account object if it does exist\n   */\n  getAccount(name_or_id) {\n    if (!name_or_id) {\n      return null;\n    }\n\n    if (typeof name_or_id === 'object') {\n      if (name_or_id.id) {\n        return this.getAccount(name_or_id.id);\n      }\n\n      if (name_or_id.get) {\n        return this.getAccount(name_or_id.get('id'));\n      }\n\n      return undefined;\n    }\n\n    if (ChainValidation.is_object_id(name_or_id)) {\n      let account = this.getObject(name_or_id);\n\n      if (account === null) {\n        return null;\n      }\n\n      if (account === undefined || account.get('name') === undefined) {\n        return this.fetchFullAccount(name_or_id);\n      }\n\n      return account;\n    }\n\n    if (ChainValidation.is_account_name(name_or_id, true)) {\n      let account_id = this.accounts_by_name.get(name_or_id);\n\n      if (account_id === null) {\n        return null; // already fetched and it wasn't found\n      }\n\n      if (account_id === undefined) {\n        // then no query, fetch it\n        return this.fetchFullAccount(name_or_id);\n      }\n\n      return this.getObject(account_id); // return it\n    }\n    // throw Error( `Argument is not an account name or id: ${name_or_id}` )\n  }\n\n  /**\n   * This method will attempt to lookup witness by account_id.\n   * If witness doesn't exist it will return null,\n   * if witness is found it will return witness object,\n   * if it's not fetched yet it will return undefined.\n   * @param account_id - account id\n   */\n  getWitnessById(account_id) {\n    let witness_id = this.witness_by_account_id.get(account_id);\n\n    if (witness_id === undefined) {\n      this.fetchWitnessByAccount(account_id);\n      return undefined;\n    }\n\n    if (witness_id) {\n      this._subTo('witnesses', witness_id);\n    }\n\n    return witness_id ? this.getObject(witness_id) : null;\n  }\n\n  /**\n   * This method will attempt to lookup witness by account_id.\n   * If witness doesn't exist it will return null,\n   * if witness is found it will return witness object,\n   * if it's not fetched yet it will return undefined.\n   * @param witness_id - witness id\n   */\n  getWitnessAccount(witness_id) {\n    return new Promise((success) => {\n      let account = this.account_by_witness_id.get(witness_id);\n\n      if (account) {\n        return success(account);\n      }\n\n      this.getSimpleObjectById(witness_id).then((witness) => {\n        this.getSimpleObjectById(witness.witness_account).then((fetched_account) => {\n          this.account_by_witness_id = this.account_by_witness_id.set(witness_id, fetched_account);\n          success(fetched_account);\n        });\n      });\n    });\n  }\n\n  /**\n   * This method will attempt to lookup committee member by account_id.\n   * If committee member doesn't exist it will return null,\n   * if committee member is found it will return committee member object,\n   * if it's not fetched yet it will return undefined.\n   * @param account_id - account id\n   */\n  getCommitteeMemberById(account_id) {\n    let cm_id = this.committee_by_account_id.get(account_id);\n\n    if (cm_id === undefined) {\n      this.fetchCommitteeMemberByAccount(account_id);\n      return undefined;\n    }\n\n    if (cm_id) {\n      this._subTo('committee', cm_id);\n    }\n\n    return cm_id ? this.getObject(cm_id) : null;\n  }\n\n  /**\n   * Obsolete! Please use getWitnessById\n   * This method will attempt to lookup the account, and then query to see whether or not there is\n   * a witness for this account. If the answer is known, it will return the witness_object,\n   * otherwise it will attempt to look it up and return null. Once the lookup has completed\n   * on_update will be called.\n   *\n   * @param id_or_account may either be an account_id, a witness_id, or an account_name\n   */\n  getWitness(id_or_account) {\n    console.log('DEPRECATED call to getWitness, use getWitnessById instead.');\n    let account = this.getAccount(id_or_account);\n\n    if (!account) {\n      return null;\n    }\n\n    let account_id = account.get('id');\n\n    let witness_id = this.witness_by_account_id.get(account_id);\n\n    if (witness_id === undefined) {\n      this.fetchWitnessByAccount(account_id);\n    }\n\n    return this.getObject(witness_id);\n  }\n\n  // Obsolete! Please use getCommitteeMemberById\n  getCommitteeMember(id_or_account, on_update = null) {\n    console.log('DEPRECATED call to getCommitteeMember, use getCommitteeMemberById instead.');\n\n    let is_account = ChainValidation.is_account_name(id_or_account, true);\n\n    if (is_account || id_or_account.substring(0, 4) === '1.2.') {\n      let account = this.getAccount(id_or_account);\n\n      if (!account) {\n        this.lookupAccountByName(id_or_account).then(\n          (lookup_account) => {\n            let account_id = lookup_account.get('id');\n            let committee_id = this.committee_by_account_id.get(account_id);\n\n            if (ChainValidation.is_object_id(committee_id)) {\n              return this.getObject(committee_id, on_update);\n            }\n\n            if (committee_id === undefined) {\n              this.fetchCommitteeMemberByAccount(account_id).then((committee) => {\n                this.committee_by_account_id.set(\n                  account_id,\n                  committee ? committee.get('id') : null\n                );\n\n                if (on_update && committee) {\n                  on_update();\n                }\n              });\n            }\n          },\n          () => {\n            this.committee_by_account_id.set(id_or_account, null);\n          }\n        );\n      } else {\n        let account_id = account.get('id');\n        let committee_id = this.committee_by_account_id.get(account_id);\n\n        if (ChainValidation.is_object_id(committee_id)) {\n          return this.getObject(committee_id, on_update);\n        }\n\n        if (committee_id === undefined) {\n          this.fetchCommitteeMemberByAccount(account_id).then((committee) => {\n            this.committee_by_account_id.set(account_id, committee ? committee.get('id') : null);\n\n            if (on_update && committee) {\n              on_update();\n            }\n          });\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   *\n   * @returns promise with a list of all witness ids, active or not.\n   * @memberof ChainStore\n   */\n  fetchWitnessAccounts() {\n    return new Promise((resolve, reject) => {\n      Apis.instance().db_api().exec('lookup_witness_accounts', [0, 1000]).then((w) => {\n        if (w) {\n          let witnessArr = [];\n          let tmpObj = {};\n\n          for (let i = 0, length = w.length; i < length; i++) {\n            witnessArr.push(w[i][1]); // ids only\n\n            if (tmpObj[w[i][0]] !== undefined) {\n              tmpObj[w[i][0]].name = w[i][0];\n              tmpObj[w[i][0]].id = w[i][1];\n            } else {\n              tmpObj.name = w[i][0];\n              tmpObj.id = w[i][1];\n            }\n          }\n\n          this.witnesses = this.witnesses.merge(witnessArr);\n          this._updateObject(tmpObj, true);\n          resolve(this.witnesses);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  }\n\n  /**\n   *\n   * @return a promise with the witness object\n   */\n  fetchWitnessByAccount(account_id) {\n    return new Promise((resolve, reject) => {\n      Apis.instance()\n        .db_api()\n        .exec('get_witness_by_account', [account_id])\n        .then((optional_witness_object) => {\n          if (optional_witness_object) {\n            this._subTo('witnesses', optional_witness_object.id);\n            this.witness_by_account_id = this.witness_by_account_id.set(\n              optional_witness_object.witness_account,\n              optional_witness_object.id\n            );\n            let witness_object = this._updateObject(optional_witness_object, true);\n            resolve(witness_object);\n          } else {\n            this.witness_by_account_id = this.witness_by_account_id.set(account_id, null);\n            this.notifySubscribers();\n            resolve(null);\n          }\n        }, reject);\n    });\n  }\n\n  /**\n   *\n   * @return a promise with the witness object\n   */\n  fetchCommitteeMemberByAccount(account_id) {\n    return new Promise((resolve, reject) => {\n      Apis.instance()\n        .db_api()\n        .exec('get_committee_member_by_account', [account_id])\n        .then((optional_committee_object) => {\n          if (optional_committee_object) {\n            this._subTo('committee', optional_committee_object.id);\n            this.committee_by_account_id = this.committee_by_account_id.set(\n              optional_committee_object.committee_member_account,\n              optional_committee_object.id\n            );\n            let committee_object = this._updateObject(optional_committee_object, true);\n            resolve(committee_object);\n          } else {\n            this.committee_by_account_id = this.committee_by_account_id.set(account_id, null);\n            this.notifySubscribers();\n            resolve(null);\n          }\n        }, reject);\n    });\n  }\n\n  /**\n   *  Fetches an account and all of its associated data in a single query\n   *\n   *  @param an account name or account id\n   *\n   *  @return undefined if the account in question is in the process of being fetched\n   *  @return the object if it has already been fetched\n   *  @return null if the object has been queried and was not found\n   */\n  fetchFullAccount(name_or_id) {\n    if (DEBUG) {\n      console.log('Fetch full account: ', name_or_id);\n    }\n\n    let fetch_account = false;\n\n    if (ChainValidation.is_object_id(name_or_id)) {\n      let current = this.objects_by_id.get(name_or_id);\n      fetch_account = current === undefined;\n\n      if (!fetch_account && fetch_account.get('name')) {\n        return current;\n      }\n    } else {\n      if (!ChainValidation.is_account_name(name_or_id, true)) {\n        throw Error(`argument is not an account name: ${name_or_id}`);\n      }\n\n      let account_id = this.accounts_by_name.get(name_or_id);\n\n      if (ChainValidation.is_object_id(account_id)) {\n        return this.getAccount(account_id);\n      }\n    }\n\n    // / only fetch once every 5 seconds if it wasn't found\n    if (\n      !this.fetching_get_full_accounts.has(name_or_id)\n      || Date.now() - this.fetching_get_full_accounts.get(name_or_id) > 5000\n    ) {\n      this.fetching_get_full_accounts.set(name_or_id, Date.now());\n      // console.log( \"FETCHING FULL ACCOUNT: \", name_or_id )\n      Apis.instance()\n        .db_api()\n        .exec('get_full_accounts', [[name_or_id], true])\n        .then(\n          (results) => {\n            if (results.length === 0) {\n              if (ChainValidation.is_object_id(name_or_id)) {\n                this.objects_by_id = this.objects_by_id.set(name_or_id, null);\n                this.notifySubscribers();\n              }\n\n              return;\n            }\n\n            let full_account = results[0][1];\n\n            if (DEBUG) {\n              console.log('full_account: ', full_account);\n            }\n\n            this._subTo('accounts', full_account.account.id);\n\n            let {\n              account,\n              vesting_balances,\n              pending_dividend_payments,\n              statistics,\n              call_orders,\n              limit_orders,\n              referrer_name,\n              registrar_name,\n              lifetime_referrer_name,\n              votes,\n              proposals\n            } = full_account;\n\n            this.accounts_by_name = this.accounts_by_name.set(account.name, account.id);\n            account.referrer_name = referrer_name;\n            account.lifetime_referrer_name = lifetime_referrer_name;\n            account.registrar_name = registrar_name;\n            account.balances = {};\n            account.orders = new Immutable.Set();\n            account.vesting_balances = new Immutable.Set();\n            account.pending_dividend_payments = new Immutable.Set();\n            account.balances = new Immutable.Map();\n            account.call_orders = new Immutable.Set();\n            account.proposals = new Immutable.Set();\n            account.vesting_balances = account.vesting_balances.withMutations((set) => {\n              vesting_balances.forEach((vb) => {\n                this._updateObject(vb);\n                set.add(vb.id);\n              });\n            });\n\n            let sub_to_objects = [];\n\n            votes.forEach((v) => this._updateObject(v));\n\n            account.balances = account.balances.withMutations((map) => {\n              full_account.balances.forEach((b) => {\n                this._updateObject(b);\n                map.set(b.asset_type, b.id);\n                sub_to_objects.push(b.id);\n              });\n            });\n\n            account.orders = account.orders.withMutations((set) => {\n              limit_orders.forEach((order) => {\n                this._updateObject(order);\n                set.add(order.id);\n                sub_to_objects.push(order.id);\n              });\n            });\n\n            account.pending_dividend_payments = account.pending_dividend_payments.withMutations(\n              (set) => {\n                pending_dividend_payments.forEach((payments) => {\n                  this._updateObject(payments);\n                  set.add(payments);\n                  sub_to_objects.push(payments.id);\n                });\n              }\n            );\n\n            account.call_orders = account.call_orders.withMutations((set) => {\n              call_orders.forEach((co) => {\n                this._updateObject(co);\n                set.add(co.id);\n                sub_to_objects.push(co.id);\n              });\n            });\n\n            account.proposals = account.proposals.withMutations((set) => {\n              proposals.forEach((p) => {\n                this._updateObject(p);\n                set.add(p.id);\n                sub_to_objects.push(p.id);\n              });\n            });\n\n            if (sub_to_objects.length) {\n              Apis.instance()\n                .db_api()\n                .exec('get_objects', [sub_to_objects]);\n            }\n\n            this._updateObject(statistics);\n            let updated_account = this._updateObject(account);\n            this.fetchRecentHistory(updated_account);\n            this.notifySubscribers();\n          },\n          (error) => {\n            console.log('Error: ', error);\n\n            if (ChainValidation.is_object_id(name_or_id)) {\n              this.objects_by_id = this.objects_by_id.delete(name_or_id);\n            } else {\n              this.accounts_by_name = this.accounts_by_name.delete(name_or_id);\n            }\n          }\n        );\n    }\n\n    return undefined;\n  }\n\n  static getAccountMemberStatus(account) {\n    if (account === undefined) {\n      return undefined;\n    }\n\n    if (account === null) {\n      return 'unknown';\n    }\n\n    if (account.get('lifetime_referrer') === account.get('id')) {\n      return 'lifetime';\n    }\n\n    let exp = new Date(account.get('membership_expiration_date')).getTime();\n    let now = new Date().getTime();\n\n    if (exp < now) {\n      return 'basic';\n    }\n\n    return 'annual';\n  }\n\n  getAccountBalance(account, asset_type) {\n    let balances = account.get('balances');\n\n    if (!balances) {\n      return 0;\n    }\n\n    let balance_obj_id = balances.get(asset_type);\n\n    if (balance_obj_id) {\n      let bal_obj = this.objects_by_id.get(balance_obj_id);\n\n      if (bal_obj) {\n        return bal_obj.get('balance');\n      }\n    }\n\n    return 0;\n  }\n\n  /**\n   * There are two ways to extend the account history, add new more\n   * recent history, and extend historic hstory. This method will fetch\n   * the most recent account history and prepend it to the list of\n   * historic operations.\n   *\n   *  @param account immutable account object\n   *  @return a promise with the account history\n   */\n  fetchRecentHistory(account, limit = 100) {\n    let account_id = account;\n\n    if (!ChainValidation.is_object_id(account_id) && account.toJS) {\n      account_id = account.get('id');\n    }\n\n    if (!ChainValidation.is_object_id(account_id)) {\n      return;\n    }\n\n    account = this.objects_by_id.get(account_id);\n\n    if (!account) {\n      return;\n    }\n\n    let pending_request = this.account_history_requests.get(account_id);\n\n    if (pending_request) {\n      pending_request.requests++;\n      return pending_request.promise;\n    }\n\n    pending_request = {requests: 0};\n\n    let most_recent = `1.${op_history}.0`;\n    let history = account.get('history');\n\n    if (history && history.size) {\n      most_recent = history.first().get('id');\n    }\n\n    // / starting at 0 means start at NOW, set this to something other than 0\n    // / to skip recent transactions and fetch the tail\n    let start = `1.${op_history}.0`;\n\n    pending_request.promise = new Promise((resolve, reject) => {\n      Apis.instance()\n        .history_api()\n        .exec('get_account_history', [account_id, most_recent, limit, start])\n        .then((operations) => {\n          let current_account = this.objects_by_id.get(account_id);\n          let current_history = current_account.get('history');\n\n          if (!current_history) {\n            current_history = Immutable.List();\n          }\n\n          let updated_history = Immutable.fromJS(operations);\n          updated_history = updated_history.withMutations((list) => {\n            for (let i = 0; i < current_history.size; ++i) {\n              list.push(current_history.get(i));\n            }\n          });\n          let updated_account = current_account.set('history', updated_history);\n          this.objects_by_id = this.objects_by_id.set(account_id, updated_account);\n\n          let request = this.account_history_requests.get(account_id);\n          this.account_history_requests.delete(account_id);\n\n          if (request.requests > 0) {\n            // it looks like some more history may have come in while we were\n            // waiting on the result, lets fetch anything new before we resolve\n            // this query.\n            this.fetchRecentHistory(updated_account, limit).then(resolve, reject);\n          } else {\n            resolve(updated_account);\n          }\n        }); // end then\n    });\n\n    this.account_history_requests.set(account_id, pending_request);\n    return pending_request.promise;\n  }\n\n  /**\n   * @brief Get a list of all sports\n   */\n\n  static getSportsList() {\n    return new Promise((resolve, reject) => {\n      Apis.instance()\n        .db_api()\n        .exec('list_sports', [])\n        .then((sportsList) => {\n          if (sportsList) {\n            resolve(sportsList);\n          } else {\n            resolve(null);\n          }\n        }, reject);\n    });\n  }\n\n  /**\n   * @brief Return a list of all event groups for a sport (e.g. all soccer leagues in soccer)\n   */\n\n  getEventGroupsList(sportId) {\n    let eventGroupsList = this.event_groups_list_by_sport_id.get(sportId);\n\n    if (eventGroupsList === undefined) {\n      this.event_groups_list_by_sport_id = this.event_groups_list_by_sport_id.set(\n        sportId,\n        Immutable.Set()\n      );\n\n      Apis.instance()\n        .db_api()\n        .exec('list_event_groups', [sportId])\n        .then(\n          (eventGroups) => {\n            let set = new Set();\n\n            for (let i = 0, len = eventGroups.length; i < len; ++i) {\n              set.add(eventGroups[i]);\n            }\n\n            this.event_groups_list_by_sport_id = this.event_groups_list_by_sport_id.set(\n              sportId,\n              Immutable.Set(set)\n            );\n            this.notifySubscribers();\n          },\n          () => {\n            this.event_groups_list_by_sport_id = this.event_groups_list_by_sport_id.delete(sportId);\n          }\n        );\n    }\n\n    return this.event_groups_list_by_sport_id.get(sportId);\n  }\n\n  /**\n   * @brief Return a list of all betting market groups for an event\n   */\n\n  getBettingMarketGroupsList(eventId) {\n    let bettingMarketGroupsList = this.betting_market_groups_list_by_sport_id.get(eventId);\n\n    if (bettingMarketGroupsList === undefined) {\n      this.betting_market_groups_list_by_sport_id = this.betting_market_groups_list_by_sport_id.set(\n        eventId,\n        Immutable.Set()\n      );\n\n      Apis.instance()\n        .db_api()\n        .exec('list_betting_market_groups', [eventId])\n        .then(\n          (bettingMarketGroups) => {\n            let set = new Set();\n\n            for (let i = 0, len = bettingMarketGroups.length; i < len; ++i) {\n              set.add(bettingMarketGroups[i]);\n            }\n\n            this.betting_market_groups_list_by_sport_id = this.betting_market_groups_list_by_sport_id.set( // eslint-disable-line\n              eventId,\n              Immutable.Set(set)\n            );\n            this.notifySubscribers();\n          },\n          () => {\n            this.betting_market_groups_list_by_sport_id = this.betting_market_groups_list_by_sport_id.delete( // eslint-disable-line\n              eventId\n            );\n          }\n        );\n    }\n\n    return this.betting_market_groups_list_by_sport_id.get(eventId);\n  }\n\n  /**\n   * @brief Return a list of all betting markets for a betting market group\n   */\n\n  getBettingMarketsList(bettingMarketGroupId) {\n    let bettingMarketsList = this.betting_markets_list_by_sport_id.get(bettingMarketGroupId);\n\n    if (bettingMarketsList === undefined) {\n      this.betting_markets_list_by_sport_id = this.betting_markets_list_by_sport_id.set(\n        bettingMarketGroupId,\n        Immutable.Set()\n      );\n\n      Apis.instance()\n        .db_api()\n        .exec('list_betting_markets', [bettingMarketGroupId])\n        .then(\n          (bettingMarkets) => {\n            let set = new Set();\n\n            for (let i = 0, len = bettingMarkets.length; i < len; ++i) {\n              set.add(bettingMarkets[i]);\n            }\n\n            this.betting_markets_list_by_sport_id = this.betting_markets_list_by_sport_id.set(\n              bettingMarketGroupId,\n              Immutable.Set(set)\n            );\n            this.notifySubscribers();\n          },\n          () => {\n            this.betting_markets_list_by_sport_id = this.betting_markets_list_by_sport_id.delete(\n              bettingMarketGroupId\n            );\n          }\n        );\n    }\n\n    return this.betting_markets_list_by_sport_id.get(bettingMarketGroupId);\n  }\n\n  /**\n   * @brief Get global betting statistics\n   */\n\n  static getGlobalBettingStatistics() {\n    return new Promise((resolve, reject) => {\n      Apis.instance()\n        .db_api()\n        .exec('get_global_betting_statistics', [])\n        .then((getGlobalBettingStatistics) => {\n          if (getGlobalBettingStatistics) {\n            resolve(getGlobalBettingStatistics);\n          } else {\n            resolve(null);\n          }\n        }, reject);\n    });\n  }\n\n  static getBinnedOrderBook(betting_market_id, precision) {\n    return new Promise((resolve, reject) => {\n      Apis.instance()\n        .bookie_api()\n        .exec('get_binned_order_book', [betting_market_id, precision])\n        .then((order_book_object) => {\n          if (order_book_object) {\n            resolve(order_book_object);\n          } else {\n            resolve(null);\n          }\n        }, reject);\n    });\n  }\n\n  static getTotalMatchedBetAmountForBettingMarketGroup(group_id) {\n    return new Promise((resolve, reject) => {\n      Apis.instance()\n        .bookie_api()\n        .exec('get_total_matched_bet_amount_for_betting_market_group', [group_id])\n        .then((total_matched_bet_amount) => {\n          if (total_matched_bet_amount) {\n            resolve(total_matched_bet_amount);\n          } else {\n            resolve(null);\n          }\n        }, reject);\n    });\n  }\n\n  static getEventsContainingSubString(sub_string, language) {\n    return new Promise((resolve, reject) => {\n      Apis.instance()\n        .bookie_api()\n        .exec('get_events_containing_sub_string', [sub_string, language])\n        .then((events_containing_sub_string) => {\n          if (events_containing_sub_string) {\n            resolve(events_containing_sub_string);\n          } else {\n            resolve(null);\n          }\n        }, reject);\n    });\n  }\n\n  static getUnmatchedBetsForBettor(betting_market_id_type, account_id_type) {\n    return new Promise((resolve, reject) => {\n      Apis.instance()\n        .db_api()\n        .exec('get_unmatched_bets_for_bettor', [betting_market_id_type, account_id_type])\n        .then((unmatched_bets_for_bettor) => {\n          if (unmatched_bets_for_bettor) {\n            resolve(unmatched_bets_for_bettor);\n          } else {\n            resolve(null);\n          }\n        }, reject);\n    });\n  }\n\n  static listEventsInGroup(event_group_id) {\n    return new Promise((resolve, reject) => {\n      Apis.instance()\n        .db_api()\n        .exec('list_events_in_group', [event_group_id])\n        .then((events_in_group) => {\n          if (events_in_group) {\n            resolve(events_in_group);\n          } else {\n            resolve(null);\n          }\n        }, reject);\n    });\n  }\n\n  static getAllUnmatchedBetsForBettor(account_id_type) {\n    return new Promise((resolve, reject) => {\n      Apis.instance()\n        .db_api()\n        .exec('get_all_unmatched_bets_for_bettor', [account_id_type])\n        .then((all_unmatched_bets_for_bettor) => {\n          if (all_unmatched_bets_for_bettor) {\n            resolve(all_unmatched_bets_for_bettor);\n          } else {\n            resolve(null);\n          }\n        }, reject);\n    });\n  }\n\n  static getMatchedBetsForBettor(bettor_id) {\n    return new Promise((resolve, reject) => {\n      Apis.instance()\n        .bookie_api()\n        .exec('get_matched_bets_for_bettor', [bettor_id])\n        .then((matched_bets_for_bettor) => {\n          if (matched_bets_for_bettor) {\n            resolve(matched_bets_for_bettor);\n          } else {\n            resolve(null);\n          }\n        }, reject);\n    });\n  }\n\n  static getAllMatchedBetsForBettor(bettor_id, start, limit = 1000) {\n    return new Promise((resolve, reject) => {\n      Apis.instance()\n        .bookie_api()\n        .exec('get_all_matched_bets_for_bettor', [bettor_id, start, limit])\n        .then((all_matched_bets_for_bettor) => {\n          if (all_matched_bets_for_bettor) {\n            resolve(all_matched_bets_for_bettor);\n          } else {\n            resolve(null);\n          }\n        }, reject);\n    });\n  }\n\n  /**\n   *  Updates the object in place by only merging the set\n   *  properties of object.\n   *\n   *  This method will create an immutable object with the given ID if\n   *  it does not already exist.\n   *\n   *  This is a \"private\" method called when data is received from the\n   *  server and should not be used by others.\n   *\n   *  @pre object.id must be a valid object ID\n   *  @return an Immutable constructed from object and deep merged with the current state\n   */\n  _updateObject(object, notify_subscribers = false, emit = true) {\n    if (!('id' in object)) {\n      console.log('object with no id:', object);\n\n      if ('balance' in object && 'owner' in object && 'settlement_date' in object) {\n        // Settle order object\n        emitter.emit('settle-order-update', object);\n      }\n\n      return;\n    }\n\n    let objectSpace = object.id.split('.').slice(0, -1);\n    objectSpace.push(null); // Push an empty element into the array to take up the id space.\n    objectSpace = objectSpace.join('.');\n\n    /*\n    * A lot of objects get spammed by the API that we don't care about, filter these out here\n    */\n    // Transaction object\n    if (objectSpace === transaction_prefix) {\n      return; // console.log(\"not interested in transaction:\", object);\n    }\n\n    if (objectSpace === account_transaction_history_prefix) {\n      // transaction_history object\n      if (!this._isSubbedTo('accounts', object.account)) {\n        return; // console.log(\"not interested in transaction_history of\", object.account);\n      }\n    } else if (objectSpace === order_prefix) {\n      // limit_order object\n      if (!this._isSubbedTo('accounts', object.seller)) {\n        return; // console.log(\"not interested in limit_orders of\", object.seller);\n      }\n    } else if (objectSpace === call_order_prefix) {\n      // call_order object\n      if (!this._isSubbedTo('accounts', object.borrower)) {\n        return; // console.log(\"not interested in call_orders of\", object.borrower);\n      }\n    } else if (objectSpace === balance_prefix) {\n      // balance object\n      if (!this._isSubbedTo('accounts', object.owner)) {\n        return; // console.log(\"not interested in balance_object of\", object.owner);\n      }\n    } else if (objectSpace === operation_history_prefix) {\n      // operation_history object\n      return; // console.log(\"not interested in operation_history\", object);\n    } else if (objectSpace === block_summary_prefix) {\n      // block_summary object\n      return; // console.log(\"not interested in block_summary_prefix\", object);\n    } else if (objectSpace === account_stats_prefix) {\n      // account_stats object\n      if (!this._isSubbedTo('accounts', object.owner)) {\n        return; // console.log(\"not interested in stats of\", object.owner);\n      }\n    } else if (objectSpace === witness_prefix) {\n      // witness object\n      if (!this._isSubbedTo('witnesses', object.id)) {\n        return;\n      }\n    } else if (objectSpace === committee_prefix) {\n      // committee_member object\n      if (!this._isSubbedTo('committee', object.id)) {\n        return;\n      }\n    }\n\n    // DYNAMIC GLOBAL OBJECT\n    if (object.id === '2.1.0') {\n      object.participation = 100 * (BigInteger(object.recent_slots_filled).bitCount() / 128.0);\n      this.head_block_time_string = object.time;\n      this.chain_time_offset.push(Date.now() - ChainStore.timeStringToDate(object.time).getTime());\n\n      if (this.chain_time_offset.length > 10) {\n        this.chain_time_offset.shift(); // remove first\n      }\n\n      this.fetchRecentOperations(object.head_block_number);\n    }\n\n    let current = this.objects_by_id.get(object.id, undefined);\n\n    if (current === undefined || current === true) {\n      current = Immutable.Map();\n    }\n\n    let prior = current;\n\n    if (current === undefined || current === true) {\n      this.objects_by_id = this.objects_by_id.set(object.id, (current = Immutable.fromJS(object)));\n    } else {\n      this.objects_by_id = this.objects_by_id.set(\n        object.id,\n        (current = current.mergeDeep(Immutable.fromJS(object)))\n      );\n    }\n\n    // BALANCE OBJECT\n    if (objectSpace === balance_prefix) {\n      let owner = this.objects_by_id.get(object.owner);\n\n      if (owner === undefined || owner === null) {\n        return;\n        /*  This prevents the full account from being looked up later\n            owner = {id:object.owner, balances:{ } }\n            owner.balances[object.asset_type] = object.id\n            owner = Immutable.fromJS( owner )\n            */\n      }\n\n      let balances = owner.get('balances');\n\n      if (!balances) {\n        owner = owner.set('balances', Immutable.Map());\n      }\n\n      owner = owner.setIn(['balances', object.asset_type], object.id);\n\n      this.objects_by_id = this.objects_by_id.set(object.owner, owner);\n    } else if (objectSpace === account_stats_prefix) {\n      // ACCOUNT STATS OBJECT\n      // console.log( \"HISTORY CHANGED\" )\n      let prior_most_recent_op = prior ? prior.get('most_recent_op') : '2.9.0';\n\n      if (prior_most_recent_op !== object.most_recent_op) {\n        this.fetchRecentHistory(object.owner);\n      }\n    } else if (objectSpace === witness_prefix) {\n      // WITNESS OBJECT\n      if (this._isSubbedTo('witnesses', object.id)) {\n        this.witness_by_account_id.set(object.witness_account, object.id);\n        this.objects_by_vote_id.set(object.vote_id, object.id);\n      } else {\n        return;\n      }\n    } else if (objectSpace === committee_prefix) {\n      // COMMITTEE MEMBER OBJECT\n      if (this._isSubbedTo('committee', object.id)) {\n        this.committee_by_account_id.set(object.committee_member_account, object.id);\n        this.objects_by_vote_id.set(object.vote_id, object.id);\n      } else {\n        return;\n      }\n    } else if (objectSpace === account_prefix) {\n      // ACCOUNT OBJECT\n      current = current.set('active', Immutable.fromJS(object.active));\n      current = current.set('owner', Immutable.fromJS(object.owner));\n      current = current.set('options', Immutable.fromJS(object.options));\n      current = current.set(\n        'pending_dividend_payments',\n        Immutable.fromJS(object.pending_dividend_payments)\n      );\n      current = current.set(\n        'whitelisting_accounts',\n        Immutable.fromJS(object.whitelisting_accounts)\n      );\n      current = current.set(\n        'blacklisting_accounts',\n        Immutable.fromJS(object.blacklisting_accounts)\n      );\n      current = current.set('whitelisted_accounts', Immutable.fromJS(object.whitelisted_accounts));\n      current = current.set('blacklisted_accounts', Immutable.fromJS(object.blacklisted_accounts));\n      this.objects_by_id = this.objects_by_id.set(object.id, current);\n      this.accounts_by_name = this.accounts_by_name.set(object.name, object.id);\n    } else if (objectSpace === asset_prefix) {\n      // ASSET OBJECT\n      this.assets_by_symbol = this.assets_by_symbol.set(object.symbol, object.id);\n      let dynamic = current.get('dynamic');\n\n      if (!dynamic) {\n        let dad = this.getObject(object.dynamic_asset_data_id, true);\n\n        if (!dad) {\n          dad = Immutable.Map();\n        }\n\n        if (!dad.get('asset_id')) {\n          dad = dad.set('asset_id', object.id);\n        }\n\n        this.objects_by_id = this.objects_by_id.set(object.dynamic_asset_data_id, dad);\n\n        current = current.set('dynamic', dad);\n        this.objects_by_id = this.objects_by_id.set(object.id, current);\n      }\n\n      let bitasset = current.get('bitasset');\n\n      if (!bitasset && object.bitasset_data_id) {\n        let bad = this.getObject(object.bitasset_data_id, true);\n\n        if (!bad) {\n          bad = Immutable.Map();\n        }\n\n        if (!bad.get('asset_id')) {\n          bad = bad.set('asset_id', object.id);\n        }\n\n        this.objects_by_id = this.objects_by_id.set(object.bitasset_data_id, bad);\n\n        current = current.set('bitasset', bad);\n        this.objects_by_id = this.objects_by_id.set(object.id, current);\n      }\n    } else if (objectSpace === asset_dynamic_data_prefix) {\n      // ASSET DYNAMIC DATA OBJECT\n      let asset_id = current.get('asset_id');\n\n      if (asset_id) {\n        let asset_obj = this.getObject(asset_id);\n\n        if (asset_obj && asset_obj.set) {\n          asset_obj = asset_obj.set('dynamic', current);\n          this.objects_by_id = this.objects_by_id.set(asset_id, asset_obj);\n        }\n      }\n    } else if (objectSpace === worker_prefix) {\n      // WORKER OBJECT\n      this.objects_by_vote_id.set(object.vote_for, object.id);\n      this.objects_by_vote_id.set(object.vote_against, object.id);\n    } else if (objectSpace === bitasset_data_prefix) {\n      // BITASSET DATA OBJECT\n      let asset_id = current.get('asset_id');\n\n      if (asset_id) {\n        let asset = this.getObject(asset_id);\n\n        if (asset) {\n          asset = asset.set('bitasset', current);\n          emitter.emit('bitasset-update', asset);\n          this.objects_by_id = this.objects_by_id.set(asset_id, asset);\n        }\n      }\n    } else if (objectSpace === call_order_prefix) {\n      // CALL ORDER OBJECT\n      // Update nested call_orders inside account object\n      if (emit) {\n        emitter.emit('call-order-update', object);\n      }\n\n      let account = this.objects_by_id.get(object.borrower);\n\n      if (account && account.has('call_orders')) {\n        let call_orders = account.get('call_orders');\n\n        if (!call_orders.has(object.id)) {\n          account = account.set('call_orders', call_orders.add(object.id));\n          this.objects_by_id = this.objects_by_id.set(account.get('id'), account);\n          // Force subscription to the object in the witness node by calling get_objects\n          Apis.instance()\n            .db_api()\n            .exec('get_objects', [[object.id]]);\n        }\n      }\n    } else if (objectSpace === order_prefix) {\n      // LIMIT ORDER OBJECT\n      let account = this.objects_by_id.get(object.seller);\n\n      if (account && account.has('orders')) {\n        let limit_orders = account.get('orders');\n\n        if (!limit_orders.has(object.id)) {\n          account = account.set('orders', limit_orders.add(object.id));\n          this.objects_by_id = this.objects_by_id.set(account.get('id'), account);\n          // Force subscription to the object in the witness node by calling get_objects\n          Apis.instance()\n            .db_api()\n            .exec('get_objects', [[object.id]]);\n        }\n      }\n    } else if (objectSpace === proposal_prefix) {\n      // PROPOSAL OBJECT\n      this.addProposalData(object.required_active_approvals, object.id);\n      this.addProposalData(object.required_owner_approvals, object.id);\n    } else if (objectSpace === tournament_prefix) {\n      // TOURNAMENT OBJECT\n      let priorState = prior.get('state');\n      let newState = current.get('state');\n\n      if (priorState !== newState) {\n        this.tournament_ids_by_state = this.tournament_ids_by_state\n          .map((stateMap, accountId) => stateMap.map((tournamentIdSet, stateString) => {\n            if (stateString === priorState) {\n              return tournamentIdSet.remove(object.id);\n            }\n\n            if (\n              stateString === newState\n                && (accountId === null\n                  || current.getIn(['options', 'whitelist']).isEmpty()\n                  || current.getIn(['options', 'whitelist']).includes(accountId))\n            ) {\n              return tournamentIdSet.add(object.id);\n            }\n\n            return tournamentIdSet;\n          }));\n      }\n\n      if (this.last_tournament_id !== undefined) {\n        this.setLastTournamentId(current.get('id'));\n      }\n    } else if (objectSpace === tournament_details_prefix) {\n      let priorRegisteredPlayers = prior.get('registered_players');\n      let newRegisteredPlayers = current.get('registered_players');\n\n      if (priorRegisteredPlayers !== newRegisteredPlayers) {\n        this.registered_tournament_ids_by_player = this.registered_tournament_ids_by_player.map(\n          (tournamentIdsSet, accountId) => {\n            if (newRegisteredPlayers.includes(accountId)) {\n              return tournamentIdsSet.add(current.get('tournament_id'));\n            }\n\n            return tournamentIdsSet;\n\n            // currently, you can't un-register for a tournament, so we don't have\n            // to deal with removing from a list\n          }\n        );\n      }\n    }\n\n    if (notify_subscribers) {\n      this.notifySubscribers();\n    }\n\n    return current;\n  }\n\n  setLastTournamentId(current_tournament_id) {\n    if (current_tournament_id === null) {\n      if (!this.last_tournament_id) {\n        this.last_tournament_id = current_tournament_id;\n      }\n    } else {\n      let current_short_string = current_tournament_id.substring(tournament_prefix.length);\n      let current_short = parseFloat(current_short_string);\n\n      let last_short = -1;\n\n      if (this.last_tournament_id) {\n        last_short = parseFloat(this.last_tournament_id.substring(tournament_prefix.length));\n      }\n\n      if (current_short > last_short) {\n        this.last_tournament_id = current_tournament_id;\n      }\n    }\n  }\n\n  getTournaments(last_tournament_id, limit = 5, start_tournament_id) {\n    return Apis.instance()\n      .db_api()\n      .exec('get_tournaments', [last_tournament_id, limit, start_tournament_id])\n      .then((tournaments) => {\n        let list = Immutable.List();\n\n        this.setLastTournamentId(null);\n\n        if (tournaments && tournaments.length) {\n          list = list.withMutations((l) => {\n            tournaments.forEach((tournament) => {\n              if (!this.objects_by_id.has(tournament.id)) {\n                this._updateObject(tournament);\n              }\n\n              l.unshift(this.objects_by_id.get(tournament.id));\n            });\n          });\n        }\n\n        return list;\n      });\n  }\n\n  getLastTournamentId() {\n    return new Promise((resolve) => {\n      if (this.last_tournament_id === undefined) {\n        Apis.instance()\n          .db_api()\n          .exec('get_tournaments', [`${tournament_prefix}0`, 1, `${tournament_prefix}0`])\n          .then((tournaments) => {\n            this.setLastTournamentId(null);\n\n            if (tournaments && tournaments.length) {\n              tournaments.forEach((tournament) => {\n                this._updateObject(tournament);\n              });\n            }\n\n            resolve(this.last_tournament_id);\n          });\n      } else {\n        resolve(this.last_tournament_id);\n      }\n    });\n  }\n\n  getObjectsByVoteIds(vote_ids) {\n    let result = [];\n    let missing = [];\n\n    for (let i = 0; i < vote_ids.length; ++i) {\n      let obj = this.objects_by_vote_id.get(vote_ids[i]);\n\n      if (obj) {\n        result.push(this.getObject(obj));\n      } else {\n        missing.push(vote_ids[i]);\n      }\n    }\n\n    if (missing.length) {\n      // we may need to fetch some objects\n      Apis.instance()\n        .db_api()\n        .exec('lookup_vote_ids', [missing])\n        .then(\n          (vote_obj_array) => {\n            for (let i = 0; i < vote_obj_array.length; ++i) {\n              if (vote_obj_array[i]) {\n                this._updateObject(vote_obj_array[i]);\n                let immutableMapConvert = Immutable.fromJS(vote_obj_array[i]);\n                result.push(immutableMapConvert);\n              }\n            }\n          },\n          (error) => console.log('Error looking up vote ids: ', error)\n        );\n    }\n\n    return result;\n  }\n\n  getObjectByVoteID(vote_id) {\n    let obj_id = this.objects_by_vote_id.get(vote_id);\n\n    if (obj_id) {\n      return this.getObject(obj_id);\n    }\n\n    return undefined;\n  }\n\n  getHeadBlockDate() {\n    return ChainStore.timeStringToDate(this.head_block_time_string);\n  }\n\n  getEstimatedChainTimeOffset() {\n    if (this.chain_time_offset.length === 0) {\n      return 0;\n    }\n\n    // Immutable is fast, sorts numbers correctly, and leaves the original unmodified\n    // This will fix itself if the user changes their clock\n    let median_offset = Immutable.List(this.chain_time_offset)\n      .sort()\n      .get(Math.floor((this.chain_time_offset.length - 1) / 2));\n    // console.log(\"median_offset\", median_offset)\n    return median_offset;\n  }\n\n  addProposalData(approvals, objectId) {\n    approvals.forEach((id) => {\n      let impactedAccount = this.objects_by_id.get(id);\n\n      if (impactedAccount) {\n        let proposals = impactedAccount.get('proposals');\n\n        if (!proposals.includes(objectId)) {\n          proposals = proposals.add(objectId);\n          impactedAccount = impactedAccount.set('proposals', proposals);\n          this._updateObject(impactedAccount.toJS());\n        }\n      }\n    });\n  }\n\n  static timeStringToDate(time_string) {\n    if (!time_string) {\n      return new Date('1970-01-01T00:00:00.000Z');\n    }\n\n    // does not end in Z\n    if (!/Z$/.test(time_string)) {\n      // https://github.com/cryptonomex/graphene/issues/368\n      time_string += 'Z';\n    }\n\n    return new Date(time_string);\n  }\n\n  __getBlocksForScan(lastBlock) {\n    let db_api = Apis.instance().db_api();\n    return new Promise((success) => {\n      let scanToBlock = this.last_processed_block;\n\n      if (lastBlock) {\n        return success({lastBlock, scanToBlock});\n      }\n\n      db_api.exec('get_dynamic_global_properties', []).then((globalProperties) => {\n        this.last_processed_block = globalProperties.head_block_number;\n        scanToBlock = globalProperties.head_block_number - 2000;\n        scanToBlock = scanToBlock < 0 ? 1 : scanToBlock;\n        return success({\n          lastBlock: this.last_processed_block,\n          scanToBlock\n        });\n      });\n    });\n  }\n\n  __bindBlock(lastBlock, scanToBlock, isInit) {\n    let db_api = Apis.instance().db_api();\n    return new Promise((success) => {\n      db_api.exec('get_block', [lastBlock]).then((block) => {\n        block.id = lastBlock;\n\n        if (typeof block.timestamp === 'string') {\n          block.timestamp += '+00:00';\n        }\n\n        block.timestamp = new Date(block.timestamp);\n        this.getWitnessAccount(block.witness).then((witness) => {\n          block.witness_account_name = witness.name;\n\n          if (!this.recent_blocks_by_id.get(lastBlock)) {\n            this.recent_blocks_by_id = this.recent_blocks_by_id.set(lastBlock, block);\n\n            if (this.last_processed_block < lastBlock) {\n              this.last_processed_block = lastBlock;\n            }\n\n            if (!isInit) {\n              this.recent_blocks = this.recent_blocks.unshift(block);\n\n              if (this.recent_blocks.size > block_stack_size) {\n                this.recent_blocks = this.recent_blocks.pop();\n              }\n            } else if (this.recent_blocks.size < block_stack_size) {\n              this.recent_blocks = this.recent_blocks.push(block);\n            }\n\n            block.transactions.forEach((tx) => tx.operations.forEach((op) => {\n              op[1].block_id = lastBlock;\n              op[1].created_at = block.timestamp;\n\n              if (!isInit) {\n                this.recent_operations = this.recent_operations.unshift(op);\n              } else {\n                if (this.recent_operations.size < operations_stack_size) {\n                  this.recent_operations = this.recent_operations.push(op);\n                }\n\n                if (\n                  this.recent_operations.size >= operations_stack_size\n                    && this.recent_blocks.size >= block_stack_size\n                ) {\n                  scanToBlock = lastBlock;\n                }\n              }\n\n              if (this.recent_operations.size > operations_stack_size) {\n                this.recent_operations = this.recent_operations.pop();\n              }\n            }));\n          }\n\n          lastBlock--;\n\n          if (lastBlock <= scanToBlock) {\n            return success();\n          }\n\n          this.__bindBlock(lastBlock, scanToBlock, isInit).then(() => success());\n        });\n      });\n    });\n  }\n\n  fetchRecentOperations(lastBlock = null) {\n    if (lastBlock && !this.last_processed_block) {\n      return;\n    }\n\n    let isInit = !lastBlock;\n\n    this.__getBlocksForScan(lastBlock).then(({lastBlock: last, scanToBlock}) => {\n      this.__bindBlock(last, scanToBlock, isInit).then(() => {\n        if (isInit) {\n          this.store_initialized = true;\n        }\n      });\n    });\n  }\n\n  getRecentBlocks() {\n    return this.recent_blocks;\n  }\n\n  getRecentOperations() {\n    if (!this.store_initialized) {\n      return Immutable.List();\n    }\n\n    return this.recent_operations;\n  }\n}\n\nconst chain_store = new ChainStore();\n\nfunction FetchChainObjects(method, object_ids, timeout) {\n  let get_object = method.bind(chain_store);\n\n  return new Promise((resolve, reject) => {\n    let timeout_handle = null;\n\n    function onUpdate(not_subscribed_yet = false) {\n      let res = object_ids.map((id) => get_object(id));\n\n      if (res.findIndex((o) => o === undefined) === -1) {\n        if (timeout_handle) {\n          clearTimeout(timeout_handle);\n        }\n\n        if (!not_subscribed_yet) {\n          chain_store.unsubscribe(onUpdate);\n        }\n\n        resolve(res);\n        return true;\n      }\n\n      return false;\n    }\n\n    let resolved = onUpdate(true);\n\n    if (!resolved) {\n      chain_store.subscribe(onUpdate);\n    }\n\n    if (timeout && !resolved) {\n      timeout_handle = setTimeout(() => {\n        chain_store.unsubscribe(onUpdate);\n        reject(new Error('timeout'));\n      }, timeout);\n    }\n  });\n}\n\nchain_store.FetchChainObjects = FetchChainObjects;\n\nfunction FetchChain(methodName, objectIds, timeout = 1900) {\n  let method = chain_store[methodName];\n\n  if (!method) {\n    throw new Error(`ChainStore does not have method ${methodName}`);\n  }\n\n  let arrayIn = Array.isArray(objectIds);\n\n  if (!arrayIn) {\n    objectIds = [objectIds];\n  }\n\n  return chain_store\n    .FetchChainObjects(method, Immutable.List(objectIds), timeout)\n    .then((res) => (arrayIn ? res : res.get(0)));\n}\n\nchain_store.FetchChain = FetchChain;\n\nexport default chain_store;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "object_type",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~object_type",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "emitter",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~emitter",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "op_history",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~op_history",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "limit_order",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~limit_order",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "call_order",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~call_order",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "proposal",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~proposal",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "witness_object_type",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~witness_object_type",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "worker_object_type",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~worker_object_type",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "variable",
    "name": "committee_member_object_type",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~committee_member_object_type",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "account_object_type",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~account_object_type",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "asset_object_type",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~asset_object_type",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "tournament_object_type",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~tournament_object_type",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "tournament_details_object_type",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~tournament_details_object_type",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "order_prefix",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~order_prefix",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "call_order_prefix",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~call_order_prefix",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "variable",
    "name": "proposal_prefix",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~proposal_prefix",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "name": "operation_history_prefix",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~operation_history_prefix",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "balance_prefix",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~balance_prefix",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "account_stats_prefix",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~account_stats_prefix",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "transaction_prefix",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~transaction_prefix",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "name": "account_transaction_history_prefix",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~account_transaction_history_prefix",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "asset_dynamic_data_prefix",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~asset_dynamic_data_prefix",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "bitasset_data_prefix",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~bitasset_data_prefix",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "block_summary_prefix",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~block_summary_prefix",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "witness_prefix",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~witness_prefix",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "name": "worker_prefix",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~worker_prefix",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "committee_prefix",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~committee_prefix",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "asset_prefix",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~asset_prefix",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "account_prefix",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~account_prefix",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "tournament_prefix",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~tournament_prefix",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "tournament_details_prefix",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~tournament_details_prefix",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "operations_stack_size",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~operations_stack_size",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "block_stack_size",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~block_stack_size",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "DEBUG",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~DEBUG",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "FetchChainObjects",
    "memberof": "lib/chain/src/ChainStore.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~FetchChainObjects",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2260,
    "undocument": true,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      },
      {
        "name": "object_ids",
        "types": [
          "*"
        ]
      },
      {
        "name": "timeout",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "FetchChain",
    "memberof": "lib/chain/src/ChainStore.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~FetchChain",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2302,
    "undocument": true,
    "params": [
      {
        "name": "methodName",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectIds",
        "types": [
          "*"
        ]
      },
      {
        "name": "timeout",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1900,
        "defaultValue": "1900"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 102,
    "kind": "class",
    "name": "ChainStore",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~ChainStore",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 59,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@brief",
        "tagValue": "maintains a local cache of blockchain state\n\n The ChainStore maintains a local cache of blockchain state and exposes\n an API that makes it easy to query objects and receive updates when\n objects are available."
      }
    ],
    "interface": false
  },
  {
    "__docId__": 103,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "subscribers",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#subscribers",
    "access": "public",
    "description": "tracks everyone who wants to receive updates when the cache changes",
    "lineNumber": 62,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "subscribed",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#subscribed",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "subbed_accounts",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#subbed_accounts",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "subbed_witnesses",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#subbed_witnesses",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "subbed_committee",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#subbed_committee",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "member",
    "name": "progress",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#progress",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "chain_time_offset",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#chain_time_offset",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "dispatchFrequency",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#dispatchFrequency",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "clearCache",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#clearCache",
    "access": "public",
    "description": "Clears all cached state.  This should be called any time the network connection is\nreset.",
    "lineNumber": 83,
    "params": [],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "objects_by_id",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#objects_by_id",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "accounts_by_name",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#accounts_by_name",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "assets_by_symbol",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#assets_by_symbol",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "account_ids_by_key",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#account_ids_by_key",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "balance_objects_by_address",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#balance_objects_by_address",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "get_account_refs_of_keys_calls",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#get_account_refs_of_keys_calls",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "event_groups_list_by_sport_id",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#event_groups_list_by_sport_id",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "betting_market_groups_list_by_sport_id",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#betting_market_groups_list_by_sport_id",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "betting_markets_list_by_sport_id",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#betting_markets_list_by_sport_id",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "account_history_requests",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#account_history_requests",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "witness_by_account_id",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#witness_by_account_id",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "witnesses",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#witnesses",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "account_by_witness_id",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#account_by_witness_id",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "committee_by_account_id",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#committee_by_account_id",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "objects_by_vote_id",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#objects_by_vote_id",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "fetching_get_full_accounts",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#fetching_get_full_accounts",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "recent_operations",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#recent_operations",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "recent_blocks",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#recent_blocks",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "recent_blocks_by_id",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#recent_blocks_by_id",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "last_processed_block",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#last_processed_block",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "simple_objects_by_id",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#simple_objects_by_id",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "tournament_ids_by_state",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#tournament_ids_by_state",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "registered_tournament_ids_by_player",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#registered_tournament_ids_by_player",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "last_tournament_id",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#last_tournament_id",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "store_initialized",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#store_initialized",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "resetCache",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#resetCache",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "subError",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#subError",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "head_block_time_string",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#head_block_time_string",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "setDispatchFrequency",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#setDispatchFrequency",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [
      {
        "name": "freq",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "init",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#init",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "_subTo",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#_subTo",
    "access": "private",
    "description": null,
    "lineNumber": 229,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "unSubFrom",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#unSubFrom",
    "access": "public",
    "description": null,
    "lineNumber": 237,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "_isSubbedTo",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#_isSubbedTo",
    "access": "private",
    "description": null,
    "lineNumber": 243,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "onUpdate",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#onUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 249,
    "undocument": true,
    "params": [
      {
        "name": "updated_objects",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "notifySubscribers",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#notifySubscribers",
    "access": "public",
    "description": null,
    "lineNumber": 333,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "dispatched",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#dispatched",
    "access": "public",
    "description": null,
    "lineNumber": 336,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "timeout",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#timeout",
    "access": "public",
    "description": null,
    "lineNumber": 337,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "subscribe",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#subscribe",
    "access": "public",
    "description": " Add a callback that will be called anytime any object in the cache is updated",
    "lineNumber": 347,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "unsubscribe",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#unsubscribe",
    "access": "public",
    "description": " Remove a callback that was previously added via subscribe",
    "lineNumber": 358,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "clearObjectCache",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#clearObjectCache",
    "access": "public",
    "description": "Clear an object from the cache to force it to be fetched again. This may\nbe useful if a query failed the first time and the wallet has reason to believe\nit may succeede the second time.",
    "lineNumber": 370,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "getObject",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getObject",
    "access": "public",
    "description": "There are three states an object id could be in:\n\n1. undefined       - returned if a query is pending\n3. defined         - return an object\n4. null            - query return null",
    "lineNumber": 382,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "force",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "getSimpleObjectById",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getSimpleObjectById",
    "access": "public",
    "description": null,
    "lineNumber": 400,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "getAsset",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getAsset",
    "access": "public",
    "description": "",
    "lineNumber": 433,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "object if the id_or_symbol exists"
    },
    "params": [
      {
        "name": "id_or_symbol",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "getAccountRefsOfKey",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getAccountRefsOfKey",
    "access": "public",
    "description": "",
    "lineNumber": 500,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "public key to find accounts that reference it"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "undefined if the result is unknown\n\n If this method returns undefined, then it will send a request to\n the server for the current set of accounts after which the\n server will notify us of any accounts that reference these keys"
    }
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "getBalanceObjects",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getBalanceObjects",
    "access": "public",
    "description": "",
    "lineNumber": 537,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "a empty Set if no items are found\n\nIf this method returns undefined, then it will send a request to the server for\nthe current state after which it will be subscribed to changes to this set."
    },
    "params": [
      {
        "name": "address",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "getTournamentIdsInState",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getTournamentIdsInState",
    "access": "public",
    "description": "",
    "lineNumber": 585,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "an empty list if a query is pending and the set is not known at this time\n        or if there are no upcoming touraments\n\nIf we have not yet requested tournaments for this account, it will\nsend a request to the server for the current list, after which it\nwill be subscribed to changes to this set."
    },
    "params": [
      {
        "name": "accountId",
        "types": [
          "*"
        ]
      },
      {
        "name": "stateString",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "getRegisteredTournamentIds",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getRegisteredTournamentIds",
    "access": "public",
    "description": null,
    "lineNumber": 646,
    "undocument": true,
    "params": [
      {
        "name": "accountId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "fetchObject",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#fetchObject",
    "access": "public",
    "description": " If there is not already a pending request to fetch this object, a new\n request will be made.",
    "lineNumber": 686,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "the object if it does exist and is in our cache"
    },
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "force",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ]
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "getAccount",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getAccount",
    "access": "public",
    "description": "",
    "lineNumber": 769,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "the account object if it does exist"
    },
    "params": [
      {
        "name": "name_or_id",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "getWitnessById",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getWitnessById",
    "access": "public",
    "description": "This method will attempt to lookup witness by account_id.\nIf witness doesn't exist it will return null,\nif witness is found it will return witness object,\nif it's not fetched yet it will return undefined.",
    "lineNumber": 824,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "account_id",
        "description": "account id"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "getWitnessAccount",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getWitnessAccount",
    "access": "public",
    "description": "This method will attempt to lookup witness by account_id.\nIf witness doesn't exist it will return null,\nif witness is found it will return witness object,\nif it's not fetched yet it will return undefined.",
    "lineNumber": 846,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "witness_id",
        "description": "witness id"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "getCommitteeMemberById",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getCommitteeMemberById",
    "access": "public",
    "description": "This method will attempt to lookup committee member by account_id.\nIf committee member doesn't exist it will return null,\nif committee member is found it will return committee member object,\nif it's not fetched yet it will return undefined.",
    "lineNumber": 870,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "account_id",
        "description": "account id"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "getWitness",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getWitness",
    "access": "public",
    "description": "Obsolete! Please use getWitnessById\nThis method will attempt to lookup the account, and then query to see whether or not there is\na witness for this account. If the answer is known, it will return the witness_object,\notherwise it will attempt to look it up and return null. Once the lookup has completed\non_update will be called.",
    "lineNumber": 894,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id_or_account",
        "description": "may either be an account_id, a witness_id, or an account_name"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "getCommitteeMember",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getCommitteeMember",
    "access": "public",
    "description": null,
    "lineNumber": 914,
    "undocument": true,
    "params": [
      {
        "name": "id_or_account",
        "types": [
          "*"
        ]
      },
      {
        "name": "on_update",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "fetchWitnessAccounts",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#fetchWitnessAccounts",
    "access": "public",
    "description": "",
    "lineNumber": 977,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "promise with a list of all witness ids, active or not."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "promise with a list of all witness ids, active or not."
    },
    "params": []
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "fetchWitnessByAccount",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#fetchWitnessByAccount",
    "access": "public",
    "description": "",
    "lineNumber": 1010,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "a promise with the witness object"
    },
    "params": [
      {
        "name": "account_id",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "fetchCommitteeMemberByAccount",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#fetchCommitteeMemberByAccount",
    "access": "public",
    "description": "",
    "lineNumber": 1037,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "a promise with the witness object"
    },
    "params": [
      {
        "name": "account_id",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "fetchFullAccount",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#fetchFullAccount",
    "access": "public",
    "description": " Fetches an account and all of its associated data in a single query",
    "lineNumber": 1069,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "an",
        "description": "account name or account id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "null if the object has been queried and was not found"
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "getAccountMemberStatus",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~ChainStore.getAccountMemberStatus",
    "access": "public",
    "description": null,
    "lineNumber": 1228,
    "undocument": true,
    "params": [
      {
        "name": "account",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "getAccountBalance",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getAccountBalance",
    "access": "public",
    "description": null,
    "lineNumber": 1251,
    "undocument": true,
    "params": [
      {
        "name": "account",
        "types": [
          "*"
        ]
      },
      {
        "name": "asset_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "fetchRecentHistory",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#fetchRecentHistory",
    "access": "public",
    "description": "There are two ways to extend the account history, add new more\nrecent history, and extend historic hstory. This method will fetch\nthe most recent account history and prepend it to the list of\nhistoric operations.",
    "lineNumber": 1280,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "account",
        "description": "immutable account object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "a promise with the account history"
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "getSportsList",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~ChainStore.getSportsList",
    "access": "public",
    "description": "",
    "lineNumber": 1360,
    "unknown": [
      {
        "tagName": "@brief",
        "tagValue": "Get a list of all sports"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "getEventGroupsList",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getEventGroupsList",
    "access": "public",
    "description": "",
    "lineNumber": 1379,
    "unknown": [
      {
        "tagName": "@brief",
        "tagValue": "Return a list of all event groups for a sport (e.g. all soccer leagues in soccer)"
      }
    ],
    "params": [
      {
        "name": "sportId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "getBettingMarketGroupsList",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getBettingMarketGroupsList",
    "access": "public",
    "description": "",
    "lineNumber": 1418,
    "unknown": [
      {
        "tagName": "@brief",
        "tagValue": "Return a list of all betting market groups for an event"
      }
    ],
    "params": [
      {
        "name": "eventId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "getBettingMarketsList",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getBettingMarketsList",
    "access": "public",
    "description": "",
    "lineNumber": 1459,
    "unknown": [
      {
        "tagName": "@brief",
        "tagValue": "Return a list of all betting markets for a betting market group"
      }
    ],
    "params": [
      {
        "name": "bettingMarketGroupId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "getGlobalBettingStatistics",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~ChainStore.getGlobalBettingStatistics",
    "access": "public",
    "description": "",
    "lineNumber": 1500,
    "unknown": [
      {
        "tagName": "@brief",
        "tagValue": "Get global betting statistics"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "getBinnedOrderBook",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~ChainStore.getBinnedOrderBook",
    "access": "public",
    "description": null,
    "lineNumber": 1515,
    "undocument": true,
    "params": [
      {
        "name": "betting_market_id",
        "types": [
          "*"
        ]
      },
      {
        "name": "precision",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "getTotalMatchedBetAmountForBettingMarketGroup",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~ChainStore.getTotalMatchedBetAmountForBettingMarketGroup",
    "access": "public",
    "description": null,
    "lineNumber": 1530,
    "undocument": true,
    "params": [
      {
        "name": "group_id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "getEventsContainingSubString",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~ChainStore.getEventsContainingSubString",
    "access": "public",
    "description": null,
    "lineNumber": 1545,
    "undocument": true,
    "params": [
      {
        "name": "sub_string",
        "types": [
          "*"
        ]
      },
      {
        "name": "language",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "getUnmatchedBetsForBettor",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~ChainStore.getUnmatchedBetsForBettor",
    "access": "public",
    "description": null,
    "lineNumber": 1560,
    "undocument": true,
    "params": [
      {
        "name": "betting_market_id_type",
        "types": [
          "*"
        ]
      },
      {
        "name": "account_id_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "listEventsInGroup",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~ChainStore.listEventsInGroup",
    "access": "public",
    "description": null,
    "lineNumber": 1575,
    "undocument": true,
    "params": [
      {
        "name": "event_group_id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "getAllUnmatchedBetsForBettor",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~ChainStore.getAllUnmatchedBetsForBettor",
    "access": "public",
    "description": null,
    "lineNumber": 1590,
    "undocument": true,
    "params": [
      {
        "name": "account_id_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "getMatchedBetsForBettor",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~ChainStore.getMatchedBetsForBettor",
    "access": "public",
    "description": null,
    "lineNumber": 1605,
    "undocument": true,
    "params": [
      {
        "name": "bettor_id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "getAllMatchedBetsForBettor",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~ChainStore.getAllMatchedBetsForBettor",
    "access": "public",
    "description": null,
    "lineNumber": 1620,
    "undocument": true,
    "params": [
      {
        "name": "bettor_id",
        "types": [
          "*"
        ]
      },
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "limit",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1000,
        "defaultValue": "1000"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "_updateObject",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#_updateObject",
    "access": "private",
    "description": " Updates the object in place by only merging the set\n properties of object.\n\n This method will create an immutable object with the given ID if\n it does not already exist.\n\n This is a \"private\" method called when data is received from the\n server and should not be used by others.",
    "lineNumber": 1648,
    "unknown": [
      {
        "tagName": "@pre",
        "tagValue": "object.id must be a valid object ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "an Immutable constructed from object and deep merged with the current state"
    },
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "notify_subscribers",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      },
      {
        "name": "emit",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ]
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "setLastTournamentId",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#setLastTournamentId",
    "access": "public",
    "description": null,
    "lineNumber": 1977,
    "undocument": true,
    "params": [
      {
        "name": "current_tournament_id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "getTournaments",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getTournaments",
    "access": "public",
    "description": null,
    "lineNumber": 1998,
    "undocument": true,
    "params": [
      {
        "name": "last_tournament_id",
        "types": [
          "*"
        ]
      },
      {
        "name": "limit",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 5,
        "defaultValue": "5"
      },
      {
        "name": "start_tournament_id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "getLastTournamentId",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getLastTournamentId",
    "access": "public",
    "description": null,
    "lineNumber": 2023,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "getObjectsByVoteIds",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getObjectsByVoteIds",
    "access": "public",
    "description": null,
    "lineNumber": 2046,
    "undocument": true,
    "params": [
      {
        "name": "vote_ids",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "getObjectByVoteID",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getObjectByVoteID",
    "access": "public",
    "description": null,
    "lineNumber": 2082,
    "undocument": true,
    "params": [
      {
        "name": "vote_id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "getHeadBlockDate",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getHeadBlockDate",
    "access": "public",
    "description": null,
    "lineNumber": 2092,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "getEstimatedChainTimeOffset",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getEstimatedChainTimeOffset",
    "access": "public",
    "description": null,
    "lineNumber": 2096,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "addProposalData",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#addProposalData",
    "access": "public",
    "description": null,
    "lineNumber": 2110,
    "undocument": true,
    "params": [
      {
        "name": "approvals",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "timeStringToDate",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~ChainStore.timeStringToDate",
    "access": "public",
    "description": null,
    "lineNumber": 2126,
    "undocument": true,
    "params": [
      {
        "name": "time_string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "__getBlocksForScan",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#__getBlocksForScan",
    "access": "private",
    "description": null,
    "lineNumber": 2140,
    "undocument": true,
    "params": [
      {
        "name": "lastBlock",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "__bindBlock",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#__bindBlock",
    "access": "private",
    "description": null,
    "lineNumber": 2161,
    "undocument": true,
    "params": [
      {
        "name": "lastBlock",
        "types": [
          "*"
        ]
      },
      {
        "name": "scanToBlock",
        "types": [
          "*"
        ]
      },
      {
        "name": "isInit",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "fetchRecentOperations",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#fetchRecentOperations",
    "access": "public",
    "description": null,
    "lineNumber": 2229,
    "undocument": true,
    "params": [
      {
        "name": "lastBlock",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": null
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "getRecentBlocks",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getRecentBlocks",
    "access": "public",
    "description": null,
    "lineNumber": 2245,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "getRecentOperations",
    "memberof": "lib/chain/src/ChainStore.js~ChainStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ChainStore.js~ChainStore#getRecentOperations",
    "access": "public",
    "description": null,
    "lineNumber": 2249,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "variable",
    "name": "chain_store",
    "memberof": "lib/chain/src/ChainStore.js",
    "static": true,
    "longname": "lib/chain/src/ChainStore.js~chain_store",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainStore.js",
    "importStyle": "chain_store",
    "description": null,
    "lineNumber": 2322,
    "undocument": true,
    "type": {
      "types": [
        "lib/chain/src/ChainStore.js~ChainStore"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "file",
    "name": "lib/chain/src/ChainTypes.js",
    "content": "const reserved_spaces = {\n  relative_protocol_ids: 0,\n  protocol_ids: 1,\n  implementation_ids: 2\n};\n\nconst object_type = {\n  null: 0,\n  base: 1,\n  account: 2,\n  asset: 3,\n  force_settlement: 4,\n  committee_member: 5,\n  witness: 6,\n  limit_order: 7,\n  call_order: 8,\n  custom: 9,\n  proposal: 10,\n  operation_history: 11,\n  withdraw_permission: 12,\n  vesting_balance: 13,\n  worker: 14,\n  balance: 15,\n  tournament: 16,\n  tournament_details: 17,\n  match: 18,\n  game: 19,\n  sport: 20,\n  event_group: 21,\n  event: 22,\n  betting_market_rules: 23,\n  betting_market_group: 24,\n  betting_market: 25,\n  bet: 26\n};\n\nconst impl_object_type = {\n  global_property: 0,\n  dynamic_global_property: 1,\n  reserved0: 2,\n  asset_dynamic_data: 3,\n  asset_bitasset_data: 4,\n  account_balance: 5,\n  account_statistics: 6,\n  transaction: 7,\n  block_summary: 8,\n  account_transaction_history: 9,\n  blinded_balance: 10,\n  chain_property: 11,\n  witness_schedule: 12,\n  budget_record: 13,\n  special_authority: 14,\n  buyback: 15,\n  fba_accumulator: 16,\n  betting_market_position: 17,\n  global_betting_statistics: 18,\n  asset_dividend_data: 19,\n  pending_dividend_payout_balance_for_holder: 20,\n  distributed_dividend_balance_data: 21\n};\n\nconst vote_type = {\n  committee: 0,\n  witness: 1,\n  worker: 2\n};\n\nconst operations = {\n  transfer: 0,\n  limit_order_create: 1,\n  limit_order_cancel: 2,\n  call_order_update: 3,\n  fill_order: 4,\n  account_create: 5,\n  account_update: 6,\n  account_whitelist: 7,\n  account_upgrade: 8,\n  account_transfer: 9,\n  asset_create: 10,\n  asset_update: 11,\n  asset_update_bitasset: 12,\n  asset_update_feed_producers: 13,\n  asset_issue: 14,\n  asset_reserve: 15,\n  asset_fund_fee_pool: 16,\n  asset_settle: 17,\n  asset_global_settle: 18,\n  asset_publish_feed: 19,\n  witness_create: 20,\n  witness_update: 21,\n  proposal_create: 22,\n  proposal_update: 23,\n  proposal_delete: 24,\n  withdraw_permission_create: 25,\n  withdraw_permission_update: 26,\n  withdraw_permission_claim: 27,\n  withdraw_permission_delete: 28,\n  committee_member_create: 29,\n  committee_member_update: 30,\n  committee_member_update_global_parameters: 31,\n  vesting_balance_create: 32,\n  vesting_balance_withdraw: 33,\n  worker_create: 34,\n  custom: 35,\n  assert: 36,\n  balance_claim: 37,\n  override_transfer: 38,\n  transfer_to_blind: 39,\n  blind_transfer: 40,\n  transfer_from_blind: 41,\n  asset_settle_cancel: 42,\n  asset_claim_fees: 43,\n  fba_distribute_operation: 44,\n  tournament_create: 45,\n  tournament_join: 46,\n  game_move: 47,\n  asset_update_dividend: 48,\n  asset_dividend_distribution: 49,\n  tournament_payout: 50,\n  tournament_leave: 51,\n  sport_create: 52,\n  sport_update: 53,\n  event_group_create: 54,\n  event_group_update: 55,\n  event_create: 56,\n  event_update: 57,\n  betting_market_rules_create: 58,\n  betting_market_rules_update: 59,\n  betting_market_group_create: 60,\n  betting_market_create: 61,\n  bet_place: 62,\n  betting_market_group_resolve: 63,\n  betting_market_group_resolved: 64,\n  bet_adjusted: 65,\n  betting_market_group_cancel: 66,\n  bet_matched: 67,\n  bet_cancel: 68,\n  bet_canceled: 69,\n  betting_market_group_update: 70,\n  betting_market_update: 71,\n  event_update_status: 72\n};\n\nconst ChainTypes = {\n  reserved_spaces,\n  object_type,\n  impl_object_type,\n  vote_type,\n  operations\n};\n\nexport default ChainTypes;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/chain/src/ChainTypes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 287,
    "kind": "variable",
    "name": "reserved_spaces",
    "memberof": "lib/chain/src/ChainTypes.js",
    "static": true,
    "longname": "lib/chain/src/ChainTypes.js~reserved_spaces",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainTypes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "{\"relative_protocol_ids\": *, \"protocol_ids\": number, \"implementation_ids\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 288,
    "kind": "variable",
    "name": "object_type",
    "memberof": "lib/chain/src/ChainTypes.js",
    "static": true,
    "longname": "lib/chain/src/ChainTypes.js~object_type",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainTypes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{\"null\": *, \"base\": number, \"account\": number, \"asset\": number, \"force_settlement\": number, \"committee_member\": number, \"witness\": number, \"limit_order\": number, \"call_order\": number, \"custom\": number, \"proposal\": number, \"operation_history\": number, \"withdraw_permission\": number, \"vesting_balance\": number, \"worker\": number, \"balance\": number, \"tournament\": number, \"tournament_details\": number, \"match\": number, \"game\": number, \"sport\": number, \"event_group\": number, \"event\": number, \"betting_market_rules\": number, \"betting_market_group\": number, \"betting_market\": number, \"bet\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 289,
    "kind": "variable",
    "name": "impl_object_type",
    "memberof": "lib/chain/src/ChainTypes.js",
    "static": true,
    "longname": "lib/chain/src/ChainTypes.js~impl_object_type",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainTypes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "{\"global_property\": *, \"dynamic_global_property\": number, \"reserved0\": number, \"asset_dynamic_data\": number, \"asset_bitasset_data\": number, \"account_balance\": number, \"account_statistics\": number, \"transaction\": number, \"block_summary\": number, \"account_transaction_history\": number, \"blinded_balance\": number, \"chain_property\": number, \"witness_schedule\": number, \"budget_record\": number, \"special_authority\": number, \"buyback\": number, \"fba_accumulator\": number, \"betting_market_position\": number, \"global_betting_statistics\": number, \"asset_dividend_data\": number, \"pending_dividend_payout_balance_for_holder\": number, \"distributed_dividend_balance_data\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 290,
    "kind": "variable",
    "name": "vote_type",
    "memberof": "lib/chain/src/ChainTypes.js",
    "static": true,
    "longname": "lib/chain/src/ChainTypes.js~vote_type",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainTypes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "{\"committee\": *, \"witness\": number, \"worker\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 291,
    "kind": "variable",
    "name": "operations",
    "memberof": "lib/chain/src/ChainTypes.js",
    "static": true,
    "longname": "lib/chain/src/ChainTypes.js~operations",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainTypes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "{\"transfer\": *, \"limit_order_create\": number, \"limit_order_cancel\": number, \"call_order_update\": number, \"fill_order\": number, \"account_create\": number, \"account_update\": number, \"account_whitelist\": number, \"account_upgrade\": number, \"account_transfer\": number, \"asset_create\": number, \"asset_update\": number, \"asset_update_bitasset\": number, \"asset_update_feed_producers\": number, \"asset_issue\": number, \"asset_reserve\": number, \"asset_fund_fee_pool\": number, \"asset_settle\": number, \"asset_global_settle\": number, \"asset_publish_feed\": number, \"witness_create\": number, \"witness_update\": number, \"proposal_create\": number, \"proposal_update\": number, \"proposal_delete\": number, \"withdraw_permission_create\": number, \"withdraw_permission_update\": number, \"withdraw_permission_claim\": number, \"withdraw_permission_delete\": number, \"committee_member_create\": number, \"committee_member_update\": number, \"committee_member_update_global_parameters\": number, \"vesting_balance_create\": number, \"vesting_balance_withdraw\": number, \"worker_create\": number, \"custom\": number, \"assert\": number, \"balance_claim\": number, \"override_transfer\": number, \"transfer_to_blind\": number, \"blind_transfer\": number, \"transfer_from_blind\": number, \"asset_settle_cancel\": number, \"asset_claim_fees\": number, \"fba_distribute_operation\": number, \"tournament_create\": number, \"tournament_join\": number, \"game_move\": number, \"asset_update_dividend\": number, \"asset_dividend_distribution\": number, \"tournament_payout\": number, \"tournament_leave\": number, \"sport_create\": number, \"sport_update\": number, \"event_group_create\": number, \"event_group_update\": number, \"event_create\": number, \"event_update\": number, \"betting_market_rules_create\": number, \"betting_market_rules_update\": number, \"betting_market_group_create\": number, \"betting_market_create\": number, \"bet_place\": number, \"betting_market_group_resolve\": number, \"betting_market_group_resolved\": number, \"bet_adjusted\": number, \"betting_market_group_cancel\": number, \"bet_matched\": number, \"bet_cancel\": number, \"bet_canceled\": number, \"betting_market_group_update\": number, \"betting_market_update\": number, \"event_update_status\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 292,
    "kind": "variable",
    "name": "ChainTypes",
    "memberof": "lib/chain/src/ChainTypes.js",
    "static": true,
    "longname": "lib/chain/src/ChainTypes.js~ChainTypes",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainTypes.js",
    "importStyle": "ChainTypes",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "type": {
      "types": [
        "{\"reserved_spaces\": *, \"object_type\": *, \"impl_object_type\": *, \"vote_type\": *, \"operations\": *}"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "file",
    "name": "lib/chain/src/ChainValidation.js",
    "content": "/**\n    Account names may contain one or more names separated by a dot.\n    Each name needs to start with a letter and may contain\n    numbers, or well placed dashes.\n    @see is_valid_name graphene/libraries/chain/protocol/account.cpp\n*/\nlet id_regex = /\\b\\d+\\.\\d+\\.(\\d+)\\b/;\n\nconst ChainValidation = {\n  is_account_name(value, allow_too_short = false) {\n    let label;\n    let ref;\n\n    if (ChainValidation.is_empty(value)) {\n      return false;\n    }\n\n    let {length} = value;\n\n    if ((!allow_too_short && length < 3) || length > 63) {\n      return false;\n    }\n\n    ref = value.split('.');\n\n    for (let i = 0, len = ref.length; i < len; i++) {\n      label = ref[i];\n\n      if (!(/^[a-z][a-z0-9-]*$/.test(label) && !/--/.test(label) && /[a-z0-9]$/.test(label))) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  is_object_id(obj_id) {\n    if (typeof obj_id !== 'string') {\n      return false;\n    }\n\n    let match = id_regex.exec(obj_id);\n    return match !== null && obj_id.split('.').length === 3;\n  },\n\n  is_empty(value) {\n    return value == null || value.length === 0;\n  },\n\n  is_account_name_error(value, allow_too_short) {\n    let label;\n    let ref;\n    let suffix;\n\n    if (allow_too_short == null) {\n      allow_too_short = false;\n    }\n\n    suffix = 'Account name should ';\n\n    if (ChainValidation.is_empty(value)) {\n      return `${suffix}not be empty.`;\n    }\n\n    let {length} = value;\n\n    if (!allow_too_short && length < 3) {\n      return `${suffix}be longer.`;\n    }\n\n    if (length > 63) {\n      return `${suffix}be shorter.`;\n    }\n\n    if (/\\./.test(value)) {\n      suffix = 'Each account segment should ';\n    }\n\n    ref = value.split('.');\n\n    for (let i = 0, len = ref.length; i < len; i++) {\n      label = ref[i];\n\n      if (!/^[~a-z]/.test(label)) {\n        return `${suffix}start with a letter.`;\n      }\n\n      if (!/^[~a-z0-9-]*$/.test(label)) {\n        return `${suffix}have only letters, digits, or dashes.`;\n      }\n\n      if (/--/.test(label)) {\n        return `${suffix}have only one dash in a row.`;\n      }\n\n      if (!/[a-z0-9]$/.test(label)) {\n        return `${suffix}end with a letter or digit.`;\n      }\n\n      if (!(label.length >= 3)) {\n        return `${suffix}be longer`;\n      }\n    }\n\n    return null;\n  },\n\n  is_cheap_name(account_name) {\n    return /[0-9-]/.test(account_name) || !/[aeiouy]/.test(account_name);\n  },\n\n  is_empty_user_input(value) {\n    if (ChainValidation.is_empty(value)) {\n      return true;\n    }\n\n    if (`${value}`.trim() === '') {\n      return true;\n    }\n\n    return false;\n  },\n\n  required(value, field_name = '') {\n    if (ChainValidation.is_empty(value)) {\n      throw new Error(`value required for ${field_name}: ${value}`);\n    }\n\n    return value;\n  },\n\n  /** @see is_valid_symbol graphene/libraries/chain/protocol/asset_ops.cpp */\n  is_valid_symbol_error(value) {\n    let suffix = 'Asset name should ';\n\n    if (ChainValidation.is_empty(value)) {\n      return `${suffix}not be empty.`;\n    }\n\n    if (value.split('.').length > 2) {\n      return `${suffix}have only one dot.`;\n    }\n\n    if (value.length < 3) {\n      return `${suffix}be longer.`;\n    }\n\n    if (value.length > 16) {\n      return `${suffix}be shorter.`;\n    }\n\n    if (!/^[A-Z]/.test(value)) {\n      return `${suffix}start with a letter`;\n    }\n\n    if (!/[A-Z]$/.test(value)) {\n      return `${suffix}end with a letter`;\n    }\n\n    if (/^[A-Z0-9\\.]$/.test(value)) {\n      return `${suffix}contain only letters numbers and perhaps a dot.`;\n    }\n\n    return null;\n  }\n};\n\nexport default ChainValidation;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/chain/src/ChainValidation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 294,
    "kind": "variable",
    "name": "id_regex",
    "memberof": "lib/chain/src/ChainValidation.js",
    "static": true,
    "longname": "lib/chain/src/ChainValidation.js~id_regex",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainValidation.js",
    "importStyle": null,
    "description": "Account names may contain one or more names separated by a dot.\nEach name needs to start with a letter and may contain\nnumbers, or well placed dashes.",
    "see": [
      "is_valid_name graphene/libraries/chain/protocol/account.cpp"
    ],
    "lineNumber": 7,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 295,
    "kind": "variable",
    "name": "ChainValidation",
    "memberof": "lib/chain/src/ChainValidation.js",
    "static": true,
    "longname": "lib/chain/src/ChainValidation.js~ChainValidation",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/chain/src/ChainValidation.js",
    "importStyle": "ChainValidation",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{\"is_account_name\": function, \"is_object_id\": function, \"is_empty\": function, \"is_account_name_error\": function, \"is_cheap_name\": function, \"is_empty_user_input\": function, \"required\": function, \"is_valid_symbol_error\": function}"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "file",
    "name": "lib/chain/src/EmitterInstance.js",
    "content": "import ee from 'event-emitter';\n\nlet _emitter;\n\nexport default {\n  emitter() {\n    if (!_emitter) {\n      _emitter = ee({});\n    }\n\n    return _emitter;\n  }\n};\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/chain/src/EmitterInstance.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 297,
    "kind": "file",
    "name": "lib/chain/src/GameMoves.js",
    "content": "import {hash} from '../../ecc';\nimport {Serializer, types} from '../../serializer';\n\nlet ByteBuffer = require('bytebuffer');\nlet secureRandom = require('secure-random');\n\nlet {\n  uint64,\n  enumeration,\n  sha256\n} = types;\n\nlet rock_paper_scissors_gesture = enumeration(['rock', 'paper', 'scissors', 'spock', 'lizard']);\n\nlet rock_paper_scissors_throw = new Serializer('rock_paper_scissors_throw', {\n  nonce1: uint64,\n  nonce2: uint64,\n  gesture: rock_paper_scissors_gesture\n});\n\nlet rock_paper_scissors_throw_commit = new Serializer('rock_paper_scissors_throw_commit', {\n  nonce1: uint64,\n  throw_hash: sha256\n});\n\nlet rock_paper_scissors_throw_reveal = new Serializer('rock_paper_scissors_throw_reveal', {\n  nonce2: uint64,\n  gesture: rock_paper_scissors_gesture\n});\n\nclass GameMoves {\n  static createCommitAndRevealMoveOperations(move_type) {\n    let nonce1 = ByteBuffer.wrap(secureRandom.randomArray(8)).readUint64();\n    let nonce2 = ByteBuffer.wrap(secureRandom.randomArray(8)).readUint64();\n\n    let throw_object = rock_paper_scissors_throw.fromObject({\n      nonce1,\n      nonce2,\n      gesture: move_type\n    });\n\n    let throw_buffer = rock_paper_scissors_throw.toBuffer(throw_object);\n    let throw_hash = hash.sha256(throw_buffer);\n\n    let commit_move_operation_object = rock_paper_scissors_throw_commit.fromObject({\n      nonce1,\n      throw_hash\n    });\n    let reveal_move_operation_object = rock_paper_scissors_throw_reveal.fromObject({\n      nonce2,\n      gesture: move_type\n    });\n\n    let commit_move_operation = rock_paper_scissors_throw_commit.toObject(\n      commit_move_operation_object\n    );\n    let reveal_move_operation = rock_paper_scissors_throw_reveal.toObject(\n      reveal_move_operation_object\n    );\n\n    return [commit_move_operation, reveal_move_operation];\n  }\n}\n\nexport default GameMoves;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/chain/src/GameMoves.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 298,
    "kind": "variable",
    "name": "ByteBuffer",
    "memberof": "lib/chain/src/GameMoves.js",
    "static": true,
    "longname": "lib/chain/src/GameMoves.js~ByteBuffer",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/GameMoves.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 299,
    "kind": "variable",
    "name": "secureRandom",
    "memberof": "lib/chain/src/GameMoves.js",
    "static": true,
    "longname": "lib/chain/src/GameMoves.js~secureRandom",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/GameMoves.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 300,
    "kind": "variable",
    "name": "uint64",
    "memberof": "lib/chain/src/GameMoves.js",
    "static": true,
    "longname": "lib/chain/src/GameMoves.js~uint64",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/GameMoves.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 301,
    "kind": "variable",
    "name": "rock_paper_scissors_gesture",
    "memberof": "lib/chain/src/GameMoves.js",
    "static": true,
    "longname": "lib/chain/src/GameMoves.js~rock_paper_scissors_gesture",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/GameMoves.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 302,
    "kind": "variable",
    "name": "rock_paper_scissors_throw",
    "memberof": "lib/chain/src/GameMoves.js",
    "static": true,
    "longname": "lib/chain/src/GameMoves.js~rock_paper_scissors_throw",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/GameMoves.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 303,
    "kind": "variable",
    "name": "rock_paper_scissors_throw_commit",
    "memberof": "lib/chain/src/GameMoves.js",
    "static": true,
    "longname": "lib/chain/src/GameMoves.js~rock_paper_scissors_throw_commit",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/GameMoves.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 304,
    "kind": "variable",
    "name": "rock_paper_scissors_throw_reveal",
    "memberof": "lib/chain/src/GameMoves.js",
    "static": true,
    "longname": "lib/chain/src/GameMoves.js~rock_paper_scissors_throw_reveal",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/GameMoves.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 305,
    "kind": "class",
    "name": "GameMoves",
    "memberof": "lib/chain/src/GameMoves.js",
    "static": true,
    "longname": "lib/chain/src/GameMoves.js~GameMoves",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/chain/src/GameMoves.js",
    "importStyle": "GameMoves",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "createCommitAndRevealMoveOperations",
    "memberof": "lib/chain/src/GameMoves.js~GameMoves",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/GameMoves.js~GameMoves.createCommitAndRevealMoveOperations",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "move_type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "file",
    "name": "lib/chain/src/NumberUtils.js",
    "content": "import assert from 'assert';\n\n/**\n    Convert 12.34 with a precision of 3 into 12340\n\n    @arg {number|string} number - Use strings for large numbers.\n    @arg {number} precision - number of implied decimal places (usually causes right zero padding)\n    @return {string} -\n*/\n\nconst NumberUtils = {\n  toImpliedDecimal: function toImpliedDecimal(number, precision) {\n    if (typeof number === 'number') {\n      assert(number <= 9007199254740991, 'overflow');\n      number = `${number}`;\n    } else if (number.toString) {\n      number = number.toString();\n    }\n\n    assert(\n      typeof number === 'string',\n      `number should be an actual number or string: ${typeof number}`\n    );\n    number = number.trim();\n    assert(/^[0-9]*\\.?[0-9]*$/.test(number), `Invalid decimal number ${number}`);\n\n    let [whole = '', decimal = ''] = number.split('.');\n\n    let padding = precision - decimal.length;\n    assert(\n      padding >= 0,\n      `Too many decimal digits in ${number} to create an implied decimal of ${precision}`\n    );\n\n    for (let i = 0; i < padding; i++) {\n      decimal += '0';\n    }\n\n    while (whole.charAt(0) === '0') {\n      whole = whole.substring(1);\n    }\n\n    return whole + decimal;\n  }\n};\n\nexport default NumberUtils;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/chain/src/NumberUtils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 308,
    "kind": "variable",
    "name": "NumberUtils",
    "memberof": "lib/chain/src/NumberUtils.js",
    "static": true,
    "longname": "lib/chain/src/NumberUtils.js~NumberUtils",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/chain/src/NumberUtils.js",
    "importStyle": "NumberUtils",
    "description": "Convert 12.34 with a precision of 3 into 12340",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{number|string} number - Use strings for large numbers."
      },
      {
        "tagName": "@arg",
        "tagValue": "{number} precision - number of implied decimal places (usually causes right zero padding)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "{\"toImpliedDecimal\": *}"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "file",
    "name": "lib/chain/src/ObjectId.js",
    "content": "import {Long} from 'bytebuffer';\n\nimport v from '../../serializer/src/SerializerValidation';\n\nlet DB_MAX_INSTANCE_ID = Long.fromNumber(Math.pow(2, 48) - 1);\n\nclass ObjectId {\n  constructor(space, type, instance) {\n    this.space = space;\n    this.type = type;\n    this.instance = instance;\n    let instance_string = this.instance.toString();\n    let id = `${this.space}.${this.type}.${instance_string}`;\n\n    if (!v.is_digits(instance_string)) {\n      throw new `Invalid object id ${id}`();\n    }\n  }\n\n  static fromString(value) {\n    if (value.space !== undefined && value.type !== undefined && value.instance !== undefined) {\n      return value;\n    }\n\n    let params = v.require_match(\n      /^([0-9]+)\\.([0-9]+)\\.([0-9]+)$/,\n      v.required(value, 'ObjectId'),\n      'ObjectId'\n    );\n    return new ObjectId(\n      parseInt(params[1], 10),\n      parseInt(params[2], 10),\n      Long.fromString(params[3])\n    );\n  }\n\n  static fromLong(long) {\n    let space = long.shiftRight(56).toInt();\n    let type = long.shiftRight(48).toInt() & 0x00ff; // eslint-disable-line\n    let instance = long.and(DB_MAX_INSTANCE_ID);\n    return new ObjectId(space, type, instance);\n  }\n\n  static fromByteBuffer(b) {\n    return ObjectId.fromLong(b.readUint64());\n  }\n\n  toLong() {\n    return Long.fromNumber(this.space)\n      .shiftLeft(56)\n      .or(\n        Long.fromNumber(this.type)\n          .shiftLeft(48)\n          .or(this.instance)\n      );\n  }\n\n  appendByteBuffer(b) {\n    return b.writeUint64(this.toLong());\n  }\n\n  toString() {\n    return `${this.space}.${this.type}.${this.instance.toString()}`;\n  }\n}\n\nexport default ObjectId;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/chain/src/ObjectId.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 310,
    "kind": "variable",
    "name": "DB_MAX_INSTANCE_ID",
    "memberof": "lib/chain/src/ObjectId.js",
    "static": true,
    "longname": "lib/chain/src/ObjectId.js~DB_MAX_INSTANCE_ID",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/chain/src/ObjectId.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 311,
    "kind": "class",
    "name": "ObjectId",
    "memberof": "lib/chain/src/ObjectId.js",
    "static": true,
    "longname": "lib/chain/src/ObjectId.js~ObjectId",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/chain/src/ObjectId.js",
    "importStyle": "ObjectId",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 312,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/chain/src/ObjectId.js~ObjectId",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ObjectId.js~ObjectId#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 313,
    "kind": "member",
    "name": "space",
    "memberof": "lib/chain/src/ObjectId.js~ObjectId",
    "static": false,
    "longname": "lib/chain/src/ObjectId.js~ObjectId#space",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "member",
    "name": "type",
    "memberof": "lib/chain/src/ObjectId.js~ObjectId",
    "static": false,
    "longname": "lib/chain/src/ObjectId.js~ObjectId#type",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "member",
    "name": "instance",
    "memberof": "lib/chain/src/ObjectId.js~ObjectId",
    "static": false,
    "longname": "lib/chain/src/ObjectId.js~ObjectId#instance",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "fromString",
    "memberof": "lib/chain/src/ObjectId.js~ObjectId",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/ObjectId.js~ObjectId.fromString",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "fromLong",
    "memberof": "lib/chain/src/ObjectId.js~ObjectId",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/ObjectId.js~ObjectId.fromLong",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "long",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "fromByteBuffer",
    "memberof": "lib/chain/src/ObjectId.js~ObjectId",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/ObjectId.js~ObjectId.fromByteBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "toLong",
    "memberof": "lib/chain/src/ObjectId.js~ObjectId",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ObjectId.js~ObjectId#toLong",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "appendByteBuffer",
    "memberof": "lib/chain/src/ObjectId.js~ObjectId",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ObjectId.js~ObjectId#appendByteBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "toString",
    "memberof": "lib/chain/src/ObjectId.js~ObjectId",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/ObjectId.js~ObjectId#toString",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "file",
    "name": "lib/chain/src/TransactionBuilder.js",
    "content": "import assert from 'assert';\nimport {Apis, ChainConfig} from '../../ws';\nimport {Signature, PublicKey, hash} from '../../ecc';\nimport {ops} from '../../serializer';\n\nimport ChainTypes from './ChainTypes';\n\nclass TransactionBuilder {\n  constructor() {\n    this.ref_block_num = 0;\n    this.ref_block_prefix = 0;\n    this.expiration = 0;\n    this.operations = [];\n    this.signatures = [];\n    this.signer_private_keys = [];\n\n    this.head_block_time_string = null;\n    this.committee_min_review = null;\n\n    // semi-private method bindings\n    this._broadcast = this._broadcast.bind(this);\n  }\n\n  /**\n        @arg {string} name - like \"transfer\"\n        @arg {object} operation - JSON matchching the operation's format\n    */\n  add_type_operation(name, operation) {\n    this.add_operation(this.get_type_operation(name, operation));\n  }\n\n  /**\n        This does it all: set fees, finalize, sign, and broadcast (if wanted).\n\n        @arg {ConfidentialWallet} cwallet - must be unlocked, used to gather signing keys\n\n        @arg {array<string>} [signer_pubkeys = null] - Optional [\"GPHAbc9Def0...\", ...].  These are\n        additional signing keys.  Some balance claims require propritary address formats, the\n        witness node can't tell us which ones are needed so they must be passed in.  If the\n        witness node can figure out a signing key (mostly all other transactions), it should\n        not be passed in here.\n\n        @arg {boolean} [broadcast = false]\n    */\n  process_transaction(cwallet, signer_pubkeys = null, broadcast = false) {\n    let {wallet_object} = cwallet.wallet;\n\n    if (Apis.instance().chain_id !== wallet_object.get('chain_id')) {\n      let wallet_chain_id = wallet_object.get('chain_id');\n      let api_chain_id = Apis.instance().chain_id;\n\n      let error = new Error(\n        `Mismatched chain_id; expecting ${wallet_chain_id}, but got ${api_chain_id}`\n      );\n\n      return Promise.reject(error);\n    }\n\n    return this.set_required_fees().then(() => {\n      let signer_pubkeys_added = {};\n\n      if (signer_pubkeys) {\n        // Balance claims are by address, only the private\n        // key holder can know about these additional\n        // potential keys.\n        let pubkeys = cwallet.getPubkeys_having_PrivateKey(signer_pubkeys);\n\n        if (!pubkeys.length) {\n          throw new Error('Missing signing key');\n        }\n\n        let keys = Object.keys(pubkeys);\n\n        for (let i = 0, len = keys.length; i < len; i++) {\n          let pubkey_string = pubkeys[i];\n          let private_key = cwallet.getPrivateKey(pubkey_string);\n          this.add_signer(private_key, pubkey_string);\n          signer_pubkeys_added[pubkey_string] = true;\n        }\n      }\n\n      return this.get_potential_signatures()\n        .then(({pubkeys, addys}) => {\n          let my_pubkeys = cwallet.getPubkeys_having_PrivateKey(pubkeys, addys);\n\n          return this.get_required_signatures(my_pubkeys).then((required_pubkeys) => {\n            let keys = Object.keys(required_pubkeys);\n\n            for (let i = 0, len = keys.length; i < len; i++) {\n              let pubkey_string = keys[i];\n\n              if (!signer_pubkeys_added[pubkey_string]) {\n                let private_key = cwallet.getPrivateKey(pubkey_string);\n\n                // This should not happen, get_required_signatures will only\n                // returned keys from my_pubkeys\n                if (!private_key) {\n                  throw new Error(`Missing signing key for ${pubkey_string}`);\n                }\n\n                this.add_signer(private_key, pubkey_string);\n              }\n            }\n          });\n        })\n        .then(() => (broadcast ? this.broadcast() : this.serialize()));\n    });\n  }\n\n  /** Typically this is called automatically just prior to signing.\n   * Once finalized this transaction can not be changed. */\n  finalize() {\n    return new Promise((resolve) => {\n      if (this.tr_buffer) {\n        throw new Error('already finalized');\n      }\n\n      resolve(\n        Apis.instance()\n          .db_api()\n          .exec('get_objects', [['2.1.0']])\n          .then((r) => {\n            this.head_block_time_string = r[0].time;\n\n            if (this.expiration === 0) {\n              this.expiration = this.base_expiration_sec() + ChainConfig.expire_in_secs;\n            }\n\n            this.ref_block_num = r[0].head_block_number & 0xffff; // eslint-disable-line\n            this.ref_block_prefix = Buffer.from(r[0].head_block_id, 'hex').readUInt32LE(4);\n            // DEBUG console.log(\"ref_block\",@ref_block_num,@ref_block_prefix,r)\n\n            let iterable = this.operations;\n\n            for (let i = 0, len = iterable.length; i < len; i++) {\n              let op = iterable[i];\n\n              if (op[1].finalize) {\n                op[1].finalize();\n              }\n\n              let _type = ops.operation.st_operations[op[0]];\n              let hexBuffer = _type.toBuffer(op[1]).toString('hex');\n              console.log(\n                'Operation %s: %O => %s (%d bytes)',\n                _type.operation_name,\n                op[1],\n                hexBuffer,\n                hexBuffer.length / 2\n              );\n            }\n\n            this.tr_buffer = ops.transaction.toBuffer(this);\n          })\n      );\n    });\n  }\n\n  /** @return {string} hex transaction ID */\n  id() {\n    if (!this.tr_buffer) {\n      throw new Error('not finalized');\n    }\n\n    return hash\n      .sha256(this.tr_buffer)\n      .toString('hex')\n      .substring(0, 40);\n  }\n\n  /**\n        Typically one will use {@link this.add_type_operation} instead.\n        @arg {array} operation - [operation_id, operation]\n    */\n  add_operation(operation) {\n    if (this.tr_buffer) {\n      throw new Error('already finalized');\n    }\n\n    assert(operation, 'operation');\n\n    if (!Array.isArray(operation)) {\n      throw new Error('Expecting array [operation_id, operation]');\n    }\n\n    this.operations.push(operation);\n  }\n\n  get_type_operation(name, operation) {\n    if (this.tr_buffer) {\n      throw new Error('already finalized');\n    }\n\n    assert(name, 'name');\n    assert(operation, 'operation');\n    let _type = ops[name];\n    assert(_type, `Unknown operation ${name}`);\n    let operation_id = ChainTypes.operations[_type.operation_name];\n\n    if (operation_id === undefined) {\n      throw new Error(`unknown operation: ${_type.operation_name}`);\n    }\n\n    if (!operation.fee) {\n      operation.fee = {amount: 0, asset_id: 0};\n    }\n\n    if (name === 'proposal_create') {\n      /*\n            * Proposals involving the committee account require a review\n            * period to be set, look for them here\n            */\n      let requiresReview = false;\n      let extraReview = 0;\n\n      operation.proposed_ops.forEach((op) => {\n        const COMMITTE_ACCOUNT = 0;\n        let key;\n\n        switch (op.op[0]) {\n          case 0: // transfer\n            key = 'from';\n            break;\n\n          case 6: // account_update\n          case 17: // asset_settle\n            key = 'account';\n            break;\n\n          case 10: // asset_create\n          case 11: // asset_update\n          case 12: // asset_update_bitasset\n          case 13: // asset_update_feed_producers\n          case 14: // asset_issue\n          case 18: // asset_global_settle\n          case 43: // asset_claim_fees\n            key = 'issuer';\n            break;\n\n          case 15: // asset_reserve\n            key = 'payer';\n            break;\n\n          case 16: // asset_fund_fee_pool\n            key = 'from_account';\n            break;\n\n          case 22: // proposal_create\n          case 23: // proposal_update\n          case 24: // proposal_delete\n            key = 'fee_paying_account';\n            break;\n\n          case 31: // committee_member_update_global_parameters\n            requiresReview = true;\n            extraReview = 60 * 60 * 24 * 13; // Make the review period 2 weeks total\n            break;\n          default:\n            break;\n        }\n\n        if (key in op.op[1] && op.op[1][key] === COMMITTE_ACCOUNT) {\n          requiresReview = true;\n        }\n      });\n\n      if (!operation.expiration_time) {\n        let experationTime = this.base_expiration_sec();\n        operation.expiration_time = experationTime + ChainConfig.expire_in_secs_proposal;\n      }\n\n      if (requiresReview) {\n        let one_day = 24 * 60 * 60; // One day in seconds\n        let max = Math.max(\n          this.commitee_min_review,\n          one_day,\n          ChainConfig.review_in_secs_committee\n        );\n\n        operation.review_period_seconds = extraReview + max;\n        /*\n                * Expiration time must be at least equal to\n                * now + review_period_seconds, so we add one hour to make sure\n                */\n        operation.expiration_time += 60 * 60 + extraReview;\n      }\n    }\n\n    let operation_instance = _type.fromObject(operation);\n    return [operation_id, operation_instance];\n  }\n\n  /* optional: fetch the current head block */\n\n  update_head_block() {\n    return Apis.instance()\n      .db_api()\n      .exec('get_objects', [['2.0.0', '2.1.0']])\n      .then((res) => {\n        let [g, r] = res;\n        this.head_block_time_string = r[0].time;\n        this.committee_min_review = g[0].parameters.committee_proposal_review_period;\n      });\n  }\n\n  /** optional: there is a deafult expiration */\n  set_expire_seconds(sec) {\n    if (this.tr_buffer) {\n      throw new Error('already finalized');\n    }\n\n    this.expiration = this.base_expiration_sec() + sec;\n\n    return this.expiration;\n  }\n\n  /* Wraps this transaction in a proposal_create transaction */\n  propose(proposal_create_options) {\n    if (this.tr_buffer) {\n      throw new Error('already finalized');\n    }\n\n    if (!this.operations.length) {\n      throw new Error('add operation first');\n    }\n\n    assert(proposal_create_options, 'proposal_create_options');\n    assert(\n      proposal_create_options.fee_paying_account,\n      'proposal_create_options.fee_paying_account'\n    );\n\n    let proposed_ops = this.operations.map((op) => ({op}));\n\n    this.operations = [];\n    this.signatures = [];\n    this.signer_private_keys = [];\n    proposal_create_options.proposed_ops = proposed_ops;\n    this.add_type_operation('proposal_create', proposal_create_options);\n    return this;\n  }\n\n  has_proposed_operation() {\n    let hasProposed = false;\n\n    for (let i = 0; i < this.operations.length; i++) {\n      if ('proposed_ops' in this.operations[i][1]) {\n        hasProposed = true;\n        break;\n      }\n    }\n\n    return hasProposed;\n  }\n\n  /** optional: the fees can be obtained from the witness node */\n  set_required_fees(asset_id) {\n    let fee_pool;\n\n    if (this.tr_buffer) {\n      throw new Error('already finalized');\n    }\n\n    if (!this.operations.length) {\n      throw new Error('add operations first');\n    }\n\n    let operations = [];\n\n    for (let i = 0, len = this.operations.length; i < len; i++) {\n      let op = this.operations[i];\n      operations.push(ops.operation.toObject(op));\n    }\n\n    if (!asset_id) {\n      let op1_fee = operations[0][1].fee;\n\n      if (op1_fee && op1_fee.asset_id !== null) {\n        asset_id = op1_fee.asset_id;\n      } else {\n        asset_id = '1.3.0';\n      }\n    }\n\n    let promises = [\n      Apis.instance()\n        .db_api()\n        .exec('get_required_fees', [operations, asset_id])\n    ];\n\n    if (asset_id !== '1.3.0') {\n      // This handles the fallback to paying fees in BTS if the fee pool is empty.\n      promises.push(\n        Apis.instance()\n          .db_api()\n          .exec('get_required_fees', [operations, '1.3.0'])\n      );\n      promises.push(\n        Apis.instance()\n          .db_api()\n          .exec('get_objects', [[asset_id]])\n      );\n    }\n\n    return Promise.all(promises).then((results) => {\n      let [fees, coreFees, asset] = results;\n      asset = asset ? asset[0] : null;\n\n      let dynamicPromise = asset_id !== '1.3.0' && asset\n        ? Apis.instance()\n          .db_api()\n          .exec('get_objects', [[asset.dynamic_asset_data_id]])\n        : new Promise((resolve) => {\n          resolve();\n        });\n\n      return dynamicPromise.then((dynamicObject) => {\n        if (asset_id !== '1.3.0') {\n          fee_pool = dynamicObject ? dynamicObject[0].fee_pool : 0;\n          let totalFees = 0;\n\n          for (let j = 0, fee; j < coreFees.length; j++) {\n            fee = coreFees[j];\n            totalFees += fee.amount;\n          }\n\n          if (totalFees > parseInt(fee_pool, 10)) {\n            fees = coreFees;\n            asset_id = '1.3.0';\n          }\n        }\n\n        // Proposed transactions need to be flattened\n        let flat_assets = [];\n\n        let flatten = (obj) => {\n          if (Array.isArray(obj)) {\n            for (let k = 0, len = obj.length; k < len; k++) {\n              let item = obj[k];\n              flatten(item);\n            }\n          } else {\n            flat_assets.push(obj);\n          }\n        };\n\n        flatten(fees);\n\n        let asset_index = 0;\n\n        let set_fee = (operation) => {\n          if (\n            !operation.fee\n            || operation.fee.amount === 0\n            || (operation.fee.amount.toString && operation.fee.amount.toString() === '0') // Long\n          ) {\n            operation.fee = flat_assets[asset_index];\n            // console.log(\"new operation.fee\", operation.fee)\n          } else {\n            // console.log(\"old operation.fee\", operation.fee)\n          }\n\n          asset_index++;\n\n          if (operation.proposed_ops) {\n            let result = [];\n\n            for (let y = 0; y < operation.proposed_ops.length; y++) {\n              result.push(set_fee(operation.proposed_ops[y].op[1]));\n            }\n\n            return result;\n          }\n        };\n\n        for (let i = 0; i < this.operations.length; i++) {\n          set_fee(this.operations[i][1]);\n        }\n      });\n      // DEBUG console.log('... get_required_fees',operations,asset_id,flat_assets)\n    });\n  }\n\n  get_potential_signatures() {\n    let tr_object = ops.signed_transaction.toObject(this);\n    return Promise.all([\n      Apis.instance()\n        .db_api()\n        .exec('get_potential_signatures', [tr_object]),\n      Apis.instance()\n        .db_api()\n        .exec('get_potential_address_signatures', [tr_object])\n    ]).then((results) => ({pubkeys: results[0], addys: results[1]}));\n  }\n\n  get_required_signatures(available_keys) {\n    if (!available_keys.length) {\n      return Promise.resolve([]);\n    }\n\n    let tr_object = ops.signed_transaction.toObject(this);\n    // DEBUG console.log('... tr_object',tr_object)\n    return Apis.instance()\n      .db_api()\n      .exec('get_required_signatures', [tr_object, available_keys])\n      .then((required_public_keys) => required_public_keys);\n  }\n\n  add_signer(private_key, public_key = private_key.toPublicKey()) {\n    assert(private_key.d, 'required PrivateKey object');\n\n    if (this.signed) {\n      throw new Error('already signed');\n    }\n\n    if (!public_key.Q) {\n      public_key = PublicKey.fromPublicKeyString(public_key);\n    }\n\n    // prevent duplicates\n    let spHex = private_key.toHex();\n\n    let keys = Object.keys(this.signer_private_keys);\n\n    for (let i = 0, len = keys.length; i < len; i++) {\n      let sp = this.signer_private_keys[keys[i]];\n\n      if (sp[0].toHex() === spHex) {\n        return;\n      }\n    }\n\n    this.signer_private_keys.push([private_key, public_key]);\n  }\n\n  sign(chain_id = Apis.instance().chain_id) {\n    if (!this.tr_buffer) {\n      throw new Error('not finalized');\n    }\n\n    if (this.signed) {\n      throw new Error('already signed');\n    }\n\n    if (!this.signer_private_keys.length) {\n      throw new Error('Transaction was not signed. Do you have a private key? [no_signers]');\n    }\n\n    let end = this.signer_private_keys.length;\n\n    for (let i = 0; end > 0 ? i < end : i > end; end > 0 ? i++ : i++) {\n      let [private_key, public_key] = this.signer_private_keys[i];\n      let sig = Signature.signBuffer(\n        Buffer.concat([Buffer.from(chain_id, 'hex'), this.tr_buffer]),\n        private_key,\n        public_key\n      );\n      this.signatures.push(sig.toBuffer());\n    }\n\n    this.signer_private_keys = [];\n    this.signed = true;\n  }\n\n  serialize() {\n    return ops.signed_transaction.toObject(this);\n  }\n\n  toObject() {\n    return ops.signed_transaction.toObject(this);\n  }\n\n  broadcast(was_broadcast_callback) {\n    if (this.tr_buffer) {\n      return this._broadcast(was_broadcast_callback);\n    }\n\n    return this.finalize().then(() => this._broadcast(was_broadcast_callback));\n  }\n\n  _broadcast(was_broadcast_callback) {\n    return new Promise((resolve, reject) => {\n      if (!this.signed) {\n        this.sign();\n      }\n\n      if (!this.tr_buffer) {\n        throw new Error('not finalized');\n      }\n\n      if (!this.signatures.length) {\n        throw new Error('not signed');\n      }\n\n      if (!this.operations.length) {\n        throw new Error('no operations');\n      }\n\n      let tr_object = ops.signed_transaction.toObject(this);\n      // console.log('... broadcast_transaction_with_callback !!!')\n      Apis.instance()\n        .network_api()\n        .exec('broadcast_transaction_with_callback', [(res) => resolve(res), tr_object])\n        .then(() => {\n          // console.log('... broadcast success, waiting for callback')\n          if (was_broadcast_callback) {\n            was_broadcast_callback();\n          }\n        })\n        .catch((error) => {\n          // console.log may be redundant for network errors, other errors could occur\n          console.log(error);\n          let {message} = error;\n\n          if (!message) {\n            message = '';\n          }\n\n          reject(\n            new Error(\n              `${message}\\n`\n                + 'peerplays-crypto '\n                + ` digest ${hash\n                  .sha256(this.tr_buffer)\n                  .toString('hex')} transaction ${this.tr_buffer.toString('hex')} ${JSON.stringify(\n                  tr_object\n                )}`\n            )\n          );\n        });\n    });\n  }\n\n  static timeStringToDate(time_string) {\n    if (!time_string) {\n      time_string = '1970-01-01T00:00:00.000Z';\n    }\n\n    if (!/Z$/.test(time_string)) {\n      // does not end in Z\n      // https://github.com/cryptonomex/graphene/issues/368\n      time_string += 'Z';\n    }\n\n    return new Date(time_string);\n  }\n\n  getHeadBlockDate() {\n    return TransactionBuilder.timeStringToDate(this.head_block_time_string);\n  }\n\n  base_expiration_sec() {\n    let head_block_sec = Math.ceil(this.getHeadBlockDate().getTime() / 1000);\n    let now_sec = Math.ceil(Date.now() / 1000);\n\n    // The head block time should be updated every 3 seconds.  If it isn't\n    // then help the transaction to expire (use head_block_sec)\n    if (now_sec - head_block_sec > 30) {\n      return head_block_sec;\n    }\n\n    // If the user's clock is very far behind, use the head block time.\n    return Math.max(now_sec, head_block_sec);\n  }\n}\n\nexport default TransactionBuilder;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/chain/src/TransactionBuilder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 323,
    "kind": "class",
    "name": "TransactionBuilder",
    "memberof": "lib/chain/src/TransactionBuilder.js",
    "static": true,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/chain/src/TransactionBuilder.js",
    "importStyle": "TransactionBuilder",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 324,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 325,
    "kind": "member",
    "name": "ref_block_num",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#ref_block_num",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "member",
    "name": "ref_block_prefix",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#ref_block_prefix",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "member",
    "name": "expiration",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#expiration",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 328,
    "kind": "member",
    "name": "operations",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#operations",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 329,
    "kind": "member",
    "name": "signatures",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#signatures",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "member",
    "name": "signer_private_keys",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#signer_private_keys",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 331,
    "kind": "member",
    "name": "head_block_time_string",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#head_block_time_string",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "member",
    "name": "committee_min_review",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#committee_min_review",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "add_type_operation",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#add_type_operation",
    "access": "public",
    "description": "",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{string} name - like \"transfer\""
      },
      {
        "tagName": "@arg",
        "tagValue": "{object} operation - JSON matchching the operation's format"
      }
    ],
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "operation",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "process_transaction",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#process_transaction",
    "access": "public",
    "description": "This does it all: set fees, finalize, sign, and broadcast (if wanted).",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{ConfidentialWallet} cwallet - must be unlocked, used to gather signing keys"
      },
      {
        "tagName": "@arg",
        "tagValue": "{array<string>} [signer_pubkeys = null] - Optional [\"GPHAbc9Def0...\", ...].  These are\nadditional signing keys.  Some balance claims require propritary address formats, the\nwitness node can't tell us which ones are needed so they must be passed in.  If the\nwitness node can figure out a signing key (mostly all other transactions), it should\nnot be passed in here."
      },
      {
        "tagName": "@arg",
        "tagValue": "{boolean} [broadcast = false]"
      }
    ],
    "params": [
      {
        "name": "cwallet",
        "types": [
          "*"
        ]
      },
      {
        "name": "signer_pubkeys",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      },
      {
        "name": "broadcast",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "finalize",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#finalize",
    "access": "public",
    "description": "Typically this is called automatically just prior to signing.\nOnce finalized this transaction can not be changed.",
    "lineNumber": 112,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 341,
    "kind": "member",
    "name": "tr_buffer",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#tr_buffer",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "id",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#id",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "hex transaction ID"
    },
    "params": []
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "add_operation",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#add_operation",
    "access": "public",
    "description": "Typically one will use {@link this.add_type_operation} instead.",
    "lineNumber": 175,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{array} operation - [operation_id, operation]"
      }
    ],
    "params": [
      {
        "name": "operation",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "get_type_operation",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#get_type_operation",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "operation",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "update_head_block",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#update_head_block",
    "access": "public",
    "description": null,
    "lineNumber": 295,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "set_expire_seconds",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#set_expire_seconds",
    "access": "public",
    "description": "optional: there is a deafult expiration",
    "lineNumber": 307,
    "params": [
      {
        "name": "sec",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "propose",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#propose",
    "access": "public",
    "description": null,
    "lineNumber": 318,
    "undocument": true,
    "params": [
      {
        "name": "proposal_create_options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 354,
    "kind": "method",
    "name": "has_proposed_operation",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#has_proposed_operation",
    "access": "public",
    "description": null,
    "lineNumber": 343,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "method",
    "name": "set_required_fees",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#set_required_fees",
    "access": "public",
    "description": "optional: the fees can be obtained from the witness node",
    "lineNumber": 357,
    "params": [
      {
        "name": "asset_id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "get_potential_signatures",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#get_potential_signatures",
    "access": "public",
    "description": null,
    "lineNumber": 484,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "get_required_signatures",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#get_required_signatures",
    "access": "public",
    "description": null,
    "lineNumber": 496,
    "undocument": true,
    "params": [
      {
        "name": "available_keys",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "add_signer",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#add_signer",
    "access": "public",
    "description": null,
    "lineNumber": 509,
    "undocument": true,
    "params": [
      {
        "name": "private_key",
        "types": [
          "*"
        ]
      },
      {
        "name": "public_key",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "sign",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#sign",
    "access": "public",
    "description": null,
    "lineNumber": 536,
    "undocument": true,
    "params": [
      {
        "name": "chain_id",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "signed",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#signed",
    "access": "public",
    "description": null,
    "lineNumber": 562,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "serialize",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 565,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "toObject",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#toObject",
    "access": "public",
    "description": null,
    "lineNumber": 569,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "broadcast",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#broadcast",
    "access": "public",
    "description": null,
    "lineNumber": 573,
    "undocument": true,
    "params": [
      {
        "name": "was_broadcast_callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "_broadcast",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#_broadcast",
    "access": "private",
    "description": null,
    "lineNumber": 581,
    "undocument": true,
    "params": [
      {
        "name": "was_broadcast_callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "timeStringToDate",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder.timeStringToDate",
    "access": "public",
    "description": null,
    "lineNumber": 634,
    "undocument": true,
    "params": [
      {
        "name": "time_string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "getHeadBlockDate",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#getHeadBlockDate",
    "access": "public",
    "description": null,
    "lineNumber": 648,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "base_expiration_sec",
    "memberof": "lib/chain/src/TransactionBuilder.js~TransactionBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/chain/src/TransactionBuilder.js~TransactionBuilder#base_expiration_sec",
    "access": "public",
    "description": null,
    "lineNumber": 652,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 369,
    "kind": "file",
    "name": "lib/chain/src/TransactionHelper.js",
    "content": "import secureRandom from 'secure-random';\n\nimport {Long} from 'bytebuffer';\n\nimport {Apis} from '../../ws';\nimport {Signature} from '../../ecc';\nimport {ops, types} from '../../serializer';\n\nconst helper = {\n  unique_nonce_entropy: null,\n  unique_nonce_uint64() {\n    let entropy = this.update_entropy();\n\n    let long = Long.fromNumber(Date.now());\n    long = long.shiftLeft(8).or(Long.fromNumber(entropy));\n    // console.log('unique_nonce_uint64 shift8\\t',ByteBuffer.allocate(8).writeUint64(long).toHex(0))\n    return long.toString();\n  },\n\n  update_entropy() {\n    if (this.unique_nonce_entropy === null) {\n      // console.log('... secureRandom.randomUint8Array(1)[0]',secureRandom.randomUint8Array(1)[0])\n      return parseInt(secureRandom.randomUint8Array(1)[0], 10);\n    }\n\n    return ++this.unique_nonce_entropy % 256;\n  },\n\n  /* Todo, set fees */\n  to_json(tr, broadcast = false) {\n    let tr_object = ops.signed_transaction.toObject(tr);\n\n    if (broadcast) {\n      let net = Apis.instance().network_api();\n      console.log('... tr_object', JSON.stringify(tr_object));\n      return net.exec('broadcast_transaction', [tr_object]);\n    }\n\n    return tr_object;\n  },\n\n  signed_tr_json(tr, private_keys) {\n    let tr_buffer = ops.transaction.toBuffer(tr);\n    tr = ops.transaction.toObject(tr);\n    tr.signatures = (() => {\n      let result = [];\n\n      for (\n        let i = 0;\n        private_keys.length > 0 ? i < private_keys.length : i > private_keys.length;\n        private_keys.length > 0 ? i++ : i++\n      ) {\n        let private_key = private_keys[i];\n        result.push(Signature.signBuffer(tr_buffer, private_key).toHex());\n      }\n\n      return result;\n    })();\n    return tr;\n  },\n\n  expire_in_min(min) {\n    return Math.round(Date.now() / 1000) + min * 60;\n  },\n\n  seconds_from_now(timeout_sec) {\n    return Math.round(Date.now() / 1000) + timeout_sec;\n  },\n\n  /**\n    Print to the console a JSON representation of any object in\n    @graphene/serializer { types }\n*/\n  template(serializer_operation_type_name, debug = {use_default: true, annotate: true}) {\n    let so = types[serializer_operation_type_name];\n\n    if (!so) {\n      throw new Error(`unknown serializer_operation_type ${serializer_operation_type_name}`);\n    }\n\n    return so.toObject(undefined, debug);\n  },\n\n  new_operation(serializer_operation_type_name) {\n    let so = types[serializer_operation_type_name];\n\n    if (!so) {\n      throw new Error(`unknown serializer_operation_type ${serializer_operation_type_name}`);\n    }\n\n    let object = so.toObject(undefined, {use_default: true, annotate: true});\n    return so.fromObject(object);\n  },\n\n  instance(ObjectId) {\n    return ObjectId.substring('0.0.'.length);\n  }\n};\nexport default helper;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/chain/src/TransactionHelper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 370,
    "kind": "variable",
    "name": "helper",
    "memberof": "lib/chain/src/TransactionHelper.js",
    "static": true,
    "longname": "lib/chain/src/TransactionHelper.js~helper",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/chain/src/TransactionHelper.js",
    "importStyle": "helper",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{\"unique_nonce_entropy\": *, \"unique_nonce_uint64\": function, \"update_entropy\": function, \"to_json\": function, \"signed_tr_json\": function, \"expire_in_min\": function, \"seconds_from_now\": function, \"template\": function, \"new_operation\": function, \"instance\": function}"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "file",
    "name": "lib/chain/src/state.js",
    "content": "function get(state) {\n  return key => state[key] || '';\n}\n\nfunction set(state) {\n  return (key, value) => {\n    state[key] = value;\n    return this;\n  };\n}\n\nexport {get, set};\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/chain/src/state.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 372,
    "kind": "function",
    "name": "get",
    "memberof": "lib/chain/src/state.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/state.js~get",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/chain/src/state.js",
    "importStyle": "{get}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 373,
    "kind": "function",
    "name": "set",
    "memberof": "lib/chain/src/state.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/chain/src/state.js~set",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/chain/src/state.js",
    "importStyle": "{set}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 374,
    "kind": "file",
    "name": "lib/ecc/index.js",
    "content": "import Address from './src/address';\nimport Aes from './src/aes';\nimport PrivateKey from './src/PrivateKey';\nimport PublicKey from './src/PublicKey';\nimport Signature from './src/signature';\nimport brainKey from './src/BrainKey';\nimport * as hash from './src/hash';\nimport key from './src/KeyUtils';\n\nexport {\n  Address, Aes, PrivateKey, PublicKey, Signature, brainKey, hash, key\n};\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/ecc/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 375,
    "kind": "file",
    "name": "lib/ecc/src/BrainKey.js",
    "content": "export default function normalize(brainKey) {\n  if (typeof brainKey !== 'string') {\n    throw new Error('string required for brainKey');\n  }\n\n  brainKey = brainKey.trim();\n  return brainKey.split(/[\\t\\n\\v\\f\\r ]+/).join(' ');\n}\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/ecc/src/BrainKey.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 376,
    "kind": "function",
    "name": "normalize",
    "memberof": "lib/ecc/src/BrainKey.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/BrainKey.js~normalize",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ecc/src/BrainKey.js",
    "importStyle": "normalize",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "brainKey",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 377,
    "kind": "file",
    "name": "lib/ecc/src/KeyUtils.js",
    "content": "import secureRandom from 'secure-random';\nimport {ChainConfig} from '../../ws';\nimport PrivateKey from './PrivateKey';\nimport PublicKey from './PublicKey';\nimport Address from './address';\nimport Aes from './aes';\n\nimport {sha256, sha512} from './hash';\n// import dictionary from './dictionary_en';\n\n// hash for .25 second\nlet HASH_POWER_MILLS = 250;\n\nconst key = {\n  /** Uses 1 second of hashing power to create a key/password checksum.  An\n    implementation can re-call this method with the same password to re-match\n    the strength of the CPU (either after moving from a desktop to a mobile,\n    mobile to desktop, or N years from now when CPUs are presumably stronger).\n\n    A salt is used for all the normal reasons...\n\n    @return object {\n        aes_private: Aes,\n        checksum: \"{hash_iteration_count},{salt},{checksum}\"\n    }\n    */\n  aes_checksum(password) {\n    if (!(typeof password === 'string')) {\n      throw new 'password string required'();\n    }\n\n    let salt = secureRandom.randomBuffer(4).toString('hex');\n    let iterations = 0;\n    let secret = salt + password;\n    // hash for .1 second\n    let start_t = Date.now();\n\n    while (Date.now() - start_t < HASH_POWER_MILLS) {\n      secret = sha256(secret);\n      iterations += 1;\n    }\n\n    let checksum = sha256(secret);\n    let checksum_string = [\n      iterations,\n      salt.toString('hex'),\n      checksum.slice(0, 4).toString('hex')\n    ].join(',');\n\n    return {\n      aes_private: Aes.fromSeed(secret),\n      checksum: checksum_string\n    };\n  },\n\n  /** Provide a matching password and key_checksum.  A \"wrong password\"\n    error is thrown if the password does not match.  If this method takes\n    much more or less than 1 second to return, one should consider updating\n    all encyrpted fields using a new key.key_checksum.\n    */\n  aes_private(password, key_checksum) {\n    let [iterations, salt, checksum] = key_checksum.split(',');\n    let secret = salt + password;\n\n    for (let i = 0; iterations > 0 ? i < iterations : i > iterations; iterations > 0 ? i++ : i++) {\n      secret = sha256(secret);\n    }\n\n    let new_checksum = sha256(secret);\n\n    if (!(new_checksum.slice(0, 4).toString('hex') === checksum)) {\n      throw new Error('wrong password');\n    }\n\n    return Aes.fromSeed(secret);\n  },\n\n  /**\n        A week random number generator can run out of entropy.\n        This should ensure even the worst random number implementation will be reasonably safe.\n\n        @param1 string entropy of at least 32 bytes\n    */\n  random32ByteBuffer(entropy = this.browserEntropy()) {\n    if (!(typeof entropy === 'string')) {\n      throw new Error('string required for entropy');\n    }\n\n    if (entropy.length < 32) {\n      throw new Error('expecting at least 32 bytes of entropy');\n    }\n\n    let start_t = Date.now();\n\n    while (Date.now() - start_t < HASH_POWER_MILLS) {\n      entropy = sha256(entropy);\n    }\n\n    let hash_array = [];\n    hash_array.push(entropy);\n\n    // Hashing for 1 second may helps the computer is not low on entropy\n    // (this method may be called back-to-back).\n    hash_array.push(secureRandom.randomBuffer(32));\n\n    return sha256(Buffer.concat(hash_array));\n  },\n\n  suggest_brain_key(dictionary = ',', entropy = this.browserEntropy()) {\n    let randomBuffer = this.random32ByteBuffer(entropy);\n\n    let word_count = 16;\n    let dictionary_lines = dictionary.split(',');\n\n    if (!(dictionary_lines.length === 49744)) {\n      throw new Error(`expecting ${49744} but got ${dictionary_lines.length} dictionary words`);\n    }\n\n    let brainkey = [];\n    let end = word_count * 2;\n\n    for (let i = 0; i < end; i += 2) {\n      // randomBuffer has 256 bits / 16 bits per word == 16 words\n      let num = (randomBuffer[i] << 8) + randomBuffer[i + 1]; // eslint-disable-line\n\n      // convert into a number between 0 and 1 (inclusive)\n      let rndMultiplier = num / Math.pow(2, 16);\n      let wordIndex = Math.round(dictionary_lines.length * rndMultiplier);\n\n      brainkey.push(dictionary_lines[wordIndex]);\n    }\n\n    return this.normalize_brainKey(brainkey.join(' '));\n  },\n\n  get_random_key(entropy) {\n    return PrivateKey.fromBuffer(this.random32ByteBuffer(entropy));\n  },\n\n  get_brainPrivateKey(brainKey, sequence = 0) {\n    if (sequence < 0) {\n      throw new Error('invalid sequence');\n    }\n\n    brainKey = key.normalize_brainKey(brainKey);\n    return PrivateKey.fromBuffer(sha256(sha512(`${brainKey} ${sequence}`)));\n  },\n\n  // Turn invisible space like characters into a single space\n  normalize_brainKey(brainKey) {\n    if (!(typeof brainKey === 'string')) {\n      throw new Error('string required for brainKey');\n    }\n\n    brainKey = brainKey.trim();\n    return brainKey.split(/[\\t\\n\\v\\f\\r ]+/).join(' ');\n  },\n\n  browserEntropy() {\n    let entropyStr = '';\n\n    try {\n      entropyStr = `${new Date().toString()} ${window.screen.height} ${window.screen.width}`;\n      entropyStr = `${entropyStr} ${window.screen.colorDepth} ${window.screen.availHeight}`;\n      entropyStr = `${entropyStr} ${window.screen.availWidth} ${window.screen.pixelDepth}`;\n      entropyStr = `${entropyStr} ${navigator.language} ${window.location}`;\n      entropyStr = `${entropyStr} ${window.history.length}`;\n\n      for (let i = 0, len = navigator.mimeTypes.length; i < len; i++) {\n        let mimeType = navigator.mimeTypes[i];\n        entropyStr += `${mimeType.description} ${mimeType.type} ${mimeType.suffixes} `;\n      }\n\n      console.log('INFO\\tbrowserEntropy gathered');\n    } catch (error) {\n      // nodejs:ReferenceError: window is not defined\n      entropyStr = sha256(new Date().toString());\n    }\n\n    let b = Buffer.from(entropyStr);\n    entropyStr += `${b.toString('binary')} ${new Date().toString()}`;\n    return entropyStr;\n  },\n\n  // @return array of 5 legacy addresses for a pubkey string parameter.\n  addresses(pubkey, address_prefix = ChainConfig.address_prefix) {\n    let public_key = PublicKey.fromPublicKeyString(pubkey, address_prefix);\n    // S L O W\n    let address_string = [\n      Address.fromPublic(public_key, false, 0).toString(address_prefix), // btc_uncompressed\n      Address.fromPublic(public_key, true, 0).toString(address_prefix), // btc_compressed\n      Address.fromPublic(public_key, false, 56).toString(address_prefix), // pts_uncompressed\n      Address.fromPublic(public_key, true, 56).toString(address_prefix), // pts_compressed\n      public_key.toAddressString(address_prefix) // bts_short, most recent format\n    ];\n    return address_string;\n  }\n};\n\nexport default key;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/ecc/src/KeyUtils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 378,
    "kind": "variable",
    "name": "HASH_POWER_MILLS",
    "memberof": "lib/ecc/src/KeyUtils.js",
    "static": true,
    "longname": "lib/ecc/src/KeyUtils.js~HASH_POWER_MILLS",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ecc/src/KeyUtils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 379,
    "kind": "variable",
    "name": "key",
    "memberof": "lib/ecc/src/KeyUtils.js",
    "static": true,
    "longname": "lib/ecc/src/KeyUtils.js~key",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ecc/src/KeyUtils.js",
    "importStyle": "key",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{\"aes_checksum\": function, \"aes_private\": function, \"random32ByteBuffer\": function, \"suggest_brain_key\": function, \"get_random_key\": function, \"get_brainPrivateKey\": function, \"normalize_brainKey\": function, \"browserEntropy\": function, \"addresses\": function}"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "file",
    "name": "lib/ecc/src/PrivateKey.js",
    "content": "/* global ByteBuffer */\nimport {Point, getCurveByName} from 'ecurve';\nimport BigInteger from 'bigi';\nimport {encode, decode} from 'bs58';\nimport deepEqual from 'deep-equal';\nimport assert from 'assert';\nimport {sha256, sha512} from './hash';\nimport PublicKey from './PublicKey';\n\nconst secp256k1 = getCurveByName('secp256k1');\nconst {n} = secp256k1;\n\nfunction toPublic(data) {\n  if (!data || data.Q) {\n    return data;\n  }\n\n  return PublicKey.fromStringOrThrow(data);\n}\n\nclass PrivateKey {\n  /**\n        @private see static functions\n        @param {BigInteger}\n    */\n  constructor(d) {\n    this.d = d;\n  }\n\n  static fromBuffer(buf) {\n    if (!Buffer.isBuffer(buf)) {\n      throw new Error('Expecting paramter to be a Buffer type');\n    }\n\n    if (buf.length !== 32) {\n      console.log(\n        `WARN: Expecting 32 bytes, instead got ${buf.length}, stack trace:`,\n        new Error().stack\n      );\n    }\n\n    if (buf.length === 0) {\n      throw new Error('Empty buffer');\n    }\n\n    return new PrivateKey(BigInteger.fromBuffer(buf));\n  }\n\n  /** @arg {string} seed - any length string.  This is private,\n   * the same seed produces the same private key every time.  */\n  static fromSeed(seed) {\n    // generate_private_key\n    if (!(typeof seed === 'string')) {\n      throw new Error('seed must be of type string');\n    }\n\n    return PrivateKey.fromBuffer(sha256(seed));\n  }\n\n  /** @return {string} Wallet Import Format (still a secret, Not encrypted) */\n  static fromWif(_private_wif) {\n    let private_wif = Buffer.from(decode(_private_wif));\n    let version = private_wif.readUInt8(0);\n    assert.equal(0x80, version, `Expected version ${0x80}, instead got ${version}`);\n    // checksum includes the version\n    let private_key = private_wif.slice(0, -4);\n    let checksum = private_wif.slice(-4);\n    let new_checksum = sha256(private_key);\n    new_checksum = sha256(new_checksum);\n    new_checksum = new_checksum.slice(0, 4);\n    let isEqual = deepEqual(checksum, new_checksum); // , 'Invalid checksum'\n\n    if (!isEqual) {\n      throw new Error('Checksum did not match');\n    }\n\n    private_key = private_key.slice(1);\n    private_key = private_key.slice(0, 32);\n    return PrivateKey.fromBuffer(private_key);\n  }\n\n  toWif() {\n    let private_key = this.toBuffer();\n    // checksum includes the version\n    private_key = Buffer.concat([Buffer.from([0x80]), private_key]);\n    let checksum = sha256(private_key);\n    checksum = sha256(checksum);\n    checksum = checksum.slice(0, 4);\n    let private_wif = Buffer.concat([private_key, checksum]);\n    return encode(private_wif);\n  }\n\n  /**\n        @return {Point}\n    */\n  toPublicKeyPoint() {\n    let Q = secp256k1.G.multiply(this.d);\n    return Q;\n  }\n\n  toPublicKey() {\n    if (this.public_key) {\n      return this.public_key;\n    }\n\n    this.public_key = PublicKey.fromPoint(this.toPublicKeyPoint());\n\n    return this.public_key;\n  }\n\n  toBuffer() {\n    return this.d.toBuffer(32);\n  }\n\n  /** ECIES */\n  get_shared_secret(public_key, legacy = false) {\n    public_key = toPublic(public_key);\n    let KB = public_key.toUncompressed().toBuffer();\n    let KBP = Point.fromAffine(\n      secp256k1,\n      BigInteger.fromBuffer(KB.slice(1, 33)), // x\n      BigInteger.fromBuffer(KB.slice(33, 65)) // y\n    );\n    let r = this.toBuffer();\n    let P = KBP.multiply(BigInteger.fromBuffer(r));\n    let S = P.affineX.toBuffer({size: 32});\n\n    /*\n        the input to sha512 must be exactly 32-bytes, to match the c++ implementation\n        of get_shared_secret.  Right now S will be shorter if the most significant\n        byte(s) is zero.  Pad it back to the full 32-bytes\n        */\n    if (!legacy && S.length < 32) {\n      let pad = Buffer.alloc(32 - S.length, 0);\n      S = Buffer.concat([pad, S]);\n    }\n\n    // SHA512 used in ECIES\n    return sha512(S);\n  }\n\n  // /** ECIES (does not always match the Point.fromAffine version above) */\n  // get_shared_secret(public_key){\n  //     public_key = toPublic(public_key)\n  //     var P = public_key.Q.multiply( this.d );\n  //     var S = P.affineX.toBuffer({size: 32});\n  //     // ECIES, adds an extra sha512\n  //     return sha512(S);\n  // }\n\n  /** @throws {Error} - overflow of the key could not be derived */\n  child(offset) {\n    offset = Buffer.concat([this.toPublicKey().toBuffer(), offset]);\n    offset = sha256(offset);\n    let c = BigInteger.fromBuffer(offset);\n\n    if (c.compareTo(n) >= 0) {\n      throw new Error('Child offset went out of bounds, try again');\n    }\n\n    let derived = this.d.add(c); // .mod(n)\n\n    if (derived.signum() === 0) {\n      throw new Error('Child offset derived to an invalid key, try again');\n    }\n\n    return new PrivateKey(derived);\n  }\n\n  /* <helper_functions> */\n\n  toByteBuffer() {\n    let b = new ByteBuffer(ByteBuffer.DEFAULT_CAPACITY, ByteBuffer.LITTLE_ENDIAN);\n    this.appendByteBuffer(b);\n    return b.copy(0, b.offset);\n  }\n\n  static fromHex(hex) {\n    return PrivateKey.fromBuffer(Buffer.from(hex, 'hex'));\n  }\n\n  toHex() {\n    return this.toBuffer().toString('hex');\n  }\n\n  /* </helper_functions> */\n}\n\nexport default PrivateKey;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/ecc/src/PrivateKey.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 381,
    "kind": "variable",
    "name": "secp256k1",
    "memberof": "lib/ecc/src/PrivateKey.js",
    "static": true,
    "longname": "lib/ecc/src/PrivateKey.js~secp256k1",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ecc/src/PrivateKey.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 382,
    "kind": "variable",
    "name": "n",
    "memberof": "lib/ecc/src/PrivateKey.js",
    "static": true,
    "longname": "lib/ecc/src/PrivateKey.js~n",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ecc/src/PrivateKey.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 383,
    "kind": "function",
    "name": "toPublic",
    "memberof": "lib/ecc/src/PrivateKey.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/PrivateKey.js~toPublic",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ecc/src/PrivateKey.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 384,
    "kind": "class",
    "name": "PrivateKey",
    "memberof": "lib/ecc/src/PrivateKey.js",
    "static": true,
    "longname": "lib/ecc/src/PrivateKey.js~PrivateKey",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ecc/src/PrivateKey.js",
    "importStyle": "PrivateKey",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 385,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/ecc/src/PrivateKey.js~PrivateKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/PrivateKey.js~PrivateKey#constructor",
    "access": "private",
    "description": "",
    "lineNumber": 26,
    "params": []
  },
  {
    "__docId__": 386,
    "kind": "member",
    "name": "d",
    "memberof": "lib/ecc/src/PrivateKey.js~PrivateKey",
    "static": false,
    "longname": "lib/ecc/src/PrivateKey.js~PrivateKey#d",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 387,
    "kind": "method",
    "name": "fromBuffer",
    "memberof": "lib/ecc/src/PrivateKey.js~PrivateKey",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/PrivateKey.js~PrivateKey.fromBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "buf",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "fromSeed",
    "memberof": "lib/ecc/src/PrivateKey.js~PrivateKey",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/PrivateKey.js~PrivateKey.fromSeed",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{string} seed - any length string.  This is private,\nthe same seed produces the same private key every time."
      }
    ],
    "params": [
      {
        "name": "seed",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "fromWif",
    "memberof": "lib/ecc/src/PrivateKey.js~PrivateKey",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/PrivateKey.js~PrivateKey.fromWif",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Wallet Import Format (still a secret, Not encrypted)"
    },
    "params": [
      {
        "name": "_private_wif",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 390,
    "kind": "method",
    "name": "toWif",
    "memberof": "lib/ecc/src/PrivateKey.js~PrivateKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/PrivateKey.js~PrivateKey#toWif",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 391,
    "kind": "method",
    "name": "toPublicKeyPoint",
    "memberof": "lib/ecc/src/PrivateKey.js~PrivateKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/PrivateKey.js~PrivateKey#toPublicKeyPoint",
    "access": "public",
    "description": "",
    "lineNumber": 96,
    "return": {
      "nullable": null,
      "types": [
        "Point"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 392,
    "kind": "method",
    "name": "toPublicKey",
    "memberof": "lib/ecc/src/PrivateKey.js~PrivateKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/PrivateKey.js~PrivateKey#toPublicKey",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 393,
    "kind": "member",
    "name": "public_key",
    "memberof": "lib/ecc/src/PrivateKey.js~PrivateKey",
    "static": false,
    "longname": "lib/ecc/src/PrivateKey.js~PrivateKey#public_key",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "toBuffer",
    "memberof": "lib/ecc/src/PrivateKey.js~PrivateKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/PrivateKey.js~PrivateKey#toBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "get_shared_secret",
    "memberof": "lib/ecc/src/PrivateKey.js~PrivateKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/PrivateKey.js~PrivateKey#get_shared_secret",
    "access": "public",
    "description": "ECIES",
    "lineNumber": 116,
    "params": [
      {
        "name": "public_key",
        "types": [
          "*"
        ]
      },
      {
        "name": "legacy",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 396,
    "kind": "method",
    "name": "child",
    "memberof": "lib/ecc/src/PrivateKey.js~PrivateKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/PrivateKey.js~PrivateKey#child",
    "access": "public",
    "description": null,
    "lineNumber": 152,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "overflow of the key could not be derived"
      }
    ],
    "params": [
      {
        "name": "offset",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "toByteBuffer",
    "memberof": "lib/ecc/src/PrivateKey.js~PrivateKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/PrivateKey.js~PrivateKey#toByteBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 398,
    "kind": "method",
    "name": "fromHex",
    "memberof": "lib/ecc/src/PrivateKey.js~PrivateKey",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/PrivateKey.js~PrivateKey.fromHex",
    "access": "public",
    "description": null,
    "lineNumber": 178,
    "undocument": true,
    "params": [
      {
        "name": "hex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 399,
    "kind": "method",
    "name": "toHex",
    "memberof": "lib/ecc/src/PrivateKey.js~PrivateKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/PrivateKey.js~PrivateKey#toHex",
    "access": "public",
    "description": null,
    "lineNumber": 182,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 400,
    "kind": "file",
    "name": "lib/ecc/src/PublicKey.js",
    "content": "/* global ByteBuffer */\nimport BigInteger from 'bigi';\nimport {Point, getCurveByName} from 'ecurve';\nimport {encode, decode} from 'bs58';\nimport assert from 'assert';\nimport deepEqual from 'deep-equal';\nimport {ChainConfig} from '../../ws';\nimport {sha256, sha512, ripemd160} from './hash';\n\nconst secp256k1 = getCurveByName('secp256k1');\n\nconst {G, n} = secp256k1;\n\nclass PublicKey {\n  /** @param {Point} public key */\n  constructor(Q) {\n    this.Q = Q;\n  }\n\n  static fromBinary(bin) {\n    return PublicKey.fromBuffer(Buffer.from(bin, 'binary'));\n  }\n\n  static fromBuffer(buffer) {\n    if (\n      buffer.toString('hex')\n      === '000000000000000000000000000000000000000000000000000000000000000000'\n    ) {\n      return new PublicKey(null);\n    }\n\n    return new PublicKey(Point.decodeFrom(secp256k1, buffer));\n  }\n\n  toBuffer(compressed = this.Q ? this.Q.compressed : null) {\n    if (this.Q === null) {\n      return Buffer.from(\n        '000000000000000000000000000000000000000000000000000000000000000000',\n        'hex'\n      );\n    }\n\n    return this.Q.getEncoded(compressed);\n  }\n\n  static fromPoint(point) {\n    return new PublicKey(point);\n  }\n\n  toUncompressed() {\n    let buf = this.Q.getEncoded(false);\n    let point = Point.decodeFrom(secp256k1, buf);\n    return PublicKey.fromPoint(point);\n  }\n\n  /** bts::blockchain::address (unique but not a full public key) */\n  toBlockchainAddress() {\n    let pub_buf = this.toBuffer();\n    let pub_sha = sha512(pub_buf);\n    return ripemd160(pub_sha);\n  }\n\n  /** Alias for {@link toPublicKeyString} */\n  toString(address_prefix = ChainConfig.address_prefix) {\n    return this.toPublicKeyString(address_prefix);\n  }\n\n  /**\n        Full public key\n        {return} string\n    */\n  toPublicKeyString(address_prefix = ChainConfig.address_prefix) {\n    let pub_buf = this.toBuffer();\n    let checksum = ripemd160(pub_buf);\n    // Slice from the buffer directly, slicing from the checksum\n    // Uint8array will return the entire array each time.\n    let sliced = new Uint8Array(checksum.buffer.slice(0, 4));\n\n    // concat only accepts buffers so initialize the sliced Uint8array as a Buffer.\n    let addy = Buffer.concat([pub_buf, Buffer.from(sliced)]);\n    return address_prefix + encode(addy);\n  }\n\n  /**\n        @arg {string} public_key - like GPHXyz...\n        @arg {string} address_prefix - like GPH\n        @return PublicKey or `null` (if the public_key string is invalid)\n    */\n  static fromPublicKeyString(public_key, address_prefix = ChainConfig.address_prefix) {\n    try {\n      return PublicKey.fromStringOrThrow(public_key, address_prefix);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n        @arg {string} public_key - like GPHXyz...\n        @arg {string} address_prefix - like GPH\n        @throws {Error} if public key is invalid\n        @return PublicKey\n    */\n  static fromStringOrThrow(public_key, address_prefix = ChainConfig.address_prefix) {\n    let prefix = public_key.slice(0, address_prefix.length);\n    assert.equal(\n      address_prefix,\n      prefix,\n      `Expecting key to begin with ${address_prefix}, instead got ${prefix}`\n    );\n    public_key = public_key.slice(address_prefix.length);\n\n    public_key = Buffer.from(decode(public_key), 'binary');\n    let checksum = public_key.slice(-4);\n    public_key = public_key.slice(0, -4);\n    let new_checksum = ripemd160(public_key);\n    new_checksum = new_checksum.slice(0, 4);\n    let isEqual = deepEqual(checksum, new_checksum); // , 'Invalid checksum'\n\n    if (!isEqual) {\n      throw new Error('Checksum did not match');\n    }\n\n    return PublicKey.fromBuffer(public_key);\n  }\n\n  toAddressString(address_prefix = ChainConfig.address_prefix) {\n    let pub_buf = this.toBuffer();\n    let pub_sha = sha512(pub_buf);\n    let addy = ripemd160(pub_sha);\n    let checksum = ripemd160(addy);\n    addy = Buffer.concat([addy, checksum.slice(0, 4)]);\n    return address_prefix + encode(addy);\n  }\n\n  toPtsAddy() {\n    let pub_buf = this.toBuffer();\n    let pub_sha = sha256(pub_buf);\n    let addy = ripemd160(pub_sha);\n    addy = Buffer.concat([Buffer.from([0x38]), addy]); // version 56(decimal)\n\n    let checksum = sha256(addy);\n    checksum = sha256(checksum);\n\n    addy = Buffer.concat([addy, checksum.slice(0, 4)]);\n    return encode(addy);\n  }\n\n  child(offset) {\n    assert(Buffer.isBuffer(offset), 'Buffer required: offset');\n    assert.equal(offset.length, 32, 'offset length');\n\n    offset = Buffer.concat([this.toBuffer(), offset]);\n    offset = sha256(offset);\n\n    let c = BigInteger.fromBuffer(offset);\n\n    if (c.compareTo(n) >= 0) {\n      throw new Error('Child offset went out of bounds, try again');\n    }\n\n    let cG = G.multiply(c);\n    let Qprime = this.Q.add(cG);\n\n    if (secp256k1.isInfinity(Qprime)) {\n      throw new Error('Child offset derived to an invalid key, try again');\n    }\n\n    return PublicKey.fromPoint(Qprime);\n  }\n\n  /* <HEX> */\n\n  toByteBuffer() {\n    let b = new ByteBuffer(ByteBuffer.DEFAULT_CAPACITY, ByteBuffer.LITTLE_ENDIAN);\n    this.appendByteBuffer(b);\n    return b.copy(0, b.offset);\n  }\n\n  static fromHex(hex) {\n    return PublicKey.fromBuffer(Buffer.from(hex, 'hex'));\n  }\n\n  toHex() {\n    return this.toBuffer().toString('hex');\n  }\n\n  static fromPublicKeyStringHex(hex) {\n    return PublicKey.fromPublicKeyString(Buffer.from(hex, 'hex'));\n  }\n\n  /* </HEX> */\n}\n\nexport default PublicKey;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/ecc/src/PublicKey.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 401,
    "kind": "variable",
    "name": "secp256k1",
    "memberof": "lib/ecc/src/PublicKey.js",
    "static": true,
    "longname": "lib/ecc/src/PublicKey.js~secp256k1",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ecc/src/PublicKey.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 402,
    "kind": "variable",
    "name": "G",
    "memberof": "lib/ecc/src/PublicKey.js",
    "static": true,
    "longname": "lib/ecc/src/PublicKey.js~G",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ecc/src/PublicKey.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 403,
    "kind": "class",
    "name": "PublicKey",
    "memberof": "lib/ecc/src/PublicKey.js",
    "static": true,
    "longname": "lib/ecc/src/PublicKey.js~PublicKey",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ecc/src/PublicKey.js",
    "importStyle": "PublicKey",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 404,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/ecc/src/PublicKey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/PublicKey.js~PublicKey#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Point"
        ],
        "spread": false,
        "optional": false,
        "name": "public",
        "description": "key"
      }
    ]
  },
  {
    "__docId__": 405,
    "kind": "member",
    "name": "Q",
    "memberof": "lib/ecc/src/PublicKey.js~PublicKey",
    "static": false,
    "longname": "lib/ecc/src/PublicKey.js~PublicKey#Q",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "fromBinary",
    "memberof": "lib/ecc/src/PublicKey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/PublicKey.js~PublicKey.fromBinary",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "bin",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "fromBuffer",
    "memberof": "lib/ecc/src/PublicKey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/PublicKey.js~PublicKey.fromBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "toBuffer",
    "memberof": "lib/ecc/src/PublicKey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/PublicKey.js~PublicKey#toBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "compressed",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "fromPoint",
    "memberof": "lib/ecc/src/PublicKey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/PublicKey.js~PublicKey.fromPoint",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "point",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "toUncompressed",
    "memberof": "lib/ecc/src/PublicKey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/PublicKey.js~PublicKey#toUncompressed",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "toBlockchainAddress",
    "memberof": "lib/ecc/src/PublicKey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/PublicKey.js~PublicKey#toBlockchainAddress",
    "access": "public",
    "description": "bts::blockchain::address (unique but not a full public key)",
    "lineNumber": 57,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 412,
    "kind": "method",
    "name": "toString",
    "memberof": "lib/ecc/src/PublicKey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/PublicKey.js~PublicKey#toString",
    "access": "public",
    "description": "Alias for {@link toPublicKeyString}",
    "lineNumber": 64,
    "params": [
      {
        "name": "address_prefix",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "toPublicKeyString",
    "memberof": "lib/ecc/src/PublicKey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/PublicKey.js~PublicKey#toPublicKeyString",
    "access": "public",
    "description": "Full public key\n{return} string",
    "lineNumber": 72,
    "params": [
      {
        "name": "address_prefix",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "fromPublicKeyString",
    "memberof": "lib/ecc/src/PublicKey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/PublicKey.js~PublicKey.fromPublicKeyString",
    "access": "public",
    "description": "",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{string} public_key - like GPHXyz..."
      },
      {
        "tagName": "@arg",
        "tagValue": "{string} address_prefix - like GPH"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "PublicKey or `null` (if the public_key string is invalid)"
    },
    "params": [
      {
        "name": "public_key",
        "types": [
          "*"
        ]
      },
      {
        "name": "address_prefix",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "fromStringOrThrow",
    "memberof": "lib/ecc/src/PublicKey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/PublicKey.js~PublicKey.fromStringOrThrow",
    "access": "public",
    "description": "",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{string} public_key - like GPHXyz..."
      },
      {
        "tagName": "@arg",
        "tagValue": "{string} address_prefix - like GPH"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "PublicKey"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if public key is invalid"
      }
    ],
    "params": [
      {
        "name": "public_key",
        "types": [
          "*"
        ]
      },
      {
        "name": "address_prefix",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "toAddressString",
    "memberof": "lib/ecc/src/PublicKey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/PublicKey.js~PublicKey#toAddressString",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [
      {
        "name": "address_prefix",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "toPtsAddy",
    "memberof": "lib/ecc/src/PublicKey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/PublicKey.js~PublicKey#toPtsAddy",
    "access": "public",
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "child",
    "memberof": "lib/ecc/src/PublicKey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/PublicKey.js~PublicKey#child",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "params": [
      {
        "name": "offset",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "toByteBuffer",
    "memberof": "lib/ecc/src/PublicKey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/PublicKey.js~PublicKey#toByteBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 420,
    "kind": "method",
    "name": "fromHex",
    "memberof": "lib/ecc/src/PublicKey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/PublicKey.js~PublicKey.fromHex",
    "access": "public",
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "params": [
      {
        "name": "hex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "toHex",
    "memberof": "lib/ecc/src/PublicKey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/PublicKey.js~PublicKey#toHex",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "fromPublicKeyStringHex",
    "memberof": "lib/ecc/src/PublicKey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/PublicKey.js~PublicKey.fromPublicKeyStringHex",
    "access": "public",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "params": [
      {
        "name": "hex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "file",
    "name": "lib/ecc/src/address.js",
    "content": "import assert from 'assert';\nimport {encode, decode} from 'bs58';\nimport deepEqual from 'deep-equal';\nimport {ChainConfig} from '../../ws';\nimport {sha256, sha512, ripemd160} from './hash';\n\n/** Addresses are shortened non-reversable hashes of a public key.  The full PublicKey is preferred.\n    @deprecated\n*/\nclass Address {\n  constructor(addy) {\n    this.addy = addy;\n  }\n\n  static fromBuffer(buffer) {\n    let _hash = sha512(buffer);\n    let addy = ripemd160(_hash);\n    return new Address(addy);\n  }\n\n  static fromString(string, address_prefix = ChainConfig.address_prefix) {\n    let prefix = string.slice(0, address_prefix.length);\n    assert.equal(\n      address_prefix,\n      prefix,\n      `Expecting key to begin with ${address_prefix}, instead got ${prefix}`\n    );\n    let addy = string.slice(address_prefix.length);\n    addy = Buffer.from(decode(addy), 'binary');\n    let checksum = addy.slice(-4);\n    addy = addy.slice(0, -4);\n    let new_checksum = ripemd160(addy);\n    new_checksum = new_checksum.slice(0, 4);\n    let isEqual = deepEqual(checksum, new_checksum); // , 'Invalid checksum'\n\n    if (!isEqual) {\n      throw new Error('Checksum did not match');\n    }\n\n    return new Address(addy);\n  }\n\n  /** @return Address - Compressed PTS format (by default) */\n  static fromPublic(public_key, compressed = true, version = 56) {\n    let sha2 = sha256(public_key.toBuffer(compressed));\n    let rep = ripemd160(sha2);\n    let versionBuffer = Buffer.alloc(1);\n    versionBuffer.writeUInt8(0xff & version, 0); // eslint-disable-line\n    let addr = Buffer.concat([versionBuffer, rep]);\n    let check = sha256(addr);\n    check = sha256(check);\n    let buffer = Buffer.concat([addr, check.slice(0, 4)]);\n    return new Address(ripemd160(buffer));\n  }\n\n  toBuffer() {\n    return this.addy;\n  }\n\n  toString(address_prefix = ChainConfig.address_prefix) {\n    let checksum = ripemd160(this.addy);\n    let addy = Buffer.concat([this.addy, checksum.slice(0, 4)]);\n    return address_prefix + encode(addy);\n  }\n}\n\nexport default Address;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/ecc/src/address.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 424,
    "kind": "class",
    "name": "Address",
    "memberof": "lib/ecc/src/address.js",
    "static": true,
    "longname": "lib/ecc/src/address.js~Address",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ecc/src/address.js",
    "importStyle": "Address",
    "description": "Addresses are shortened non-reversable hashes of a public key.  The full PublicKey is preferred.",
    "lineNumber": 10,
    "deprecated": true,
    "interface": false
  },
  {
    "__docId__": 425,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/ecc/src/address.js~Address",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/address.js~Address#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 426,
    "kind": "member",
    "name": "addy",
    "memberof": "lib/ecc/src/address.js~Address",
    "static": false,
    "longname": "lib/ecc/src/address.js~Address#addy",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "fromBuffer",
    "memberof": "lib/ecc/src/address.js~Address",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/address.js~Address.fromBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 428,
    "kind": "method",
    "name": "fromString",
    "memberof": "lib/ecc/src/address.js~Address",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/address.js~Address.fromString",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      },
      {
        "name": "address_prefix",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "fromPublic",
    "memberof": "lib/ecc/src/address.js~Address",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/address.js~Address.fromPublic",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Address - Compressed PTS format (by default)"
    },
    "params": [
      {
        "name": "public_key",
        "types": [
          "*"
        ]
      },
      {
        "name": "compressed",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "version",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 56,
        "defaultValue": "56"
      }
    ]
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "toBuffer",
    "memberof": "lib/ecc/src/address.js~Address",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/address.js~Address#toBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "toString",
    "memberof": "lib/ecc/src/address.js~Address",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/address.js~Address#toString",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "address_prefix",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 432,
    "kind": "file",
    "name": "lib/ecc/src/aes.js",
    "content": "// https://code.google.com/p/crypto-js\nimport AES from 'crypto-js/aes';\nimport encHex from 'crypto-js/enc-hex';\nimport encBase64 from 'crypto-js/enc-base64';\nimport assert from 'assert';\nimport {sha256, sha512} from './hash';\n\n/** Provides symetric encrypt and decrypt via AES. */\nclass Aes {\n  /** @private */\n  constructor(iv, key) {\n    this.iv = iv;\n    this.key = key;\n  }\n\n  /** This is an excellent way to ensure that all references to Aes can not operate anymore\n   * (example: a wallet becomes locked).  An application should ensure there is only one\n   * Aes object instance for a given secret `seed`. */\n  clear() {\n    this.iv = undefined;\n    this.key = undefined;\n    return undefined;\n  }\n\n  /** @arg {string} seed - secret seed may be used to encrypt or decrypt. */\n  static fromSeed(seed) {\n    if (seed === undefined) {\n      throw new Error('seed is required');\n    }\n\n    let _hash = sha512(seed);\n    _hash = _hash.toString('hex');\n    // DEBUG console.log('... fromSeed _hash',_hash)\n    return Aes.fromSha512(_hash);\n  }\n\n  /** @arg {string} hash - A 128 byte hex string, typically one\n   * would call {@link fromSeed} instead. */\n  static fromSha512(hash) {\n    assert.equal(\n      hash.length,\n      128,\n      `A Sha512 in HEX should be 128 characters long, instead got ${hash.length}`\n    );\n    let iv = encHex.parse(hash.substring(64, 96));\n    let key = encHex.parse(hash.substring(0, 64));\n    return new Aes(iv, key);\n  }\n\n  static fromBuffer(buf) {\n    assert(Buffer.isBuffer(buf), 'Expecting Buffer');\n    assert.equal(\n      buf.length,\n      64,\n      `A Sha512 Buffer should be 64 characters long, instead got ${buf.length}`\n    );\n    return Aes.fromSha512(buf.toString('hex'));\n  }\n\n  /**\n        @throws {Error} - \"Invalid Key, ...\"\n        @arg {PrivateKey} private_key - required and used for decryption\n        @arg {PublicKey} public_key - required and used to calcualte the shared secret\n        @arg {string} [nonce = \"\"] optional but should always be provided and be unique\n        when re-using the same private/public keys more than once.  This nonce is not a secret.\n        @arg {string|Buffer} message - Encrypted message containing a checksum\n        @return {Buffer}\n    */\n  static decrypt_with_checksum(private_key, public_key, nonce, message, legacy = false) {\n    // Warning: Do not put `nonce = \"\"` in the arguments, in es6 this will\n    // not convert \"null\" into an emtpy string\n    if (nonce == null) {\n      nonce = '';\n    }\n\n    if (!Buffer.isBuffer(message)) {\n      message = Buffer.from(message, 'hex');\n    }\n\n    let S = private_key.get_shared_secret(public_key, legacy);\n    // D E B U G\n    // console.log('decrypt_with_checksum', {\n    //     priv_to_pub: private_key.toPublicKey().toString(),\n    //     pub: public_key.toPublicKeyString(),\n    //     nonce: nonce,\n    //     message: message.length,\n    //     S: S.toString('hex')\n    // })\n\n    let aes = Aes.fromSeed(\n      Buffer.concat([\n        // A null or empty string nonce will not effect the hash\n        Buffer.from(`${nonce}`),\n        Buffer.from(S.toString('hex'))\n      ])\n    );\n\n    let planebuffer = aes.decrypt(message);\n\n    if (!(planebuffer.length >= 4)) {\n      throw new Error('Invalid key, could not decrypt message(1)');\n    }\n\n    // DEBUG console.log('... planebuffer',planebuffer)\n    let checksum = planebuffer.slice(0, 4);\n    let plaintext = planebuffer.slice(4);\n\n    // console.log('... checksum',checksum.toString('hex'))\n    // console.log('... plaintext',plaintext.toString())\n\n    let new_checksum = sha256(plaintext);\n    new_checksum = new_checksum.slice(0, 4);\n    new_checksum = new_checksum.toString('hex');\n\n    if (!(checksum.toString('hex') === new_checksum)) {\n      throw new Error('Invalid key, could not decrypt message(2)');\n    }\n\n    return plaintext;\n  }\n\n  /** Identical to {@link decrypt_with_checksum} but used to encrypt.  Should not throw an error.\n        @return {Buffer} message - Encrypted message which includes a checksum\n    */\n  static encrypt_with_checksum(private_key, public_key, nonce, message) {\n    // Warning: Do not put `nonce = \"\"` in the arguments, in es6 this will\n    // not convert \"null\" into an emtpy string\n\n    if (nonce == null) {\n      nonce = '';\n    }\n\n    if (!Buffer.isBuffer(message)) {\n      message = Buffer.from(message, 'binary');\n    }\n\n    let S = private_key.get_shared_secret(public_key);\n\n    // D E B U G\n    // console.log('encrypt_with_checksum', {\n    //     priv_to_pub: private_key.toPublicKey().toString()\n    //     pub: public_key.toPublicKeyString()\n    //     nonce: nonce\n    //     message: message.length\n    //     S: S.toString('hex')\n    // })\n\n    let aes = Aes.fromSeed(\n      Buffer.concat([\n        // A null or empty string nonce will not effect the hash\n        Buffer.from(`${nonce}`),\n        Buffer.from(S.toString('hex'))\n      ])\n    );\n    // DEBUG console.log('... S',S.toString('hex'))\n    let checksum = sha256(message).slice(0, 4);\n    let payload = Buffer.concat([checksum, message]);\n    // DEBUG console.log('... payload',payload.toString())\n    return aes.encrypt(payload);\n  }\n\n  /** @private */\n  _decrypt_word_array(cipher) {\n    // https://code.google.com/p/crypto-js/#Custom_Key_and_IV\n    // see wallet_records.cpp master_key::decrypt_key\n    return AES.decrypt({ciphertext: cipher, salt: null}, this.key, {iv: this.iv});\n  }\n\n  /** @private */\n  _encrypt_word_array(plaintext) {\n    // https://code.google.com/p/crypto-js/issues/detail?id=85\n    let cipher = AES.encrypt(plaintext, this.key, {iv: this.iv});\n    return encBase64.parse(cipher.toString());\n  }\n\n  /** This method does not use a checksum, the returned data must be validated some other way.\n        @arg {string} ciphertext\n        @return {Buffer} binary\n    */\n  decrypt(ciphertext) {\n    if (typeof ciphertext === 'string') {\n      ciphertext = Buffer.from(ciphertext, 'binary');\n    }\n\n    if (!Buffer.isBuffer(ciphertext)) {\n      throw new Error('buffer required');\n    }\n\n    assert(ciphertext, 'Missing cipher text');\n    // hex is the only common format\n    let hex = this.decryptHex(ciphertext.toString('hex'));\n    return Buffer.from(hex, 'hex');\n  }\n\n  /** This method does not use a checksum, the returned data must be validated some other way.\n        @arg {string} plaintext\n        @return {Buffer} binary\n    */\n  encrypt(plaintext) {\n    if (typeof plaintext === 'string') {\n      plaintext = Buffer.from(plaintext, 'binary');\n    }\n\n    if (!Buffer.isBuffer(plaintext)) {\n      throw new Error('buffer required');\n    }\n\n    // assert plaintext, \"Missing plain text\"\n    // hex is the only common format\n    let hex = this.encryptHex(plaintext.toString('hex'));\n    return Buffer.from(hex, 'hex');\n  }\n\n  /** This method does not use a checksum, the returned data must be validated some other way.\n        @arg {string|Buffer} plaintext\n        @return {string} hex\n    */\n  encryptToHex(plaintext) {\n    if (typeof plaintext === 'string') {\n      plaintext = Buffer.from(plaintext, 'binary');\n    }\n\n    if (!Buffer.isBuffer(plaintext)) {\n      throw new Error('buffer required');\n    }\n\n    // assert plaintext, \"Missing plain text\"\n    // hex is the only common format\n    return this.encryptHex(plaintext.toString('hex'));\n  }\n\n  /** This method does not use a checksum, the returned data must be validated some other way.\n        @arg {string} cipher - hex\n        @return {string} binary (could easily be readable text)\n    */\n  decryptHex(cipher) {\n    assert(cipher, 'Missing cipher text');\n    // Convert data into word arrays (used by Crypto)\n    let cipher_array = encHex.parse(cipher);\n    let plainwords = this._decrypt_word_array(cipher_array);\n    return encHex.stringify(plainwords);\n  }\n\n  /** This method does not use a checksum, the returned data must be validated some other way.\n        @arg {string} cipher - hex\n        @return {Buffer} encoded as specified by the parameter\n    */\n  decryptHexToBuffer(cipher) {\n    assert(cipher, 'Missing cipher text');\n    // Convert data into word arrays (used by Crypto)\n    let cipher_array = encHex.parse(cipher);\n    let plainwords = this._decrypt_word_array(cipher_array);\n    let plainhex = encHex.stringify(plainwords);\n    return Buffer.from(plainhex, 'hex');\n  }\n\n  /** This method does not use a checksum, the returned data must be validated some other way.\n        @arg {string} cipher - hex\n        @arg {string} [encoding = 'binary'] - a valid Buffer encoding\n        @return {String} encoded as specified by the parameter\n    */\n  decryptHexToText(cipher, encoding = 'binary') {\n    return this.decryptHexToBuffer(cipher).toString(encoding);\n  }\n\n  /** This method does not use a checksum, the returned data must be validated some other way.\n        @arg {string} plainhex - hex format\n        @return {String} hex\n    */\n  encryptHex(plainhex) {\n    let plain_array = encHex.parse(plainhex);\n    let cipher_array = this._encrypt_word_array(plain_array);\n    return encHex.stringify(cipher_array);\n  }\n}\n\nexport default Aes;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/ecc/src/aes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 433,
    "kind": "class",
    "name": "Aes",
    "memberof": "lib/ecc/src/aes.js",
    "static": true,
    "longname": "lib/ecc/src/aes.js~Aes",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ecc/src/aes.js",
    "importStyle": "Aes",
    "description": "Provides symetric encrypt and decrypt via AES.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 434,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/ecc/src/aes.js~Aes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/aes.js~Aes#constructor",
    "access": "private",
    "description": null,
    "lineNumber": 11
  },
  {
    "__docId__": 435,
    "kind": "member",
    "name": "iv",
    "memberof": "lib/ecc/src/aes.js~Aes",
    "static": false,
    "longname": "lib/ecc/src/aes.js~Aes#iv",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 436,
    "kind": "member",
    "name": "key",
    "memberof": "lib/ecc/src/aes.js~Aes",
    "static": false,
    "longname": "lib/ecc/src/aes.js~Aes#key",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "clear",
    "memberof": "lib/ecc/src/aes.js~Aes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/aes.js~Aes#clear",
    "access": "public",
    "description": "This is an excellent way to ensure that all references to Aes can not operate anymore\n(example: a wallet becomes locked).  An application should ensure there is only one\nAes object instance for a given secret `seed`.",
    "lineNumber": 19,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 440,
    "kind": "method",
    "name": "fromSeed",
    "memberof": "lib/ecc/src/aes.js~Aes",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/aes.js~Aes.fromSeed",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{string} seed - secret seed may be used to encrypt or decrypt."
      }
    ],
    "params": [
      {
        "name": "seed",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 441,
    "kind": "method",
    "name": "fromSha512",
    "memberof": "lib/ecc/src/aes.js~Aes",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/aes.js~Aes.fromSha512",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{string} hash - A 128 byte hex string, typically one\nwould call {@link fromSeed} instead."
      }
    ],
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "fromBuffer",
    "memberof": "lib/ecc/src/aes.js~Aes",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/aes.js~Aes.fromBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "buf",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "decrypt_with_checksum",
    "memberof": "lib/ecc/src/aes.js~Aes",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/aes.js~Aes.decrypt_with_checksum",
    "access": "public",
    "description": "",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{PrivateKey} private_key - required and used for decryption"
      },
      {
        "tagName": "@arg",
        "tagValue": "{PublicKey} public_key - required and used to calcualte the shared secret"
      },
      {
        "tagName": "@arg",
        "tagValue": "{string} [nonce = \"\"] optional but should always be provided and be unique\nwhen re-using the same private/public keys more than once.  This nonce is not a secret."
      },
      {
        "tagName": "@arg",
        "tagValue": "{string|Buffer} message - Encrypted message containing a checksum"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "\"Invalid Key, ...\""
      }
    ],
    "params": [
      {
        "name": "private_key",
        "types": [
          "*"
        ]
      },
      {
        "name": "public_key",
        "types": [
          "*"
        ]
      },
      {
        "name": "nonce",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "legacy",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ]
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "encrypt_with_checksum",
    "memberof": "lib/ecc/src/aes.js~Aes",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/aes.js~Aes.encrypt_with_checksum",
    "access": "public",
    "description": "Identical to {@link decrypt_with_checksum} but used to encrypt.  Should not throw an error.",
    "lineNumber": 125,
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "message - Encrypted message which includes a checksum"
    },
    "params": [
      {
        "name": "private_key",
        "types": [
          "*"
        ]
      },
      {
        "name": "public_key",
        "types": [
          "*"
        ]
      },
      {
        "name": "nonce",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "_decrypt_word_array",
    "memberof": "lib/ecc/src/aes.js~Aes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/aes.js~Aes#_decrypt_word_array",
    "access": "private",
    "description": null,
    "lineNumber": 163,
    "params": [
      {
        "name": "cipher",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "_encrypt_word_array",
    "memberof": "lib/ecc/src/aes.js~Aes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/aes.js~Aes#_encrypt_word_array",
    "access": "private",
    "description": null,
    "lineNumber": 170,
    "params": [
      {
        "name": "plaintext",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "decrypt",
    "memberof": "lib/ecc/src/aes.js~Aes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/aes.js~Aes#decrypt",
    "access": "public",
    "description": "This method does not use a checksum, the returned data must be validated some other way.",
    "lineNumber": 180,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{string} ciphertext"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "binary"
    },
    "params": [
      {
        "name": "ciphertext",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "encrypt",
    "memberof": "lib/ecc/src/aes.js~Aes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/aes.js~Aes#encrypt",
    "access": "public",
    "description": "This method does not use a checksum, the returned data must be validated some other way.",
    "lineNumber": 199,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{string} plaintext"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "binary"
    },
    "params": [
      {
        "name": "plaintext",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "encryptToHex",
    "memberof": "lib/ecc/src/aes.js~Aes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/aes.js~Aes#encryptToHex",
    "access": "public",
    "description": "This method does not use a checksum, the returned data must be validated some other way.",
    "lineNumber": 218,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{string|Buffer} plaintext"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "hex"
    },
    "params": [
      {
        "name": "plaintext",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "decryptHex",
    "memberof": "lib/ecc/src/aes.js~Aes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/aes.js~Aes#decryptHex",
    "access": "public",
    "description": "This method does not use a checksum, the returned data must be validated some other way.",
    "lineNumber": 236,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{string} cipher - hex"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "binary (could easily be readable text)"
    },
    "params": [
      {
        "name": "cipher",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "decryptHexToBuffer",
    "memberof": "lib/ecc/src/aes.js~Aes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/aes.js~Aes#decryptHexToBuffer",
    "access": "public",
    "description": "This method does not use a checksum, the returned data must be validated some other way.",
    "lineNumber": 248,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{string} cipher - hex"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "encoded as specified by the parameter"
    },
    "params": [
      {
        "name": "cipher",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "decryptHexToText",
    "memberof": "lib/ecc/src/aes.js~Aes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/aes.js~Aes#decryptHexToText",
    "access": "public",
    "description": "This method does not use a checksum, the returned data must be validated some other way.",
    "lineNumber": 262,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{string} cipher - hex"
      },
      {
        "tagName": "@arg",
        "tagValue": "{string} [encoding = 'binary'] - a valid Buffer encoding"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "encoded as specified by the parameter"
    },
    "params": [
      {
        "name": "cipher",
        "types": [
          "*"
        ]
      },
      {
        "name": "encoding",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "binary",
        "defaultValue": "binary"
      }
    ]
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "encryptHex",
    "memberof": "lib/ecc/src/aes.js~Aes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/aes.js~Aes#encryptHex",
    "access": "public",
    "description": "This method does not use a checksum, the returned data must be validated some other way.",
    "lineNumber": 270,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{string} plainhex - hex format"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "hex"
    },
    "params": [
      {
        "name": "plainhex",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 454,
    "kind": "file",
    "name": "lib/ecc/src/ecdsa.js",
    "content": "import assert from 'assert';\n// from github.com/bitcoinjs/bitcoinjs-lib from github.com/cryptocoinjs/ecdsa\nimport BigInteger from 'bigi';\nimport {sha256, HmacSHA256} from './hash';\nimport enforceType from './enforce_types';\n\nimport ECSignature from './ecsignature';\n\n// https://tools.ietf.org/html/rfc6979#section-3.2\nfunction deterministicGenerateK(curve, hash, d, checkSig, nonce) {\n  enforceType('Buffer', hash);\n  enforceType(BigInteger, d);\n\n  if (nonce) {\n    hash = sha256(Buffer.concat([hash, Buffer.alloc(nonce)]));\n  }\n\n  // sanity check\n  assert.equal(hash.length, 32, 'Hash must be 256 bit');\n\n  let x = d.toBuffer(32);\n  let k = Buffer.alloc(32);\n  let v = Buffer.alloc(32);\n\n  // Step B\n  v.fill(1);\n\n  // Step C\n  k.fill(0);\n\n  // Step D\n  k = HmacSHA256(Buffer.concat([v, Buffer.from([0]), x, hash]), k);\n\n  // Step E\n  v = HmacSHA256(v, k);\n\n  // Step F\n  k = HmacSHA256(Buffer.concat([v, Buffer.from([1]), x, hash]), k);\n\n  // Step G\n  v = HmacSHA256(v, k);\n\n  // Step H1/H2a, ignored as tlen === qlen (256 bit)\n  // Step H2b\n  v = HmacSHA256(v, k);\n\n  let T = BigInteger.fromBuffer(v);\n\n  // Step H3, repeat until T is within the interval [1, n - 1]\n  while (T.signum() <= 0 || T.compareTo(curve.n) >= 0 || !checkSig(T)) {\n    k = HmacSHA256(Buffer.concat([v, Buffer.from([0])]), k);\n    v = HmacSHA256(v, k);\n\n    // Step H1/H2a, again, ignored as tlen === qlen (256 bit)\n    // Step H2b again\n    v = HmacSHA256(v, k);\n\n    T = BigInteger.fromBuffer(v);\n  }\n\n  return T;\n}\n\nfunction sign(curve, hash, d, nonce) {\n  let e = BigInteger.fromBuffer(hash);\n  let n = curve.n;\n  let G = curve.G;\n\n  let r;\n  let s;\n\n  deterministicGenerateK(\n    curve,\n    hash,\n    d,\n    (key) => {\n      // find canonically valid signature\n      let Q = G.multiply(key);\n\n      if (curve.isInfinity(Q)) {\n        return false;\n      }\n\n      r = Q.affineX.mod(n);\n\n      if (r.signum() === 0) {\n        return false;\n      }\n\n      s = key\n        .modInverse(n)\n        .multiply(e.add(d.multiply(r)))\n        .mod(n);\n\n      if (s.signum() === 0) {\n        return false;\n      }\n\n      return true;\n    },\n    nonce\n  );\n\n  let N_OVER_TWO = n.shiftRight(1);\n\n  // enforce low S values, see bip62: 'low s values in signatures'\n  if (s.compareTo(N_OVER_TWO) > 0) {\n    s = n.subtract(s);\n  }\n\n  return new ECSignature(r, s);\n}\n\nfunction verifyRaw(curve, e, signature, Q) {\n  let n = curve.n;\n  let G = curve.G;\n\n  let r = signature.r;\n  let s = signature.s;\n\n  // 1.4.1 Enforce r and s are both integers in the interval [1, n − 1]\n  if (r.signum() <= 0 || r.compareTo(n) >= 0) {\n    return false;\n  }\n\n  if (s.signum() <= 0 || s.compareTo(n) >= 0) {\n    return false;\n  }\n\n  // c = s^-1 mod n\n  let c = s.modInverse(n);\n\n  // 1.4.4 Compute u1 = es^−1 mod n\n  //               u2 = rs^−1 mod n\n  let u1 = e.multiply(c).mod(n);\n  let u2 = r.multiply(c).mod(n);\n\n  // 1.4.5 Compute R = (xR, yR) = u1G + u2Q\n  let R = G.multiplyTwo(u1, Q, u2);\n\n  // 1.4.5 (cont.) Enforce R is not at infinity\n  if (curve.isInfinity(R)) {\n    return false;\n  }\n\n  // 1.4.6 Convert the field element R.x to an integer\n  let xR = R.affineX;\n\n  // 1.4.7 Set v = xR mod n\n  let v = xR.mod(n);\n\n  // 1.4.8 If v = r, output \"valid\", and if v != r, output \"invalid\"\n  return v.equals(r);\n}\n\nfunction verify(curve, hash, signature, Q) {\n  // 1.4.2 H = Hash(M), already done by the user\n  // 1.4.3 e = H\n  let e = BigInteger.fromBuffer(hash);\n  return verifyRaw(curve, e, signature, Q);\n}\n\n/**\n * Recover a public key from a signature.\n *\n * See SEC 1: Elliptic Curve Cryptography, section 4.1.6, \"Public\n * Key Recovery Operation\".\n *\n * http://www.secg.org/download/aid-780/sec1-v2.pdf\n */\nfunction recoverPubKey(curve, e, signature, i) {\n  assert.strictEqual(i & 3, i, 'Recovery param is more than two bits'); // eslint-disable-line\n\n  let n = curve.n;\n  let G = curve.G;\n\n  let r = signature.r;\n  let s = signature.s;\n\n  assert(r.signum() > 0 && r.compareTo(n) < 0, 'Invalid r value');\n  assert(s.signum() > 0 && s.compareTo(n) < 0, 'Invalid s value');\n\n  // A set LSB signifies that the y-coordinate is odd\n  let isYOdd = i & 1; // eslint-disable-line\n\n  // The more significant bit specifies whether we should use the\n  // first or second candidate key.\n  let isSecondKey = i >> 1; // eslint-disable-line\n\n  // 1.1 Let x = r + jn\n  let x = isSecondKey ? r.add(n) : r;\n  let R = curve.pointFromX(isYOdd, x);\n\n  // 1.4 Check that nR is at infinity\n  let nR = R.multiply(n);\n  assert(curve.isInfinity(nR), 'nR is not a valid curve point');\n\n  // Compute -e from e\n  let eNeg = e.negate().mod(n);\n\n  // 1.6.1 Compute Q = r^-1 (sR -  eG)\n  //               Q = r^-1 (sR + -eG)\n  let rInv = r.modInverse(n);\n\n  let Q = R.multiplyTwo(s, G, eNeg).multiply(rInv);\n  curve.validate(Q);\n\n  return Q;\n}\n\n/**\n * Calculate pubkey extraction parameter.\n *\n * When extracting a pubkey from a signature, we have to\n * distinguish four different cases. Rather than putting this\n * burden on the verifier, Bitcoin includes a 2-bit value with the\n * signature.\n *\n * This function simply tries all four cases and returns the value\n * that resulted in a successful pubkey recovery.\n */\nfunction calcPubKeyRecoveryParam(curve, e, signature, Q) {\n  for (let i = 0; i < 4; i++) {\n    let Qprime = recoverPubKey(curve, e, signature, i);\n\n    // 1.6.2 Verify Q\n    if (Qprime.equals(Q)) {\n      return i;\n    }\n  }\n\n  throw new Error('Unable to find valid recovery factor');\n}\n\nexport {\n  calcPubKeyRecoveryParam, deterministicGenerateK, recoverPubKey, sign, verify, verifyRaw\n};\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/ecc/src/ecdsa.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 455,
    "kind": "function",
    "name": "calcPubKeyRecoveryParam",
    "memberof": "lib/ecc/src/ecdsa.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/ecdsa.js~calcPubKeyRecoveryParam",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ecc/src/ecdsa.js",
    "importStyle": "{calcPubKeyRecoveryParam}",
    "description": "Calculate pubkey extraction parameter.\n\nWhen extracting a pubkey from a signature, we have to\ndistinguish four different cases. Rather than putting this\nburden on the verifier, Bitcoin includes a 2-bit value with the\nsignature.\n\nThis function simply tries all four cases and returns the value\nthat resulted in a successful pubkey recovery.",
    "lineNumber": 222,
    "params": [
      {
        "name": "curve",
        "types": [
          "*"
        ]
      },
      {
        "name": "e",
        "types": [
          "*"
        ]
      },
      {
        "name": "signature",
        "types": [
          "*"
        ]
      },
      {
        "name": "Q",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 456,
    "kind": "function",
    "name": "deterministicGenerateK",
    "memberof": "lib/ecc/src/ecdsa.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/ecdsa.js~deterministicGenerateK",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ecc/src/ecdsa.js",
    "importStyle": "{deterministicGenerateK}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "curve",
        "types": [
          "*"
        ]
      },
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "d",
        "types": [
          "*"
        ]
      },
      {
        "name": "checkSig",
        "types": [
          "*"
        ]
      },
      {
        "name": "nonce",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 457,
    "kind": "function",
    "name": "recoverPubKey",
    "memberof": "lib/ecc/src/ecdsa.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/ecdsa.js~recoverPubKey",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ecc/src/ecdsa.js",
    "importStyle": "{recoverPubKey}",
    "description": "Recover a public key from a signature.\n\nSee SEC 1: Elliptic Curve Cryptography, section 4.1.6, \"Public\nKey Recovery Operation\".\n\nhttp://www.secg.org/download/aid-780/sec1-v2.pdf",
    "lineNumber": 171,
    "params": [
      {
        "name": "curve",
        "types": [
          "*"
        ]
      },
      {
        "name": "e",
        "types": [
          "*"
        ]
      },
      {
        "name": "signature",
        "types": [
          "*"
        ]
      },
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 458,
    "kind": "function",
    "name": "sign",
    "memberof": "lib/ecc/src/ecdsa.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/ecdsa.js~sign",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ecc/src/ecdsa.js",
    "importStyle": "{sign}",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "curve",
        "types": [
          "*"
        ]
      },
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "d",
        "types": [
          "*"
        ]
      },
      {
        "name": "nonce",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 459,
    "kind": "function",
    "name": "verify",
    "memberof": "lib/ecc/src/ecdsa.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/ecdsa.js~verify",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ecc/src/ecdsa.js",
    "importStyle": "{verify}",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [
      {
        "name": "curve",
        "types": [
          "*"
        ]
      },
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "signature",
        "types": [
          "*"
        ]
      },
      {
        "name": "Q",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 460,
    "kind": "function",
    "name": "verifyRaw",
    "memberof": "lib/ecc/src/ecdsa.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/ecdsa.js~verifyRaw",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ecc/src/ecdsa.js",
    "importStyle": "{verifyRaw}",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "params": [
      {
        "name": "curve",
        "types": [
          "*"
        ]
      },
      {
        "name": "e",
        "types": [
          "*"
        ]
      },
      {
        "name": "signature",
        "types": [
          "*"
        ]
      },
      {
        "name": "Q",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 461,
    "kind": "file",
    "name": "lib/ecc/src/ecsignature.js",
    "content": "/* eslint no-bitwise: \"off\" */\nimport assert from 'assert'; // from https://github.com/bitcoinjs/bitcoinjs-lib\nimport BigInteger from 'bigi';\nimport enforceType from './enforce_types';\n\n\nfunction ECSignature(r, s) {\n  enforceType(BigInteger, r);\n  enforceType(BigInteger, s);\n\n  this.r = r;\n  this.s = s;\n}\n\n// Import operations\nECSignature.parseCompact = (buffer) => {\n  assert.equal(buffer.length, 65, 'Invalid signature length');\n  let i = buffer.readUInt8(0) - 27;\n\n  // At most 3 bits\n  assert.equal(i, i & 7, 'Invalid signature parameter');\n  let compressed = !!(i & 4);\n\n  // Recovery param only\n  i &= 3;\n\n  let r = BigInteger.fromBuffer(buffer.slice(1, 33));\n  let s = BigInteger.fromBuffer(buffer.slice(33));\n\n  return {\n    compressed,\n    i,\n    signature: new ECSignature(r, s)\n  };\n};\n\nECSignature.fromDER = (buffer) => {\n  assert.equal(buffer.readUInt8(0), 0x30, 'Not a DER sequence');\n  assert.equal(buffer.readUInt8(1), buffer.length - 2, 'Invalid sequence length');\n  assert.equal(buffer.readUInt8(2), 0x02, 'Expected a DER integer');\n\n  let rLen = buffer.readUInt8(3);\n  assert(rLen > 0, 'R length is zero');\n\n  let offset = 4 + rLen;\n  assert.equal(buffer.readUInt8(offset), 0x02, 'Expected a DER integer (2)');\n\n  let sLen = buffer.readUInt8(offset + 1);\n  assert(sLen > 0, 'S length is zero');\n\n  let rB = buffer.slice(4, offset);\n  let sB = buffer.slice(offset + 2);\n  offset += 2 + sLen;\n\n  if (rLen > 1 && rB.readUInt8(0) === 0x00) {\n    assert(rB.readUInt8(1) & 0x80, 'R value excessively padded');\n  }\n\n  if (sLen > 1 && sB.readUInt8(0) === 0x00) {\n    assert(sB.readUInt8(1) & 0x80, 'S value excessively padded');\n  }\n\n  assert.equal(offset, buffer.length, 'Invalid DER encoding');\n  let r = BigInteger.fromDERInteger(rB);\n  let s = BigInteger.fromDERInteger(sB);\n\n  assert(r.signum() >= 0, 'R value is negative');\n  assert(s.signum() >= 0, 'S value is negative');\n\n  return new ECSignature(r, s);\n};\n\n// FIXME: 0x00, 0x04, 0x80 are SIGHASH_* boundary constants,\n// importing Transaction causes a circular dependency\nECSignature.parseScriptSignature = (buffer) => {\n  let hashType = buffer.readUInt8(buffer.length - 1);\n  let hashTypeMod = hashType & ~0x80;\n\n  assert(hashTypeMod > 0x00 && hashTypeMod < 0x04, 'Invalid hashType');\n\n  return {\n    signature: ECSignature.fromDER(buffer.slice(0, -1)),\n    hashType\n  };\n};\n\n// Export operations\nECSignature.prototype.toCompact = function toCompact(i, compressed) {\n  if (compressed) {\n    i += 4;\n  }\n\n  i += 27;\n\n  let buffer = Buffer.alloc(65);\n  buffer.writeUInt8(i, 0);\n\n  this.r.toBuffer(32).copy(buffer, 1);\n  this.s.toBuffer(32).copy(buffer, 33);\n\n  return buffer;\n};\n\nECSignature.prototype.toDER = function toDER() {\n  let rBa = this.r.toDERInteger();\n  let sBa = this.s.toDERInteger();\n\n  let sequence = [];\n\n  // INTEGER\n  sequence.push(0x02, rBa.length);\n  sequence = sequence.concat(rBa);\n\n  // INTEGER\n  sequence.push(0x02, sBa.length);\n  sequence = sequence.concat(sBa);\n\n  // SEQUENCE\n  sequence.unshift(0x30, sequence.length);\n\n  return Buffer.from(sequence);\n};\n\nECSignature.prototype.toScriptSignature = function toScriptSignature(hashType) {\n  let hashTypeBuffer = Buffer.alloc(1);\n  hashTypeBuffer.writeUInt8(hashType, 0);\n\n  return Buffer.concat([this.toDER(), hashTypeBuffer]);\n};\n\nexport default ECSignature;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/ecc/src/ecsignature.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 462,
    "kind": "function",
    "name": "toCompact",
    "memberof": "lib/ecc/src/ecsignature.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/ecsignature.js~toCompact",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ecc/src/ecsignature.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "compressed",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 463,
    "kind": "function",
    "name": "toDER",
    "memberof": "lib/ecc/src/ecsignature.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/ecsignature.js~toDER",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ecc/src/ecsignature.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 464,
    "kind": "function",
    "name": "toScriptSignature",
    "memberof": "lib/ecc/src/ecsignature.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/ecsignature.js~toScriptSignature",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ecc/src/ecsignature.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [
      {
        "name": "hashType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 465,
    "kind": "function",
    "name": "ECSignature",
    "memberof": "lib/ecc/src/ecsignature.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/ecsignature.js~ECSignature",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ecc/src/ecsignature.js",
    "importStyle": "ECSignature",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "r",
        "types": [
          "*"
        ]
      },
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 466,
    "kind": "file",
    "name": "lib/ecc/src/enforce_types.js",
    "content": "\nfunction getName(fn) {\n  // Why not fn.name: https://kangax.github.io/compat-table/es6/#function_name_property\n  let match = fn.toString().match(/function (.*?)\\(/);\n  return match ? match[1] : null;\n}\n\nexport default function enforce(type, value) {\n  // Copied from https://github.com/bitcoinjs/bitcoinjs-lib\n  switch (type) {\n    case 'Array': {\n      if (Array.isArray(value)) {\n        return;\n      }\n\n      break;\n    }\n\n    case 'Boolean': {\n      if (typeof value === 'boolean') {\n        return;\n      }\n\n      break;\n    }\n\n    case 'Buffer': {\n      if (Buffer.isBuffer(value)) {\n        return;\n      }\n\n      break;\n    }\n\n    case 'Number': {\n      if (typeof value === 'number') {\n        return;\n      }\n\n      break;\n    }\n\n    case 'String': {\n      if (typeof value === 'string') {\n        return;\n      }\n\n      break;\n    }\n\n    default: {\n      if (getName(value.constructor) === getName(type)) {\n        return;\n      }\n    }\n  }\n\n  throw new TypeError(`Expected ${getName(type) || type}, got ${value}`);\n}\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/ecc/src/enforce_types.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 467,
    "kind": "function",
    "name": "getName",
    "memberof": "lib/ecc/src/enforce_types.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/enforce_types.js~getName",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ecc/src/enforce_types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 468,
    "kind": "function",
    "name": "enforce",
    "memberof": "lib/ecc/src/enforce_types.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/enforce_types.js~enforce",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ecc/src/enforce_types.js",
    "importStyle": "enforce",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 469,
    "kind": "file",
    "name": "lib/ecc/src/hash.js",
    "content": "import createHash from 'create-hash';\nimport createHmac from 'create-hmac';\n\n/** @arg {string|Buffer} data\n    @arg {string} [digest = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when digest is null, or string\n*/\nfunction sha1(data, encoding) {\n  return createHash('sha1')\n    .update(data)\n    .digest(encoding);\n}\n\n/** @arg {string|Buffer} data\n    @arg {string} [digest = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when digest is null, or string\n*/\nfunction sha256(data, encoding) {\n  return createHash('sha256')\n    .update(data)\n    .digest(encoding);\n}\n\n/** @arg {string|Buffer} data\n    @arg {string} [digest = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when digest is null, or string\n*/\nfunction sha512(data, encoding) {\n  return createHash('sha512')\n    .update(data)\n    .digest(encoding);\n}\n\nfunction HmacSHA256(buffer, secret) {\n  return createHmac('sha256', secret)\n    .update(buffer)\n    .digest();\n}\n\nfunction ripemd160(data) {\n  return createHash('rmd160')\n    .update(data)\n    .digest();\n}\n\n// function hash160(buffer) {\n//   return ripemd160(sha256(buffer))\n// }\n//\n// function hash256(buffer) {\n//   return sha256(sha256(buffer))\n// }\n\n//\n// function HmacSHA512(buffer, secret) {\n//   return crypto.createHmac('sha512', secret).update(buffer).digest()\n// }\n\nexport {\n  sha1, sha256, sha512, HmacSHA256, ripemd160\n};\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/ecc/src/hash.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 470,
    "kind": "function",
    "name": "sha1",
    "memberof": "lib/ecc/src/hash.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/hash.js~sha1",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ecc/src/hash.js",
    "importStyle": "{sha1}",
    "description": null,
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{string|Buffer} data"
      },
      {
        "tagName": "@arg",
        "tagValue": "{string} [digest = null] - 'hex', 'binary' or 'base64'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "Buffer"
      ],
      "spread": false,
      "description": "Buffer when digest is null, or string"
    },
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "encoding",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 471,
    "kind": "function",
    "name": "sha256",
    "memberof": "lib/ecc/src/hash.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/hash.js~sha256",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ecc/src/hash.js",
    "importStyle": "{sha256}",
    "description": null,
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{string|Buffer} data"
      },
      {
        "tagName": "@arg",
        "tagValue": "{string} [digest = null] - 'hex', 'binary' or 'base64'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "Buffer"
      ],
      "spread": false,
      "description": "Buffer when digest is null, or string"
    },
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "encoding",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 472,
    "kind": "function",
    "name": "sha512",
    "memberof": "lib/ecc/src/hash.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/hash.js~sha512",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ecc/src/hash.js",
    "importStyle": "{sha512}",
    "description": null,
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{string|Buffer} data"
      },
      {
        "tagName": "@arg",
        "tagValue": "{string} [digest = null] - 'hex', 'binary' or 'base64'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "Buffer"
      ],
      "spread": false,
      "description": "Buffer when digest is null, or string"
    },
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "encoding",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 473,
    "kind": "function",
    "name": "HmacSHA256",
    "memberof": "lib/ecc/src/hash.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/hash.js~HmacSHA256",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ecc/src/hash.js",
    "importStyle": "{HmacSHA256}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      },
      {
        "name": "secret",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 474,
    "kind": "function",
    "name": "ripemd160",
    "memberof": "lib/ecc/src/hash.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/hash.js~ripemd160",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ecc/src/hash.js",
    "importStyle": "{ripemd160}",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 475,
    "kind": "file",
    "name": "lib/ecc/src/signature.js",
    "content": "/* global ByteBuffer */\nimport {getCurveByName} from 'ecurve';\nimport assert from 'assert';\nimport BigInteger from 'bigi';\nimport {sha256} from './hash';\nimport {\n  sign, recoverPubKey, verify, calcPubKeyRecoveryParam\n} from './ecdsa';\nimport PublicKey from './PublicKey';\n\nlet secp256k1 = getCurveByName('secp256k1');\n\nclass Signature {\n  constructor(r1, s1, i1) {\n    this.r = r1;\n    this.s = s1;\n    this.i = i1;\n    assert.equal(this.r != null, true, 'Missing parameter');\n    assert.equal(this.s != null, true, 'Missing parameter');\n    assert.equal(this.i != null, true, 'Missing parameter');\n  }\n\n  static fromBuffer(buf) {\n    let i;\n    let r;\n    let s;\n    assert.equal(buf.length, 65, 'Invalid signature length');\n    i = buf.readUInt8(0);\n    assert.equal(i - 27, (i - 27) & 7, 'Invalid signature parameter'); // eslint-disable-line\n    r = BigInteger.fromBuffer(buf.slice(1, 33));\n    s = BigInteger.fromBuffer(buf.slice(33));\n    return new Signature(r, s, i);\n  }\n\n  toBuffer() {\n    let buf;\n    buf = Buffer.alloc(65);\n    buf.writeUInt8(this.i, 0);\n    this.r.toBuffer(32).copy(buf, 1);\n    this.s.toBuffer(32).copy(buf, 33);\n    return buf;\n  }\n\n  recoverPublicKeyFromBuffer(buffer) {\n    return this.recoverPublicKey(sha256(buffer));\n  }\n\n  /**\n        @return {PublicKey}\n    */\n  recoverPublicKey(sha256_buffer) {\n    let Q;\n    let e;\n    let i;\n    e = BigInteger.fromBuffer(sha256_buffer);\n    i = this.i;\n    i -= 27;\n    i &= 3; // eslint-disable-line\n    Q = recoverPubKey(secp256k1, e, this, i);\n    return PublicKey.fromPoint(Q);\n  }\n\n  /**\n        @param {Buffer} buf\n        @param {PrivateKey} private_key\n        @return {Signature}\n    */\n  static signBuffer(buf, private_key) {\n    let _hash = sha256(buf);\n    return Signature.signBufferSha256(_hash, private_key);\n  }\n\n  /** Sign a buffer of exactally 32 bytes in size (sha256(text))\n        @param {Buffer} buf - 32 bytes binary\n        @param {PrivateKey} private_key\n        @return {Signature}\n    */\n  static signBufferSha256(buf_sha256, private_key) {\n    if (buf_sha256.length !== 32 || !Buffer.isBuffer(buf_sha256)) {\n      throw new Error('buf_sha256: 32 byte buffer requred');\n    }\n\n    let der;\n    let e;\n    let ecsignature;\n    let i;\n    let lenR;\n    let lenS;\n    let nonce;\n    i = null;\n    nonce = 0;\n    e = BigInteger.fromBuffer(buf_sha256);\n\n    let loop = true;\n\n    while (loop) {\n      ecsignature = sign(secp256k1, buf_sha256, private_key.d, nonce++);\n      der = ecsignature.toDER();\n      lenR = der[3];\n      lenS = der[5 + lenR];\n\n      if (lenR === 32 && lenS === 32) {\n        i = calcPubKeyRecoveryParam(secp256k1, e, ecsignature, private_key.toPublicKey().Q);\n        i += 4; // compressed\n        i += 27; // compact  //  24 or 27 :( forcing odd-y 2nd key candidate)\n        loop = false;\n        break;\n      }\n\n      if (nonce % 10 === 0) {\n        console.log(`WARN: ${nonce} attempts to find canonical signature`);\n      }\n    }\n\n    return new Signature(ecsignature.r, ecsignature.s, i);\n  }\n\n  static sign(string, private_key) {\n    return Signature.signBuffer(Buffer.from(string), private_key);\n  }\n\n  /**\n        @param {Buffer} un-hashed\n        @param {./PublicKey}\n        @return {boolean}\n    */\n  verifyBuffer(buf, public_key) {\n    let _hash = sha256(buf);\n    return this.verifyHash(_hash, public_key);\n  }\n\n  verifyHash(hash, public_key) {\n    assert.equal(hash.length, 32, `A SHA 256 should be 32 bytes long, instead got ${hash.length}`);\n    return verify(\n      secp256k1,\n      hash,\n      {\n        r: this.r,\n        s: this.s\n      },\n      public_key.Q\n    );\n  }\n\n  /* <HEX> */\n\n  toByteBuffer() {\n    let b;\n    b = new ByteBuffer(ByteBuffer.DEFAULT_CAPACITY, ByteBuffer.LITTLE_ENDIAN);\n    this.appendByteBuffer(b);\n    return b.copy(0, b.offset);\n  }\n\n  static fromHex(hex) {\n    return Signature.fromBuffer(Buffer.from(hex, 'hex'));\n  }\n\n  toHex() {\n    return this.toBuffer().toString('hex');\n  }\n\n  static signHex(hex, private_key) {\n    let buf;\n    buf = Buffer.from(hex, 'hex');\n    return Signature.signBuffer(buf, private_key);\n  }\n\n  verifyHex(hex, public_key) {\n    let buf;\n    buf = Buffer.from(hex, 'hex');\n    return this.verifyBuffer(buf, public_key);\n  }\n}\n\nexport default Signature;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/ecc/src/signature.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 476,
    "kind": "variable",
    "name": "secp256k1",
    "memberof": "lib/ecc/src/signature.js",
    "static": true,
    "longname": "lib/ecc/src/signature.js~secp256k1",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ecc/src/signature.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 477,
    "kind": "class",
    "name": "Signature",
    "memberof": "lib/ecc/src/signature.js",
    "static": true,
    "longname": "lib/ecc/src/signature.js~Signature",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ecc/src/signature.js",
    "importStyle": "Signature",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 478,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/ecc/src/signature.js~Signature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/signature.js~Signature#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 479,
    "kind": "member",
    "name": "r",
    "memberof": "lib/ecc/src/signature.js~Signature",
    "static": false,
    "longname": "lib/ecc/src/signature.js~Signature#r",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 480,
    "kind": "member",
    "name": "s",
    "memberof": "lib/ecc/src/signature.js~Signature",
    "static": false,
    "longname": "lib/ecc/src/signature.js~Signature#s",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 481,
    "kind": "member",
    "name": "i",
    "memberof": "lib/ecc/src/signature.js~Signature",
    "static": false,
    "longname": "lib/ecc/src/signature.js~Signature#i",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 482,
    "kind": "method",
    "name": "fromBuffer",
    "memberof": "lib/ecc/src/signature.js~Signature",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/signature.js~Signature.fromBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "buf",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 483,
    "kind": "method",
    "name": "toBuffer",
    "memberof": "lib/ecc/src/signature.js~Signature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/signature.js~Signature#toBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 484,
    "kind": "method",
    "name": "recoverPublicKeyFromBuffer",
    "memberof": "lib/ecc/src/signature.js~Signature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/signature.js~Signature#recoverPublicKeyFromBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 485,
    "kind": "method",
    "name": "recoverPublicKey",
    "memberof": "lib/ecc/src/signature.js~Signature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/signature.js~Signature#recoverPublicKey",
    "access": "public",
    "description": "",
    "lineNumber": 51,
    "return": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "sha256_buffer",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 486,
    "kind": "method",
    "name": "signBuffer",
    "memberof": "lib/ecc/src/signature.js~Signature",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/signature.js~Signature.signBuffer",
    "access": "public",
    "description": "",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buf",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PrivateKey"
        ],
        "spread": false,
        "optional": false,
        "name": "private_key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Signature"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 487,
    "kind": "method",
    "name": "signBufferSha256",
    "memberof": "lib/ecc/src/signature.js~Signature",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/signature.js~Signature.signBufferSha256",
    "access": "public",
    "description": "Sign a buffer of exactally 32 bytes in size (sha256(text))",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buf",
        "description": "32 bytes binary"
      },
      {
        "nullable": null,
        "types": [
          "PrivateKey"
        ],
        "spread": false,
        "optional": false,
        "name": "private_key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Signature"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 488,
    "kind": "method",
    "name": "sign",
    "memberof": "lib/ecc/src/signature.js~Signature",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/signature.js~Signature.sign",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      },
      {
        "name": "private_key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 489,
    "kind": "method",
    "name": "verifyBuffer",
    "memberof": "lib/ecc/src/signature.js~Signature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/signature.js~Signature#verifyBuffer",
    "access": "public",
    "description": "",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "un-hashed",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 490,
    "kind": "method",
    "name": "verifyHash",
    "memberof": "lib/ecc/src/signature.js~Signature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/signature.js~Signature#verifyHash",
    "access": "public",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "public_key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 491,
    "kind": "method",
    "name": "toByteBuffer",
    "memberof": "lib/ecc/src/signature.js~Signature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/signature.js~Signature#toByteBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "fromHex",
    "memberof": "lib/ecc/src/signature.js~Signature",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/signature.js~Signature.fromHex",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "params": [
      {
        "name": "hex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "toHex",
    "memberof": "lib/ecc/src/signature.js~Signature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/signature.js~Signature#toHex",
    "access": "public",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 494,
    "kind": "method",
    "name": "signHex",
    "memberof": "lib/ecc/src/signature.js~Signature",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ecc/src/signature.js~Signature.signHex",
    "access": "public",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "params": [
      {
        "name": "hex",
        "types": [
          "*"
        ]
      },
      {
        "name": "private_key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 495,
    "kind": "method",
    "name": "verifyHex",
    "memberof": "lib/ecc/src/signature.js~Signature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ecc/src/signature.js~Signature#verifyHex",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "params": [
      {
        "name": "hex",
        "types": [
          "*"
        ]
      },
      {
        "name": "public_key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 496,
    "kind": "file",
    "name": "lib/index.js",
    "content": "/* Serializer */\nimport Serializer from './serializer/src/serializer';\nimport fp from './serializer/src/FastParser';\nimport types from './serializer/src/types';\nimport * as ops from './serializer/src/operations';\nimport template from './serializer/src/template';\nimport SerializerValidation from './serializer/src/SerializerValidation';\n\n/* ECC */\nimport Address from './ecc/src/address';\nimport Aes from './ecc/src/aes';\nimport PrivateKey from './ecc/src/PrivateKey';\nimport PublicKey from './ecc/src/PublicKey';\nimport Signature from './ecc/src/signature';\nimport brainKey from './ecc/src/BrainKey';\nimport * as hash from './ecc/src/hash';\nimport key from './ecc/src/KeyUtils';\n\n/* Chain */\nimport ChainStore from './chain/src/ChainStore';\nimport TransactionBuilder from './chain/src/TransactionBuilder';\nimport ChainTypes from './chain/src/ChainTypes';\nimport ObjectId from './chain/src/ObjectId';\nimport NumberUtils from './chain/src/NumberUtils';\nimport TransactionHelper from './chain/src/TransactionHelper';\nimport ChainValidation from './chain/src/ChainValidation';\nimport EmitterInstance from './chain/src/EmitterInstance';\nimport Login from './chain/src/AccountLogin';\n\n/* Websocket Lib */\nimport Apis from './ws/ApiInstances';\nimport ConnectionManager from './ws/ConnectionManager';\nimport ChainConfig from './ws/ChainConfig';\n\nconst {FetchChainObjects, FetchChain} = ChainStore;\n\nexport {\n  Serializer,\n  fp,\n  types,\n  ops,\n  template,\n  SerializerValidation,\n  Address,\n  Aes,\n  PrivateKey,\n  PublicKey,\n  Signature,\n  brainKey,\n  hash,\n  key,\n  ChainStore,\n  TransactionBuilder,\n  FetchChainObjects,\n  ChainTypes,\n  EmitterInstance,\n  ObjectId,\n  NumberUtils,\n  TransactionHelper,\n  ChainValidation,\n  FetchChain,\n  Login,\n  Apis,\n  ConnectionManager,\n  ChainConfig\n};\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 497,
    "kind": "variable",
    "name": "FetchChainObjects",
    "memberof": "lib/index.js",
    "static": true,
    "longname": "lib/index.js~FetchChainObjects",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 498,
    "kind": "file",
    "name": "lib/serializer/index.js",
    "content": "import Serializer from './src/serializer';\nimport fp from './src/FastParser';\nimport types from './src/types';\nimport * as ops from './src/operations';\nimport template from './src/template';\nimport SerializerValidation from './src/SerializerValidation';\n\nexport {\n  Serializer, fp, types, ops, template, SerializerValidation\n};\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/serializer/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 499,
    "kind": "file",
    "name": "lib/serializer/src/FastParser.js",
    "content": "import PublicKey from '../../ecc/src/PublicKey';\n\nclass FastParser {\n  static fixed_data(b, len, buffer) {\n    if (!b) {\n      return;\n    }\n    if (buffer) {\n      let data = buffer.slice(0, len).toString('binary');\n      b.append(data, 'binary');\n      while (len-- > data.length) {\n        b.writeUint8(0);\n      }\n    } else {\n      let b_copy = b.copy(b.offset, b.offset + len);\n      b.skip(len);\n      return Buffer.from(b_copy.toBinary(), 'binary');\n    }\n  }\n\n  static public_key(b, public_key) {\n    let buffer;\n    if (!b) {\n      return;\n    }\n    if (public_key) {\n      buffer = public_key.toBuffer();\n      b.append(buffer.toString('binary'), 'binary');\n    } else {\n      buffer = FastParser.fixed_data(b, 33);\n      return PublicKey.fromBuffer(buffer);\n    }\n  }\n\n  static ripemd160(b, ripemd160) {\n    if (!b) {\n      return;\n    }\n    if (ripemd160) {\n      FastParser.fixed_data(b, 20, ripemd160);\n    } else {\n      return FastParser.fixed_data(b, 20);\n    }\n  }\n\n  static sha256(b, sha256) {\n    if (!b) {\n      return;\n    }\n    if (sha256) {\n      FastParser.fixed_data(b, 32, sha256);\n    } else {\n      return FastParser.fixed_data(b, 32);\n    }\n  }\n\n  static time_point_sec(b, epoch) {\n    if (epoch) {\n      epoch = Math.ceil(epoch / 1000);\n      b.writeInt32(epoch);\n    } else {\n      epoch = b.readInt32(); // fc::time_point_sec\n      return new Date(epoch * 1000);\n    }\n  }\n}\n\nexport default FastParser;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/serializer/src/FastParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 500,
    "kind": "class",
    "name": "FastParser",
    "memberof": "lib/serializer/src/FastParser.js",
    "static": true,
    "longname": "lib/serializer/src/FastParser.js~FastParser",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/FastParser.js",
    "importStyle": "FastParser",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "fixed_data",
    "memberof": "lib/serializer/src/FastParser.js~FastParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/serializer/src/FastParser.js~FastParser.fixed_data",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "len",
        "types": [
          "*"
        ]
      },
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 502,
    "kind": "method",
    "name": "public_key",
    "memberof": "lib/serializer/src/FastParser.js~FastParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/serializer/src/FastParser.js~FastParser.public_key",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "public_key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 503,
    "kind": "method",
    "name": "ripemd160",
    "memberof": "lib/serializer/src/FastParser.js~FastParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/serializer/src/FastParser.js~FastParser.ripemd160",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "ripemd160",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 504,
    "kind": "method",
    "name": "sha256",
    "memberof": "lib/serializer/src/FastParser.js~FastParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/serializer/src/FastParser.js~FastParser.sha256",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "sha256",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 505,
    "kind": "method",
    "name": "time_point_sec",
    "memberof": "lib/serializer/src/FastParser.js~FastParser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/serializer/src/FastParser.js~FastParser.time_point_sec",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "epoch",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 506,
    "kind": "file",
    "name": "lib/serializer/src/SerializerValidation.js",
    "content": "import {Long} from 'bytebuffer';\nimport ChainTypes from '../../chain/src/ChainTypes';\n\nlet MAX_SAFE_INT = 9007199254740991;\nlet MIN_SAFE_INT = -9007199254740991;\n\n/**\n    Most validations are skipped and the value returned unchanged when an empty string,\n    null, or undefined is encountered (except \"required\").\n    Validations support a string format for dealing with large numbers.\n*/\nconst _my = {\n  is_empty(value) {\n    return value === null || value === undefined;\n  },\n\n  required(value, field_name = '') {\n    if (this.is_empty(value)) {\n      throw new Error(`value required ${field_name} | ${value}`);\n    }\n\n    return value;\n  },\n\n  require_long(value, field_name = '') {\n    if (!Long.isLong(value)) {\n      throw new Error(`Long value required ${field_name} | ${value}`);\n    }\n\n    return value;\n  },\n\n  string(value) {\n    if (this.is_empty(value)) {\n      return value;\n    }\n\n    if (typeof value !== 'string') {\n      throw new Error(`string required: ${value}`);\n    }\n\n    return value;\n  },\n\n  number(value) {\n    if (this.is_empty(value)) {\n      return value;\n    }\n\n    if (typeof value !== 'number') {\n      throw new Error(`number required: ${value}`);\n    }\n\n    return value;\n  },\n\n  whole_number(value, field_name = '') {\n    if (this.is_empty(value)) {\n      return value;\n    }\n\n    if (/\\./.test(value)) {\n      throw new Error(`whole number required ${field_name} ${value}`);\n    }\n\n    return value;\n  },\n\n  unsigned(value, field_name = '') {\n    if (this.is_empty(value)) {\n      return value;\n    }\n\n    if (/-/.test(value)) {\n      throw new Error(`unsigned required ${field_name} ${value}`);\n    }\n\n    return value;\n  },\n\n  is_digits(value) {\n    if (typeof value === 'number') {\n      return true;\n    }\n\n    return /^[0-9]+$/.test(value);\n  },\n\n  to_number(value, field_name = '') {\n    if (this.is_empty(value)) {\n      return value;\n    }\n\n    this.no_overflow53(value, field_name);\n    let int_value = (() => {\n      if (typeof value === 'number') {\n        return value;\n      }\n\n      return parseInt(value, 10);\n    })();\n    return int_value;\n  },\n\n  to_long(value, field_name = '') {\n    if (this.is_empty(value)) {\n      return value;\n    }\n\n    if (Long.isLong(value)) {\n      return value;\n    }\n\n    this.no_overflow64(value, field_name);\n\n    if (typeof value === 'number') {\n      value = `${value}`;\n    }\n\n    return Long.fromString(value);\n  },\n\n  to_ulong(value, field_name = '') {\n    if (this.is_empty(value)) {\n      return value;\n    }\n\n    if (Long.isLong(value)) {\n      return value;\n    }\n\n    this.no_overflow64(value, field_name, true);\n\n    if (typeof value === 'number') {\n      value = `${value}`;\n    }\n\n    return Long.fromString(value, true);\n  },\n\n  to_string(value, field_name = '') {\n    if (this.is_empty(value)) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return value;\n    }\n\n    if (typeof value === 'number') {\n      this.no_overflow53(value, field_name);\n      return `${value}`;\n    }\n\n    if (Long.isLong(value)) {\n      return value.toString();\n    }\n\n    throw new Error(`unsupported type ${field_name}: (${typeof value}) ${value}`);\n  },\n\n  require_test(regex, value, field_name = '') {\n    if (this.is_empty(value)) {\n      return value;\n    }\n\n    if (!regex.test(value)) {\n      throw new Error(`unmatched ${regex} ${field_name} ${value}`);\n    }\n\n    return value;\n  },\n\n  require_match(regex, value, field_name = '') {\n    if (this.is_empty(value)) {\n      return value;\n    }\n\n    let match = value.match(regex);\n\n    if (match === null) {\n      throw new Error(`unmatched ${regex} ${field_name} ${value}`);\n    }\n\n    return match;\n  },\n\n  require_object_id(value, field_name) {\n    return this.require_match(/^([0-9]+)\\.([0-9]+)\\.([0-9]+)$/, value, field_name);\n  },\n\n  // Does not support over 53 bits\n  require_range(min, max, value, field_name = '') {\n    if (this.is_empty(value)) {\n      return value;\n    }\n\n    let num = this.to_number(value);\n\n    if (num < min || num > max) {\n      throw new Error(`out of range ${value} ${field_name} ${value}`);\n    }\n\n    return value;\n  },\n\n  require_object_type(reserved_spaces = 1, type, value, field_name = '') {\n    if (this.is_empty(value)) {\n      return value;\n    }\n\n    let object_type = ChainTypes.object_type[type];\n\n    if (!object_type) {\n      throw new Error(`Unknown object type ${type} ${field_name} ${value}`);\n    }\n\n    let re = new RegExp(`${reserved_spaces}\\.${object_type}\\.[0-9]+$`);\n\n    if (!re.test(value)) {\n      throw new Error(\n        `Expecting ${type} in format `\n          + `${reserved_spaces}.${object_type}.[0-9]+ `\n          + `instead of ${value} ${field_name} ${value}`\n      );\n    }\n\n    return value;\n  },\n\n  get_instance(reserve_spaces, type, value, field_name) {\n    if (this.is_empty(value)) {\n      return value;\n    }\n\n    this.require_object_type(reserve_spaces, type, value, field_name);\n    return this.to_number(value.split('.')[2]);\n  },\n\n  require_relative_type(type, value, field_name) {\n    this.require_object_type(0, type, value, field_name);\n    return value;\n  },\n\n  get_relative_instance(type, value, field_name) {\n    if (this.is_empty(value)) {\n      return value;\n    }\n\n    this.require_object_type(0, type, value, field_name);\n    return this.to_number(value.split('.')[2]);\n  },\n\n  require_protocol_type(type, value, field_name) {\n    this.require_object_type(1, type, value, field_name);\n    return value;\n  },\n\n  get_protocol_instance(type, value, field_name) {\n    if (this.is_empty(value)) {\n      return value;\n    }\n\n    this.require_object_type(1, type, value, field_name);\n    return this.to_number(value.split('.')[2]);\n  },\n\n  get_protocol_type(value, field_name) {\n    if (this.is_empty(value)) {\n      return value;\n    }\n\n    this.require_object_id(value, field_name);\n    let values = value.split('.');\n    return this.to_number(values[1]);\n  },\n\n  get_protocol_type_name(value, field_name) {\n    if (this.is_empty(value)) {\n      return value;\n    }\n\n    let type_id = this.get_protocol_type(value, field_name);\n    return Object.keys(ChainTypes.object_type)[type_id];\n  },\n\n  require_implementation_type(type, value, field_name) {\n    this.require_object_type(2, type, value, field_name);\n    return value;\n  },\n\n  get_implementation_instance(type, value, field_name) {\n    if (this.is_empty(value)) {\n      return value;\n    }\n\n    this.require_object_type(2, type, value, field_name);\n    return this.to_number(value.split('.')[2]);\n  },\n\n  // signed / unsigned decimal\n  no_overflow53(value, field_name = '') {\n    if (typeof value === 'number') {\n      if (value > MAX_SAFE_INT || value < MIN_SAFE_INT) {\n        throw new Error(`overflow ${field_name} ${value}`);\n      }\n\n      return;\n    }\n\n    if (typeof value === 'string') {\n      let int = parseInt(value, 10);\n\n      if (int > MAX_SAFE_INT || int < MIN_SAFE_INT) {\n        throw new Error(`overflow ${field_name} ${int}`);\n      }\n\n      return;\n    }\n\n    if (Long.isLong(value)) {\n      // typeof value.toInt() is 'number'\n      this.no_overflow53(value.toInt(), field_name);\n      return;\n    }\n\n    throw new Error(`unsupported type ${field_name}: (${typeof value}) ${value}`);\n  },\n\n  // signed / unsigned whole numbers only\n  no_overflow64(value, field_name = '', unsigned = false) {\n    // https://github.com/dcodeIO/Long.js/issues/20\n    if (Long.isLong(value)) {\n      return;\n    }\n\n    // BigInteger#isBigInteger https://github.com/cryptocoinjs/bigi/issues/20\n    if (value.t !== undefined && value.s !== undefined) {\n      this.no_overflow64(value.toString(), field_name, unsigned);\n\n      return;\n    }\n\n    if (typeof value === 'string') {\n      // remove leading zeros, will cause a false positive\n      value = value.replace(/^0+/, '');\n\n      // remove trailing zeros\n      while (/0$/.test(value)) {\n        value = value.substring(0, value.length - 1);\n      }\n\n      if (/\\.$/.test(value)) {\n        // remove trailing dot\n        value = value.substring(0, value.length - 1);\n      }\n\n      if (value === '') {\n        value = '0';\n      }\n\n      let long_string = Long.fromString(value, unsigned).toString();\n\n      if (long_string !== value.trim()) {\n        throw new Error(`overflow ${field_name} ${value}`);\n      }\n\n      return;\n    }\n\n    if (typeof value === 'number') {\n      if (value > MAX_SAFE_INT || value < MIN_SAFE_INT) {\n        throw new Error(`overflow ${field_name} ${value}`);\n      }\n\n      return;\n    }\n\n    throw new Error(`unsupported type ${field_name}: (${typeof value}) ${value}`);\n  }\n};\n\nexport default _my;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/serializer/src/SerializerValidation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 507,
    "kind": "variable",
    "name": "MAX_SAFE_INT",
    "memberof": "lib/serializer/src/SerializerValidation.js",
    "static": true,
    "longname": "lib/serializer/src/SerializerValidation.js~MAX_SAFE_INT",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/SerializerValidation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 508,
    "kind": "variable",
    "name": "MIN_SAFE_INT",
    "memberof": "lib/serializer/src/SerializerValidation.js",
    "static": true,
    "longname": "lib/serializer/src/SerializerValidation.js~MIN_SAFE_INT",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/SerializerValidation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 509,
    "kind": "variable",
    "name": "_my",
    "memberof": "lib/serializer/src/SerializerValidation.js",
    "static": true,
    "longname": "lib/serializer/src/SerializerValidation.js~_my",
    "access": "private",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/SerializerValidation.js",
    "importStyle": "_my",
    "description": "Most validations are skipped and the value returned unchanged when an empty string,\nnull, or undefined is encountered (except \"required\").\nValidations support a string format for dealing with large numbers.",
    "lineNumber": 12,
    "type": {
      "types": [
        "{\"is_empty\": function, \"required\": function, \"require_long\": function, \"string\": function, \"number\": function, \"whole_number\": function, \"unsigned\": function, \"is_digits\": function, \"to_number\": function, \"to_long\": function, \"to_ulong\": function, \"to_string\": function, \"require_test\": function, \"require_match\": function, \"require_object_id\": function, \"require_range\": function, \"require_object_type\": function, \"get_instance\": function, \"require_relative_type\": function, \"get_relative_instance\": function, \"require_protocol_type\": function, \"get_protocol_instance\": function, \"get_protocol_type\": function, \"get_protocol_type_name\": function, \"require_implementation_type\": function, \"get_implementation_instance\": function, \"no_overflow53\": function, \"no_overflow64\": function}"
      ]
    }
  },
  {
    "__docId__": 510,
    "kind": "file",
    "name": "lib/serializer/src/convert.js",
    "content": "import ByteBuffer from 'bytebuffer';\n\nfunction toByteBuffer(type, object) {\n  let b = new ByteBuffer(ByteBuffer.DEFAULT_CAPACITY, ByteBuffer.LITTLE_ENDIAN);\n  type.appendByteBuffer(b, object);\n  return b.copy(0, b.offset);\n}\n\nexport default function (type) {\n  return {\n    fromHex(hex) {\n      let b = ByteBuffer.fromHex(hex, ByteBuffer.LITTLE_ENDIAN);\n      return type.fromByteBuffer(b);\n    },\n\n    toHex(object) {\n      let b = toByteBuffer(type, object);\n      return b.toHex();\n    },\n\n    fromBuffer(buffer) {\n      let b = ByteBuffer.fromBinary(buffer.toString(), ByteBuffer.LITTLE_ENDIAN);\n      return type.fromByteBuffer(b);\n    },\n\n    toBuffer(object) {\n      return Buffer.from(toByteBuffer(type, object).toBinary(), 'binary');\n    },\n\n    fromBinary(string) {\n      let b = ByteBuffer.fromBinary(string, ByteBuffer.LITTLE_ENDIAN);\n      return type.fromByteBuffer(b);\n    },\n\n    toBinary(object) {\n      return toByteBuffer(type, object).toBinary();\n    }\n  };\n}\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/serializer/src/convert.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 511,
    "kind": "function",
    "name": "toByteBuffer",
    "memberof": "lib/serializer/src/convert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/serializer/src/convert.js~toByteBuffer",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/convert.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 512,
    "kind": "function",
    "name": "convert",
    "memberof": "lib/serializer/src/convert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/serializer/src/convert.js~convert",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/convert.js",
    "importStyle": "convert",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 513,
    "kind": "file",
    "name": "lib/serializer/src/error_with_cause.js",
    "content": "/** Exception nesting.  */\nclass ErrorWithCause {\n  constructor(message, cause) {\n    this.message = message;\n\n    if (typeof cause !== 'undefined' && cause !== null ? cause.message : undefined) {\n      this.message = `cause\\t${cause.message}\\t${this.message}`;\n    }\n\n    let stack = ''; // (new Error).stack\n\n    if (typeof cause !== 'undefined' && cause !== null ? cause.stack : undefined) {\n      stack = `caused by\\n\\t${cause.stack}\\t${stack}`;\n    }\n\n    this.stack = `${this.message}\\n${stack}`;\n  }\n\n  static throw(message, cause) {\n    let msg = message;\n\n    if (typeof cause !== 'undefined' && cause !== null ? cause.message : undefined) {\n      msg += `\\t cause: ${cause.message} `;\n    }\n\n    if (typeof cause !== 'undefined' && cause !== null ? cause.stack : undefined) {\n      msg += `\\n stack: ${cause.stack} `;\n    }\n\n    throw new Error(msg);\n  }\n}\n\nexport default ErrorWithCause;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/serializer/src/error_with_cause.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 514,
    "kind": "class",
    "name": "ErrorWithCause",
    "memberof": "lib/serializer/src/error_with_cause.js",
    "static": true,
    "longname": "lib/serializer/src/error_with_cause.js~ErrorWithCause",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/error_with_cause.js",
    "importStyle": "ErrorWithCause",
    "description": "Exception nesting.",
    "lineNumber": 2,
    "interface": false
  },
  {
    "__docId__": 515,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/serializer/src/error_with_cause.js~ErrorWithCause",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/serializer/src/error_with_cause.js~ErrorWithCause#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true
  },
  {
    "__docId__": 516,
    "kind": "member",
    "name": "message",
    "memberof": "lib/serializer/src/error_with_cause.js~ErrorWithCause",
    "static": false,
    "longname": "lib/serializer/src/error_with_cause.js~ErrorWithCause#message",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 518,
    "kind": "member",
    "name": "stack",
    "memberof": "lib/serializer/src/error_with_cause.js~ErrorWithCause",
    "static": false,
    "longname": "lib/serializer/src/error_with_cause.js~ErrorWithCause#stack",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "throw",
    "memberof": "lib/serializer/src/error_with_cause.js~ErrorWithCause",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/serializer/src/error_with_cause.js~ErrorWithCause.throw",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "cause",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 520,
    "kind": "file",
    "name": "lib/serializer/src/operations.js",
    "content": "import types from './types';\nimport SerializerImpl from './serializer';\n\nconst {\n  // id_type,\n  // varint32,\n  uint8,\n  uint16,\n  uint32,\n  int64,\n  uint64,\n  string,\n  bytes,\n  bool,\n  array,\n  protocol_id_type,\n  object_id_type,\n  vote_id,\n  implementation_id_type,\n  static_variant,\n  map,\n  set,\n  public_key,\n  address,\n  time_point_sec,\n  optional,\n  variant_object,\n  enumeration,\n  sha256\n} = types;\n\nconst future_extensions = types.void;\n\n/*\nWhen updating generated code\nReplace:  operation = static_variant [\nwith:     operation.st_operations = [\n\nDelete:\npublic_key = new Serializer(\n    \"public_key\"\n    key_data: bytes 33\n);\n*/\n\nfunction Serializer(operation_name, serilization_types_object) {\n  return new SerializerImpl(operation_name, serilization_types_object);\n}\n// Place-holder, their are dependencies on \"operation\" .. The final list of\n// operations is not avialble until the very end of the generated code.\n// See: operation.st_operations = ...\n// module.exports[\"operation\"] = operation;\n\nconst operation = static_variant();\n\n// Custom-types follow Generated code:\n\n// ##  Generated code follows\n// # programs/js_operation_serializer > npm i -g decaffeinate\n// ## -------------------------------\nconst transfer_operation_fee_parameters = new Serializer(\n  'transfer_operation_fee_parameters',\n  {\n    fee: uint64,\n    price_per_kbyte: uint32\n  }\n);\n\nconst limit_order_create_operation_fee_parameters = new Serializer(\n  'limit_order_create_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst limit_order_cancel_operation_fee_parameters = new Serializer(\n  'limit_order_cancel_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst call_order_update_operation_fee_parameters = new Serializer(\n  'call_order_update_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst fill_order_operation_fee_parameters = new Serializer(\n  'fill_order_operation_fee_parameters'\n);\n\nconst account_create_operation_fee_parameters = new Serializer(\n  'account_create_operation_fee_parameters',\n  {\n    basic_fee: uint64,\n    premium_fee: uint64,\n    price_per_kbyte: uint32\n  }\n);\n\nconst account_update_operation_fee_parameters = new Serializer(\n  'account_update_operation_fee_parameters',\n  {\n    fee: int64,\n    price_per_kbyte: uint32\n  }\n);\n\nconst account_whitelist_operation_fee_parameters = new Serializer(\n  'account_whitelist_operation_fee_parameters',\n  {\n    fee: int64\n  }\n);\n\nconst account_upgrade_operation_fee_parameters = new Serializer(\n  'account_upgrade_operation_fee_parameters',\n  {\n    membership_annual_fee: uint64,\n    membership_lifetime_fee: uint64\n  }\n);\n\nconst account_transfer_operation_fee_parameters = new Serializer(\n  'account_transfer_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst asset_create_operation_fee_parameters = new Serializer(\n  'asset_create_operation_fee_parameters',\n  {\n    symbol3: uint64,\n    symbol4: uint64,\n    long_symbol: uint64,\n    price_per_kbyte: uint32\n  }\n);\n\nconst asset_update_operation_fee_parameters = new Serializer(\n  'asset_update_operation_fee_parameters',\n  {\n    fee: uint64,\n    price_per_kbyte: uint32\n  }\n);\n\nconst asset_update_bitasset_operation_fee_parameters = new Serializer(\n  'asset_update_bitasset_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst asset_update_feed_producers_operation_fee_parameters = new Serializer(\n  'asset_update_feed_producers_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst asset_issue_operation_fee_parameters = new Serializer(\n  'asset_issue_operation_fee_parameters',\n  {\n    fee: uint64,\n    price_per_kbyte: uint32\n  }\n);\n\nconst asset_reserve_operation_fee_parameters = new Serializer(\n  'asset_reserve_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst asset_fund_fee_pool_operation_fee_parameters = new Serializer(\n  'asset_fund_fee_pool_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst asset_settle_operation_fee_parameters = new Serializer(\n  'asset_settle_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst asset_global_settle_operation_fee_parameters = new Serializer(\n  'asset_global_settle_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst asset_publish_feed_operation_fee_parameters = new Serializer(\n  'asset_publish_feed_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst witness_create_operation_fee_parameters = new Serializer(\n  'witness_create_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst witness_update_operation_fee_parameters = new Serializer(\n  'witness_update_operation_fee_parameters',\n  {\n    fee: int64\n  }\n);\n\nconst proposal_create_operation_fee_parameters = new Serializer(\n  'proposal_create_operation_fee_parameters',\n  {\n    fee: uint64,\n    price_per_kbyte: uint32\n  }\n);\n\nconst proposal_update_operation_fee_parameters = new Serializer(\n  'proposal_update_operation_fee_parameters',\n  {\n    fee: uint64,\n    price_per_kbyte: uint32\n  }\n);\n\nconst proposal_delete_operation_fee_parameters = new Serializer(\n  'proposal_delete_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst withdraw_permission_create_operation_fee_parameters = new Serializer(\n  'withdraw_permission_create_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst withdraw_permission_update_operation_fee_parameters = new Serializer(\n  'withdraw_permission_update_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst withdraw_permission_claim_operation_fee_parameters = new Serializer(\n  'withdraw_permission_claim_operation_fee_parameters',\n  {\n    fee: uint64,\n    price_per_kbyte: uint32\n  }\n);\n\nconst withdraw_permission_delete_operation_fee_parameters = new Serializer(\n  'withdraw_permission_delete_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst committee_member_create_operation_fee_parameters = new Serializer(\n  'committee_member_create_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst committee_member_update_operation_fee_parameters = new Serializer(\n  'committee_member_update_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst committee_member_update_global_parameters_operation_fee_parameters = new Serializer(\n  'committee_member_update_global_parameters_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst vesting_balance_create_operation_fee_parameters = new Serializer(\n  'vesting_balance_create_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst vesting_balance_withdraw_operation_fee_parameters = new Serializer(\n  'vesting_balance_withdraw_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst worker_create_operation_fee_parameters = new Serializer(\n  'worker_create_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst custom_operation_fee_parameters = new Serializer('custom_operation_fee_parameters', {\n  fee: uint64,\n  price_per_kbyte: uint32\n});\n\nconst assert_operation_fee_parameters = new Serializer('assert_operation_fee_parameters', {\n  fee: uint64\n});\n\nconst balance_claim_operation_fee_parameters = new Serializer(\n  'balance_claim_operation_fee_parameters'\n);\n\nconst override_transfer_operation_fee_parameters = new Serializer(\n  'override_transfer_operation_fee_parameters',\n  {\n    fee: uint64,\n    price_per_kbyte: uint32\n  }\n);\n\nconst transfer_to_blind_operation_fee_parameters = new Serializer(\n  'transfer_to_blind_operation_fee_parameters',\n  {\n    fee: uint64,\n    price_per_output: uint32\n  }\n);\n\nconst blind_transfer_operation_fee_parameters = new Serializer(\n  'blind_transfer_operation_fee_parameters',\n  {\n    fee: uint64,\n    price_per_output: uint32\n  }\n);\n\nconst transfer_from_blind_operation_fee_parameters = new Serializer(\n  'transfer_from_blind_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst asset_settle_cancel_operation_fee_parameters = new Serializer(\n  'asset_settle_cancel_operation_fee_parameters'\n);\n\nconst asset_claim_fees_operation_fee_parameters = new Serializer(\n  'asset_claim_fees_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst fba_distribute_operation_fee_parameters = new Serializer(\n  'fba_distribute_operation_fee_parameters',\n  {}\n);\n\nconst asset_update_dividend_operation_fee_parameters = new Serializer(\n  'asset_update_dividend_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst asset_dividend_distribution_operation_fee_parameters = new Serializer(\n  'asset_dividend_distribution_operation_fee_parameters',\n  {\n    distribution_base_fee: uint64,\n    distribution_fee_per_holder: uint32\n  }\n);\n\nconst sport_create_operation_fee_parameters = new Serializer(\n  'sport_create_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst sport_update_operation_fee_parameters = new Serializer(\n  'sport_update_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst event_group_create_operation_fee_parameters = new Serializer(\n  'event_group_create_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst event_group_update_operation_fee_parameters = new Serializer(\n  'event_group_update_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst event_create_operation_fee_parameters = new Serializer(\n  'event_create_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst event_update_operation_fee_parameters = new Serializer(\n  'event_update_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst betting_market_rules_create_operation_fee_parameters = new Serializer(\n  'betting_market_rules_create_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst betting_market_rules_update_operation_fee_parameters = new Serializer(\n  'betting_market_rules_update_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst betting_market_group_create_operation_fee_parameters = new Serializer(\n  'betting_market_group_create_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst betting_market_create_operation_fee_parameters = new Serializer(\n  'betting_market_create_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst bet_place_operation_fee_parameters = new Serializer(\n  'bet_place_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst betting_market_group_resolve_operation_fee_parameters = new Serializer(\n  'betting_market_group_resolve_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst betting_market_group_resolved_operation_fee_parameters = new Serializer(\n  'betting_market_group_resolved_operation_fee_parameters'\n);\n\nconst betting_market_group_cancel_unmatched_bets_operation_fee_parameters = new Serializer(\n  'betting_market_group_cancel_unmatched_bets_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst bet_matched_operation_fee_parameters = new Serializer(\n  'bet_matched_operation_fee_parameters'\n);\n\nconst bet_cancel_operation_fee_parameters = new Serializer(\n  'bet_cancel_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst bet_canceled_operation_fee_parameters = new Serializer(\n  'bet_canceled_operation_fee_parameters'\n);\n\nconst tournament_create_operation_fee_parameters = new Serializer(\n  'tournament_create_operation_fee_parameters',\n  {\n    fee: int64\n  }\n);\n\nconst tournament_join_operation_fee_parameters = new Serializer(\n  'tournament_join_operation_fee_parameters',\n  {\n    fee: int64\n  }\n);\n\nconst game_move_operation_fee_parameters = new Serializer(\n  'game_move_operation_fee_parameters',\n  {\n    fee: int64\n  }\n);\n\nconst tournament_payout_operation_fee_parameters = new Serializer(\n  'tournament_payout_operation_fee_parameters'\n);\n\nconst tournament_leave_operation_fee_parameters = new Serializer(\n  'tournament_leave_operation_fee_parameters',\n  {\n    fee: int64\n  }\n);\n\nconst betting_market_group_update_operation_fee_parameters = new Serializer(\n  'betting_market_group_update_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst betting_market_update_operation_fee_parameters = new Serializer(\n  'betting_market_update_operation_fee_parameters',\n  {\n    fee: uint64\n  }\n);\n\nconst bet_adjusted_operation_fee_parameters = new Serializer(\n  'bet_adjusted_operation_fee_parameters'\n);\n\nconst fee_parameters = static_variant([\n  transfer_operation_fee_parameters,\n  limit_order_create_operation_fee_parameters,\n  limit_order_cancel_operation_fee_parameters,\n  call_order_update_operation_fee_parameters,\n  fill_order_operation_fee_parameters,\n  account_create_operation_fee_parameters,\n  account_update_operation_fee_parameters,\n  account_whitelist_operation_fee_parameters,\n  account_upgrade_operation_fee_parameters,\n  account_transfer_operation_fee_parameters,\n  asset_create_operation_fee_parameters,\n  asset_update_operation_fee_parameters,\n  asset_update_bitasset_operation_fee_parameters,\n  asset_update_feed_producers_operation_fee_parameters,\n  asset_issue_operation_fee_parameters,\n  asset_reserve_operation_fee_parameters,\n  asset_fund_fee_pool_operation_fee_parameters,\n  asset_settle_operation_fee_parameters,\n  asset_global_settle_operation_fee_parameters,\n  asset_publish_feed_operation_fee_parameters,\n  witness_create_operation_fee_parameters,\n  witness_update_operation_fee_parameters,\n  proposal_create_operation_fee_parameters,\n  proposal_update_operation_fee_parameters,\n  proposal_delete_operation_fee_parameters,\n  withdraw_permission_create_operation_fee_parameters,\n  withdraw_permission_update_operation_fee_parameters,\n  withdraw_permission_claim_operation_fee_parameters,\n  withdraw_permission_delete_operation_fee_parameters,\n  committee_member_create_operation_fee_parameters,\n  committee_member_update_operation_fee_parameters,\n  committee_member_update_global_parameters_operation_fee_parameters,\n  vesting_balance_create_operation_fee_parameters,\n  vesting_balance_withdraw_operation_fee_parameters,\n  worker_create_operation_fee_parameters,\n  custom_operation_fee_parameters,\n  assert_operation_fee_parameters,\n  balance_claim_operation_fee_parameters,\n  override_transfer_operation_fee_parameters,\n  transfer_to_blind_operation_fee_parameters,\n  blind_transfer_operation_fee_parameters,\n  transfer_from_blind_operation_fee_parameters,\n  asset_settle_cancel_operation_fee_parameters,\n  asset_claim_fees_operation_fee_parameters,\n  fba_distribute_operation_fee_parameters,\n  tournament_create_operation_fee_parameters,\n  tournament_join_operation_fee_parameters,\n  game_move_operation_fee_parameters,\n  asset_update_dividend_operation_fee_parameters,\n  asset_dividend_distribution_operation_fee_parameters,\n  tournament_payout_operation_fee_parameters,\n  tournament_leave_operation_fee_parameters,\n  sport_create_operation_fee_parameters,\n  sport_update_operation_fee_parameters,\n  event_group_create_operation_fee_parameters,\n  event_group_update_operation_fee_parameters,\n  event_create_operation_fee_parameters,\n  event_update_operation_fee_parameters,\n  betting_market_rules_create_operation_fee_parameters,\n  betting_market_rules_update_operation_fee_parameters,\n  betting_market_group_create_operation_fee_parameters,\n  betting_market_create_operation_fee_parameters,\n  bet_place_operation_fee_parameters,\n  betting_market_group_resolve_operation_fee_parameters,\n  betting_market_group_resolved_operation_fee_parameters,\n  bet_adjusted_operation_fee_parameters,\n  betting_market_group_cancel_unmatched_bets_operation_fee_parameters,\n  bet_matched_operation_fee_parameters,\n  bet_cancel_operation_fee_parameters,\n  bet_canceled_operation_fee_parameters,\n  betting_market_group_update_operation_fee_parameters,\n  betting_market_update_operation_fee_parameters\n  // Missing event_update_status\n]);\n\nconst fee_schedule = new Serializer('fee_schedule', {\n  parameters: set(fee_parameters),\n  scale: uint32\n});\n\nconst void_result = new Serializer('void_result');\n\nconst asset = new Serializer('asset', {\n  amount: int64,\n  asset_id: protocol_id_type('asset')\n});\n\nconst operation_result = static_variant([void_result, object_id_type, asset]);\n\nconst processed_transaction = new Serializer('processed_transaction', {\n  ref_block_num: uint16,\n  ref_block_prefix: uint32,\n  expiration: time_point_sec,\n  operations: array(operation),\n  extensions: set(future_extensions),\n  signatures: array(bytes(65)),\n  operation_results: array(operation_result)\n});\n\nconst signed_block = new Serializer('signed_block', {\n  previous: bytes(20),\n  timestamp: time_point_sec,\n  witness: protocol_id_type('witness'),\n  next_secret_hash: bytes(20),\n  previous_secret: bytes(20),\n  transaction_merkle_root: bytes(20),\n  extensions: set(future_extensions),\n  witness_signature: bytes(65),\n  transactions: array(processed_transaction)\n});\n\nconst block_header = new Serializer('block_header', {\n  previous: bytes(20),\n  timestamp: time_point_sec,\n  witness: protocol_id_type('witness'),\n  next_secret_hash: bytes(20),\n  previous_secret: bytes(20),\n  transaction_merkle_root: bytes(20),\n  extensions: set(future_extensions)\n});\n\nconst signed_block_header = new Serializer('signed_block_header', {\n  previous: bytes(20),\n  timestamp: time_point_sec,\n  witness: protocol_id_type('witness'),\n  next_secret_hash: bytes(20),\n  previous_secret: bytes(20),\n  transaction_merkle_root: bytes(20),\n  extensions: set(future_extensions),\n  witness_signature: bytes(65)\n});\n\nconst memo_data = new Serializer('memo_data', {\n  from: public_key,\n  to: public_key,\n  nonce: uint64,\n  message: bytes()\n});\n\nconst transfer = new Serializer('transfer', {\n  fee: asset,\n  from: protocol_id_type('account'),\n  to: protocol_id_type('account'),\n  amount: asset,\n  memo: optional(memo_data),\n  extensions: set(future_extensions)\n});\n\nconst limit_order_create = new Serializer('limit_order_create', {\n  fee: asset,\n  seller: protocol_id_type('account'),\n  amount_to_sell: asset,\n  min_to_receive: asset,\n  expiration: time_point_sec,\n  fill_or_kill: bool,\n  extensions: set(future_extensions)\n});\n\nconst limit_order_cancel = new Serializer('limit_order_cancel', {\n  fee: asset,\n  fee_paying_account: protocol_id_type('account'),\n  order: protocol_id_type('limit_order'),\n  extensions: set(future_extensions)\n});\n\nconst call_order_update = new Serializer('call_order_update', {\n  fee: asset,\n  funding_account: protocol_id_type('account'),\n  delta_collateral: asset,\n  delta_debt: asset,\n  extensions: set(future_extensions)\n});\n\nconst fill_order = new Serializer('fill_order', {\n  fee: asset,\n  order_id: object_id_type,\n  account_id: protocol_id_type('account'),\n  pays: asset,\n  receives: asset\n});\n\nconst authority = new Serializer('authority', {\n  weight_threshold: uint32,\n  account_auths: map(protocol_id_type('account'), uint16),\n  key_auths: map(public_key, uint16),\n  address_auths: map(address, uint16)\n});\n\nconst account_options = new Serializer('account_options', {\n  memo_key: public_key,\n  voting_account: protocol_id_type('account'),\n  num_witness: uint16,\n  num_committee: uint16,\n  votes: set(vote_id),\n  extensions: set(future_extensions)\n});\n\nconst account_create = new Serializer('account_create', {\n  fee: asset,\n  registrar: protocol_id_type('account'),\n  referrer: protocol_id_type('account'),\n  referrer_percent: uint16,\n  name: string,\n  owner: authority,\n  active: authority,\n  options: account_options,\n  extensions: set(future_extensions)\n});\n\nconst account_update = new Serializer('account_update', {\n  fee: asset,\n  account: protocol_id_type('account'),\n  owner: optional(authority),\n  active: optional(authority),\n  new_options: optional(account_options),\n  extensions: set(future_extensions)\n});\n\nconst account_whitelist = new Serializer('account_whitelist', {\n  fee: asset,\n  authorizing_account: protocol_id_type('account'),\n  account_to_list: protocol_id_type('account'),\n  new_listing: uint8,\n  extensions: set(future_extensions)\n});\n\nconst account_upgrade = new Serializer('account_upgrade', {\n  fee: asset,\n  account_to_upgrade: protocol_id_type('account'),\n  upgrade_to_lifetime_member: bool,\n  extensions: set(future_extensions)\n});\n\nconst account_transfer = new Serializer('account_transfer', {\n  fee: asset,\n  account_id: protocol_id_type('account'),\n  new_owner: protocol_id_type('account'),\n  extensions: set(future_extensions)\n});\n\nconst price = new Serializer('price', {\n  base: asset,\n  quote: asset\n});\n\nconst asset_options = new Serializer('asset_options', {\n  max_supply: int64,\n  market_fee_percent: uint16,\n  max_market_fee: int64,\n  issuer_permissions: uint16,\n  flags: uint16,\n  core_exchange_rate: price,\n  whitelist_authorities: set(protocol_id_type('account')),\n  blacklist_authorities: set(protocol_id_type('account')),\n  whitelist_markets: set(protocol_id_type('asset')),\n  blacklist_markets: set(protocol_id_type('asset')),\n  description: string,\n  extensions: set(future_extensions)\n});\n\nconst bitasset_options = new Serializer('bitasset_options', {\n  feed_lifetime_sec: uint32,\n  minimum_feeds: uint8,\n  force_settlement_delay_sec: uint32,\n  force_settlement_offset_percent: uint16,\n  maximum_force_settlement_volume: uint16,\n  short_backing_asset: protocol_id_type('asset'),\n  extensions: set(future_extensions)\n});\n\nconst asset_create = new Serializer('asset_create', {\n  fee: asset,\n  issuer: protocol_id_type('account'),\n  symbol: string,\n  precision: uint8,\n  common_options: asset_options,\n  bitasset_opts: optional(bitasset_options),\n  is_prediction_market: bool,\n  extensions: set(future_extensions)\n});\n\nconst asset_update = new Serializer('asset_update', {\n  fee: asset,\n  issuer: protocol_id_type('account'),\n  asset_to_update: protocol_id_type('asset'),\n  new_issuer: optional(protocol_id_type('account')),\n  new_options: asset_options,\n  extensions: set(future_extensions)\n});\n\nconst asset_update_bitasset = new Serializer('asset_update_bitasset', {\n  fee: asset,\n  issuer: protocol_id_type('account'),\n  asset_to_update: protocol_id_type('asset'),\n  new_options: bitasset_options,\n  extensions: set(future_extensions)\n});\n\nconst asset_update_feed_producers = new Serializer('asset_update_feed_producers', {\n  fee: asset,\n  issuer: protocol_id_type('account'),\n  asset_to_update: protocol_id_type('asset'),\n  new_feed_producers: set(protocol_id_type('account')),\n  extensions: set(future_extensions)\n});\n\nconst asset_issue = new Serializer('asset_issue', {\n  fee: asset,\n  issuer: protocol_id_type('account'),\n  asset_to_issue: asset,\n  issue_to_account: protocol_id_type('account'),\n  memo: optional(memo_data),\n  extensions: set(future_extensions)\n});\n\nconst asset_reserve = new Serializer('asset_reserve', {\n  fee: asset,\n  payer: protocol_id_type('account'),\n  amount_to_reserve: asset,\n  extensions: set(future_extensions)\n});\n\nconst asset_fund_fee_pool = new Serializer('asset_fund_fee_pool', {\n  fee: asset,\n  from_account: protocol_id_type('account'),\n  asset_id: protocol_id_type('asset'),\n  amount: int64,\n  extensions: set(future_extensions)\n});\n\nconst asset_settle = new Serializer('asset_settle', {\n  fee: asset,\n  account: protocol_id_type('account'),\n  amount: asset,\n  extensions: set(future_extensions)\n});\n\nconst asset_global_settle = new Serializer('asset_global_settle', {\n  fee: asset,\n  issuer: protocol_id_type('account'),\n  asset_to_settle: protocol_id_type('asset'),\n  settle_price: price,\n  extensions: set(future_extensions)\n});\n\nconst price_feed = new Serializer('price_feed', {\n  settlement_price: price,\n  maintenance_collateral_ratio: uint16,\n  maximum_short_squeeze_ratio: uint16,\n  core_exchange_rate: price\n});\n\nconst asset_publish_feed = new Serializer('asset_publish_feed', {\n  fee: asset,\n  publisher: protocol_id_type('account'),\n  asset_id: protocol_id_type('asset'),\n  feed: price_feed,\n  extensions: set(future_extensions)\n});\n\nconst witness_create = new Serializer('witness_create', {\n  fee: asset,\n  witness_account: protocol_id_type('account'),\n  url: string,\n  block_signing_key: public_key,\n  initial_secret: bytes(20)\n});\n\nconst witness_update = new Serializer('witness_update', {\n  fee: asset,\n  witness: protocol_id_type('witness'),\n  witness_account: protocol_id_type('account'),\n  new_url: optional(string),\n  new_signing_key: optional(public_key),\n  new_initial_secret: optional(bytes(20))\n});\n\nconst op_wrapper = new Serializer('op_wrapper', {\n  op: operation\n});\n\nconst proposal_create = new Serializer('proposal_create', {\n  fee: asset,\n  fee_paying_account: protocol_id_type('account'),\n  expiration_time: time_point_sec,\n  proposed_ops: array(op_wrapper),\n  review_period_seconds: optional(uint32),\n  extensions: set(future_extensions)\n});\n\nconst proposal_update = new Serializer('proposal_update', {\n  fee: asset,\n  fee_paying_account: protocol_id_type('account'),\n  proposal: protocol_id_type('proposal'),\n  active_approvals_to_add: set(protocol_id_type('account')),\n  active_approvals_to_remove: set(protocol_id_type('account')),\n  owner_approvals_to_add: set(protocol_id_type('account')),\n  owner_approvals_to_remove: set(protocol_id_type('account')),\n  key_approvals_to_add: set(public_key),\n  key_approvals_to_remove: set(public_key),\n  extensions: set(future_extensions)\n});\n\nconst proposal_delete = new Serializer('proposal_delete', {\n  fee: asset,\n  fee_paying_account: protocol_id_type('account'),\n  using_owner_authority: bool,\n  proposal: protocol_id_type('proposal'),\n  extensions: set(future_extensions)\n});\n\nconst withdraw_permission_create = new Serializer('withdraw_permission_create', {\n  fee: asset,\n  withdraw_from_account: protocol_id_type('account'),\n  authorized_account: protocol_id_type('account'),\n  withdrawal_limit: asset,\n  withdrawal_period_sec: uint32,\n  periods_until_expiration: uint32,\n  period_start_time: time_point_sec\n});\n\nconst withdraw_permission_update = new Serializer('withdraw_permission_update', {\n  fee: asset,\n  withdraw_from_account: protocol_id_type('account'),\n  authorized_account: protocol_id_type('account'),\n  permission_to_update: protocol_id_type('withdraw_permission'),\n  withdrawal_limit: asset,\n  withdrawal_period_sec: uint32,\n  period_start_time: time_point_sec,\n  periods_until_expiration: uint32\n});\n\nconst withdraw_permission_claim = new Serializer('withdraw_permission_claim', {\n  fee: asset,\n  withdraw_permission: protocol_id_type('withdraw_permission'),\n  withdraw_from_account: protocol_id_type('account'),\n  withdraw_to_account: protocol_id_type('account'),\n  amount_to_withdraw: asset,\n  memo: optional(memo_data)\n});\n\nconst withdraw_permission_delete = new Serializer('withdraw_permission_delete', {\n  fee: asset,\n  withdraw_from_account: protocol_id_type('account'),\n  authorized_account: protocol_id_type('account'),\n  withdrawal_permission: protocol_id_type('withdraw_permission')\n});\n\nconst committee_member_create = new Serializer('committee_member_create', {\n  fee: asset,\n  committee_member_account: protocol_id_type('account'),\n  url: string\n});\n\nconst committee_member_update = new Serializer('committee_member_update', {\n  fee: asset,\n  committee_member: protocol_id_type('committee_member'),\n  committee_member_account: protocol_id_type('account'),\n  new_url: optional(string)\n});\n\nconst chain_parameters = new Serializer('chain_parameters', {\n  current_fees: fee_schedule,\n  block_interval: uint8,\n  maintenance_interval: uint32,\n  maintenance_skip_slots: uint8,\n  committee_proposal_review_period: uint32,\n  maximum_transaction_size: uint32,\n  maximum_block_size: uint32,\n  maximum_time_until_expiration: uint32,\n  maximum_proposal_lifetime: uint32,\n  maximum_asset_whitelist_authorities: uint8,\n  maximum_asset_feed_publishers: uint8,\n  maximum_witness_count: uint16,\n  maximum_committee_count: uint16,\n  maximum_authority_membership: uint16,\n  reserve_percent_of_fee: uint16,\n  network_percent_of_fee: uint16,\n  lifetime_referrer_percent_of_fee: uint16,\n  cashback_vesting_period_seconds: uint32,\n  cashback_vesting_threshold: int64,\n  count_non_member_votes: bool,\n  allow_non_member_whitelists: bool,\n  witness_pay_per_block: int64,\n  worker_budget_per_day: int64,\n  max_predicate_opcode: uint16,\n  fee_liquidation_threshold: int64,\n  accounts_per_fee_scale: uint16,\n  account_fee_scale_bitshifts: uint8,\n  max_authority_depth: uint8,\n  min_bet_multiplier: uint32,\n  max_bet_multiplier: uint32,\n  betting_rake_fee_percentage: uint16,\n  permitted_betting_odds_increments: map(uint32, uint32),\n  witness_schedule_algorithm: uint8,\n  live_betting_delay_time: uint16,\n  min_round_delay: uint32,\n  max_round_delay: uint32,\n  min_time_per_commit_move: uint32,\n  max_time_per_commit_move: uint32,\n  min_time_per_reveal_move: uint32,\n  max_time_per_reveal_move: uint32,\n  rake_fee_percentage: uint16,\n  maximum_registration_deadline: uint32,\n  maximum_players_in_tournament: uint16,\n  maximum_tournament_whitelist_length: uint16,\n  maximum_tournament_start_time_in_future: uint32,\n  maximum_tournament_start_delay: uint32,\n  maximum_tournament_number_of_wins: uint16,\n  extensions: set(future_extensions)\n});\n\nconst committee_member_update_global_parameters = new Serializer(\n  'committee_member_update_global_parameters',\n  {\n    fee: asset,\n    new_parameters: chain_parameters\n  }\n);\n\nconst linear_vesting_policy_initializer = new Serializer(\n  'linear_vesting_policy_initializer',\n  {\n    begin_timestamp: time_point_sec,\n    vesting_cliff_seconds: uint32,\n    vesting_duration_seconds: uint32\n  }\n);\n\nconst cdd_vesting_policy_initializer = new Serializer('cdd_vesting_policy_initializer', {\n  start_claim: time_point_sec,\n  vesting_seconds: uint32\n});\n\nconst vesting_policy_initializer = static_variant([\n  linear_vesting_policy_initializer,\n  cdd_vesting_policy_initializer\n]);\n\nconst vesting_balance_create = new Serializer('vesting_balance_create', {\n  fee: asset,\n  creator: protocol_id_type('account'),\n  owner: protocol_id_type('account'),\n  amount: asset,\n  policy: vesting_policy_initializer\n});\n\nconst vesting_balance_withdraw = new Serializer('vesting_balance_withdraw', {\n  fee: asset,\n  vesting_balance: protocol_id_type('vesting_balance'),\n  owner: protocol_id_type('account'),\n  amount: asset\n});\n\nconst refund_worker_initializer = new Serializer('refund_worker_initializer');\n\nconst vesting_balance_worker_initializer = new Serializer(\n  'vesting_balance_worker_initializer',\n  {\n    pay_vesting_period_days: uint16\n  }\n);\n\nconst burn_worker_initializer = new Serializer('burn_worker_initializer');\n\nconst worker_initializer = static_variant([\n  refund_worker_initializer,\n  vesting_balance_worker_initializer,\n  burn_worker_initializer\n]);\n\nconst worker_create = new Serializer('worker_create', {\n  fee: asset,\n  owner: protocol_id_type('account'),\n  work_begin_date: time_point_sec,\n  work_end_date: time_point_sec,\n  daily_pay: int64,\n  name: string,\n  url: string,\n  initializer: worker_initializer\n});\n\nconst custom = new Serializer('custom', {\n  fee: asset,\n  payer: protocol_id_type('account'),\n  required_auths: set(protocol_id_type('account')),\n  id: uint16,\n  data: bytes()\n});\n\nconst account_name_eq_lit_predicate = new Serializer('account_name_eq_lit_predicate', {\n  account_id: protocol_id_type('account'),\n  name: string\n});\n\nconst asset_symbol_eq_lit_predicate = new Serializer('asset_symbol_eq_lit_predicate', {\n  asset_id: protocol_id_type('asset'),\n  symbol: string\n});\n\nconst block_id_predicate = new Serializer('block_id_predicate', {\n  id: bytes(20)\n});\n\nconst predicate = static_variant([\n  account_name_eq_lit_predicate,\n  asset_symbol_eq_lit_predicate,\n  block_id_predicate\n]);\n\nconst assert = new Serializer('assert', {\n  fee: asset,\n  fee_paying_account: protocol_id_type('account'),\n  predicates: array(predicate),\n  required_auths: set(protocol_id_type('account')),\n  extensions: set(future_extensions)\n});\n\nconst balance_claim = new Serializer('balance_claim', {\n  fee: asset,\n  deposit_to_account: protocol_id_type('account'),\n  balance_to_claim: protocol_id_type('balance'),\n  balance_owner_key: public_key,\n  total_claimed: asset\n});\n\nconst override_transfer = new Serializer('override_transfer', {\n  fee: asset,\n  issuer: protocol_id_type('account'),\n  from: protocol_id_type('account'),\n  to: protocol_id_type('account'),\n  amount: asset,\n  memo: optional(memo_data),\n  extensions: set(future_extensions)\n});\n\nconst stealth_confirmation = new Serializer('stealth_confirmation', {\n  one_time_key: public_key,\n  to: optional(public_key),\n  encrypted_memo: bytes()\n});\n\nconst blind_output = new Serializer('blind_output', {\n  commitment: bytes(33),\n  range_proof: bytes(),\n  owner: authority,\n  stealth_memo: optional(stealth_confirmation)\n});\n\nconst transfer_to_blind = new Serializer('transfer_to_blind', {\n  fee: asset,\n  amount: asset,\n  from: protocol_id_type('account'),\n  blinding_factor: bytes(32),\n  outputs: array(blind_output)\n});\n\nconst blind_input = new Serializer('blind_input', {\n  commitment: bytes(33),\n  owner: authority\n});\n\nconst blind_transfer = new Serializer('blind_transfer', {\n  fee: asset,\n  inputs: array(blind_input),\n  outputs: array(blind_output)\n});\n\nconst transfer_from_blind = new Serializer('transfer_from_blind', {\n  fee: asset,\n  amount: asset,\n  to: protocol_id_type('account'),\n  blinding_factor: bytes(32),\n  inputs: array(blind_input)\n});\n\nconst asset_settle_cancel = new Serializer('asset_settle_cancel', {\n  fee: asset,\n  settlement: protocol_id_type('force_settlement'),\n  account: protocol_id_type('account'),\n  amount: asset,\n  extensions: set(future_extensions)\n});\n\nconst asset_claim_fees = new Serializer('asset_claim_fees', {\n  fee: asset,\n  issuer: protocol_id_type('account'),\n  amount_to_claim: asset,\n  extensions: set(future_extensions)\n});\n\nconst fba_distribute = new Serializer('fba_distribute', {\n  fee: asset,\n  account_id: protocol_id_type('account'),\n  fba_id: protocol_id_type('fba_accumulator'),\n  amount: int64\n});\n\nconst rock_paper_scissors_game_options = new Serializer('rock_paper_scissors_game_options', {\n  insurance_enabled: bool,\n  time_per_commit_move: uint32,\n  time_per_reveal_move: uint32,\n  number_of_gestures: uint8\n});\n\nconst game_specific_details = static_variant([rock_paper_scissors_game_options]);\n\nconst tournament_options = new Serializer('tournament_options', {\n  type_of_game: uint16,\n  registration_deadline: time_point_sec,\n  number_of_players: uint32,\n  buy_in: asset,\n  whitelist: set(protocol_id_type('account')),\n  start_time: optional(time_point_sec),\n  start_delay: optional(uint32),\n  round_delay: uint32,\n  number_of_wins: uint32,\n  meta: variant_object,\n  game_options: game_specific_details\n});\n\nconst tournament_create = new Serializer('tournament_create', {\n  fee: asset,\n  creator: protocol_id_type('account'),\n  options: tournament_options,\n  extensions: set(future_extensions)\n});\n\nconst tournament_join = new Serializer('tournament_join', {\n  fee: asset,\n  payer_account_id: protocol_id_type('account'),\n  player_account_id: protocol_id_type('account'),\n  tournament_id: protocol_id_type('tournament'),\n  buy_in: asset,\n  extensions: set(future_extensions)\n});\n\nconst rock_paper_scissors_gesture = enumeration([\n  'rock',\n  'paper',\n  'scissors',\n  'spock',\n  'lizard'\n]);\n\nconst rock_paper_scissors_throw_commit = new Serializer('rock_paper_scissors_throw_commit', {\n  nonce1: uint64,\n  throw_hash: sha256\n});\n\nconst rock_paper_scissors_throw_reveal = new Serializer('rock_paper_scissors_throw_reveal', {\n  nonce2: uint64,\n  gesture: rock_paper_scissors_gesture\n});\n\nconst game_specific_moves = static_variant([\n  rock_paper_scissors_throw_commit,\n  rock_paper_scissors_throw_reveal\n]);\n\nconst game_move = new Serializer('game_move', {\n  fee: asset,\n  game_id: protocol_id_type('game'),\n  player_account_id: protocol_id_type('account'),\n  move: game_specific_moves,\n  extensions: set(future_extensions)\n});\n\nconst dividend_asset_options = new Serializer('dividend_asset_options', {\n  next_payout_time: optional(time_point_sec),\n  payout_interval: optional(uint32),\n  minimum_fee_percentage: uint64,\n  minimum_distribution_interval: optional(uint32),\n  extensions: set(future_extensions)\n});\n\nconst asset_update_dividend = new Serializer('asset_update_dividend', {\n  fee: asset,\n  issuer: protocol_id_type('account'),\n  asset_to_update: protocol_id_type('asset'),\n  new_options: dividend_asset_options,\n  extensions: set(future_extensions)\n});\n\nconst asset_dividend_distribution = new Serializer('asset_dividend_distribution', {\n  fee: asset,\n  dividend_asset_id: protocol_id_type('asset'),\n  account_id: protocol_id_type('account'),\n  amounts: set(asset),\n  extensions: set(future_extensions)\n});\n\nconst sport_create = new Serializer('sport_create', {\n  fee: asset,\n  name: map(string, string),\n  extensions: set(future_extensions)\n});\n\nconst sport_update = new Serializer('sport_update', {\n  fee: asset,\n  sport_id: protocol_id_type('sport'),\n  new_name: optional(map(string, string)),\n  extensions: set(future_extensions)\n});\n\nconst event_group_create = new Serializer('event_group_create', {\n  fee: asset,\n  name: map(string, string),\n  sport_id: object_id_type,\n  extensions: set(future_extensions)\n});\n\nconst event_group_update = new Serializer('event_group_update', {\n  fee: asset,\n  new_sport_id: optional(protocol_id_type('sport')),\n  new_name: optional(map(string, string)),\n  event_group_id: protocol_id_type('event_group'),\n  extensions: set(future_extensions)\n});\n\nconst event_create = new Serializer('event_create', {\n  fee: asset,\n  name: map(string, string),\n  season: map(string, string),\n  start_time: optional(time_point_sec),\n  event_group_id: object_id_type,\n  extensions: set(future_extensions)\n});\n\nconst event_update = new Serializer('event_update', {\n  fee: asset,\n  event_id: protocol_id_type('event'),\n  new_event_group_id: optional(protocol_id_type('event_group')),\n  new_name: optional(map(string, string)),\n  new_season: optional(map(string, string)),\n  new_start_time: optional(time_point_sec),\n  is_live_market: optional(bool),\n  extensions: set(future_extensions)\n});\n\nconst betting_market_rules_create = new Serializer('betting_market_rules_create', {\n  fee: asset,\n  name: map(string, string),\n  description: map(string, string),\n  extensions: set(future_extensions)\n});\n\nconst betting_market_rules_update = new Serializer('betting_market_rules_update', {\n  fee: asset,\n  new_name: optional(map(string, string)),\n  new_description: optional(map(string, string)),\n  extensions: set(future_extensions),\n  betting_market_rules_id: protocol_id_type('betting_market_rules')\n});\n\nconst betting_market_group_create = new Serializer('betting_market_group_create', {\n  fee: asset,\n  description: map(string, string),\n  event_id: object_id_type,\n  rules_id: object_id_type,\n  asset_id: protocol_id_type('asset'),\n  extensions: set(future_extensions)\n});\n\nconst betting_market_create = new Serializer('betting_market_create', {\n  fee: asset,\n  group_id: object_id_type,\n  description: map(string, string),\n  payout_condition: map(string, string),\n  extensions: set(future_extensions)\n});\n\nconst bet_type = enumeration(['back', 'lay']);\n\nconst bet_place = new Serializer('bet_place', {\n  fee: asset,\n  bettor_id: protocol_id_type('account'),\n  betting_market_id: protocol_id_type('betting_market'),\n  amount_to_bet: asset,\n  backer_multiplier: uint32,\n  back_or_lay: bet_type,\n  extensions: set(future_extensions)\n});\n\nconst betting_market_resolution_type = enumeration([\n  'win',\n  'not_win',\n  'cancel',\n  'BETTING_MARKET_RESOLUTION_COUNT'\n]);\n\nconst betting_market_group_resolve = new Serializer('betting_market_group_resolve', {\n  fee: asset,\n  betting_market_group_id: protocol_id_type('betting_market_group'),\n  resolutions: map(protocol_id_type('betting_market'), betting_market_resolution_type),\n  extensions: set(future_extensions)\n});\n\nconst betting_market_group_resolved = new Serializer('betting_market_group_resolved', {\n  bettor_id: protocol_id_type('account'),\n  betting_market_group_id: protocol_id_type('betting_market_group'),\n  resolutions: map(protocol_id_type('betting_market'), betting_market_resolution_type),\n  winnings: int64,\n  fees_paid: int64,\n  fee: asset\n});\n\nconst betting_market_group_cancel_unmatched_bets = new Serializer(\n  'betting_market_group_cancel_unmatched_bets',\n  {\n    fee: asset,\n    betting_market_group_id: protocol_id_type('betting_market_group'),\n    extensions: set(future_extensions)\n  }\n);\n\nconst bet_matched = new Serializer('bet_matched', {\n  bettor_id: protocol_id_type('account'),\n  bet_id: protocol_id_type('bet'),\n  betting_market_id: protocol_id_type('betting_market'),\n  amount_bet: asset,\n  fees_paid: int64,\n  backer_multiplier: uint32,\n  guaranteed_winnings_returned: int64\n});\n\nconst bet_cancel = new Serializer('bet_cancel', {\n  fee: asset,\n  bettor_id: protocol_id_type('account'),\n  bet_to_cancel: protocol_id_type('bet'),\n  extensions: set(future_extensions)\n});\n\nconst bet_canceled = new Serializer('bet_canceled', {\n  bettor_id: protocol_id_type('account'),\n  bet_id: protocol_id_type('bet'),\n  stake_returned: asset,\n  unused_fees_returned: asset\n});\n\nconst payout_type = enumeration(['prize_award', 'buyin_refund', 'rake_fee']);\n\nconst tournament_payout = new Serializer('tournament_payout', {\n  fee: asset,\n  payout_account_id: protocol_id_type('account'),\n  tournament_id: protocol_id_type('tournament'),\n  payout_amount: asset,\n  type: payout_type,\n  extensions: set(future_extensions)\n});\n\nconst tournament_leave = new Serializer('tournament_leave', {\n  fee: asset,\n  canceling_account_id: protocol_id_type('account'),\n  player_account_id: protocol_id_type('account'),\n  tournament_id: protocol_id_type('tournament'),\n  extensions: set(future_extensions)\n});\n\nconst betting_market_group_update = new Serializer('betting_market_group_update', {\n  fee: asset,\n  betting_market_group_id: protocol_id_type('betting_market_group'),\n  new_description: optional(map(string, string)),\n  new_rules_id: optional(protocol_id_type('betting_market_rules')),\n  freeze: optional(bool),\n  delay_bets: optional(bool),\n  extensions: set(future_extensions)\n});\n\nconst betting_market_update = new Serializer('betting_market_update', {\n  fee: asset,\n  betting_market_id: protocol_id_type('betting_market'),\n  new_group_id: optional(protocol_id_type('betting_market_group')),\n  new_description: optional(map(string, string)),\n  new_payout_condition: optional(map(string, string)),\n  extensions: set(future_extensions)\n});\n\nconst bet_adjusted = new Serializer('bet_adjusted', {\n  bettor_id: protocol_id_type('account'),\n  bet_id: protocol_id_type('bet'),\n  stake_returned: asset\n});\n\noperation.st_operations = [\n  transfer,\n  limit_order_create,\n  limit_order_cancel,\n  call_order_update,\n  fill_order,\n  account_create,\n  account_update,\n  account_whitelist,\n  account_upgrade,\n  account_transfer,\n  asset_create,\n  asset_update,\n  asset_update_bitasset,\n  asset_update_feed_producers,\n  asset_issue,\n  asset_reserve,\n  asset_fund_fee_pool,\n  asset_settle,\n  asset_global_settle,\n  asset_publish_feed,\n  witness_create,\n  witness_update,\n  proposal_create,\n  proposal_update,\n  proposal_delete,\n  withdraw_permission_create,\n  withdraw_permission_update,\n  withdraw_permission_claim,\n  withdraw_permission_delete,\n  committee_member_create,\n  committee_member_update,\n  committee_member_update_global_parameters,\n  vesting_balance_create,\n  vesting_balance_withdraw,\n  worker_create,\n  custom,\n  assert,\n  balance_claim,\n  override_transfer,\n  transfer_to_blind,\n  blind_transfer,\n  transfer_from_blind,\n  asset_settle_cancel,\n  asset_claim_fees,\n  fba_distribute,\n  tournament_create,\n  tournament_join,\n  game_move,\n  asset_update_dividend,\n  asset_dividend_distribution,\n  tournament_payout,\n  tournament_leave,\n  sport_create,\n  sport_update,\n  event_group_create,\n  event_group_update,\n  event_create,\n  event_update,\n  betting_market_rules_create,\n  betting_market_rules_update,\n  betting_market_group_create,\n  betting_market_create,\n  bet_place,\n  betting_market_group_resolve,\n  betting_market_group_resolved,\n  bet_adjusted,\n  betting_market_group_cancel_unmatched_bets,\n  bet_matched,\n  bet_cancel,\n  bet_canceled,\n  betting_market_group_update,\n  betting_market_update\n];\n\nconst transaction = new Serializer('transaction', {\n  ref_block_num: uint16,\n  ref_block_prefix: uint32,\n  expiration: time_point_sec,\n  operations: array(operation),\n  extensions: set(future_extensions)\n});\n\nconst signed_transaction = new Serializer('signed_transaction', {\n  ref_block_num: uint16,\n  ref_block_prefix: uint32,\n  expiration: time_point_sec,\n  operations: array(operation),\n  extensions: set(future_extensions),\n  signatures: array(bytes(65))\n});\n// # -------------------------------\n// #  Generated code end\n// # -------------------------------\n\n// Betting Objects\n\nconst sport = new Serializer('sport', {\n  id: protocol_id_type('sport'),\n  name: map(string, string)\n});\n\nconst event_group = new Serializer('event_group', {\n  id: protocol_id_type('event_group'),\n  name: map(string, string),\n  sport_id: protocol_id_type('sport')\n});\n\nconst event_status = enumeration([\n  'upcoming',\n  'in_progress',\n  'frozen',\n  'finished',\n  'completed',\n  'canceled',\n  'STATUS_COUNT'\n]);\n\nconst betting_market_status = enumeration([\n  'unresolved',\n  'frozen',\n  'graded',\n  'canceled',\n  'settled'\n]);\n\nconst betting_market_group_status = enumeration([\n  'upcoming',\n  'in_play',\n  'closed',\n  'graded',\n  're-grading',\n  'settled',\n  'frozen',\n  'canceled'\n]);\n\nconst event = new Serializer('event', {\n  id: protocol_id_type('event'),\n  name: map(string, string),\n  season: map(string, string),\n  start_time: optional(time_point_sec),\n  event_group_id: protocol_id_type('event_group'),\n  is_live_market: bool,\n  status: event_status,\n  scores: array(string)\n});\n\nconst betting_market_rules = new Serializer('betting_market_rules', {\n  id: protocol_id_type('betting_market_rules'),\n  name: map(string, string),\n  description: map(string, string)\n});\n\nconst betting_market_group = new Serializer('betting_market_group', {\n  id: protocol_id_type('betting_market_group'),\n  description: map(string, string),\n  event_id: protocol_id_type('event'),\n  rules_id: protocol_id_type('betting_market_rules'),\n  asset_id: protocol_id_type('asset'),\n  total_matched_bets_amount: uint64,\n  frozen: bool,\n  delay_bets: bool,\n  status: betting_market_group_status\n});\n\nconst betting_market = new Serializer('betting_market', {\n  id: protocol_id_type('betting_market'),\n  group_id: protocol_id_type('betting_market_group'),\n  description: map(string, string),\n  payout_condition: map(string, string),\n  status: betting_market_status\n});\n\nconst bet = new Serializer('bet', {\n  id: protocol_id_type('bet'),\n  bettor_id: protocol_id_type('account'),\n  betting_market_id: protocol_id_type('betting_market'),\n  amount_to_bet: asset,\n  backer_multiplier: uint32,\n  back_or_lay: bet_type\n});\n\nconst betting_market_position = new Serializer('betting_market_position', {\n  id: implementation_id_type('betting_market_position'),\n  bettor_id: protocol_id_type('account'),\n  betting_market_id: protocol_id_type('betting_market'),\n  pay_if_payout_condition: int64,\n  pay_if_not_payout_condition: int64,\n  pay_if_canceled: int64,\n  pay_if_not_canceled: int64,\n  fees_collected: int64\n});\n\nconst global_betting_statistics = new Serializer('global_betting_statistics', {\n  id: implementation_id_type('global_betting_statistics'),\n  number_of_active_events: uint32,\n  total_amount_staked: map(protocol_id_type('asset'), int64)\n});\n\n// eof Betting Objects\n\n// Custom Types\n\nconst stealth_memo_data = new Serializer('stealth_memo_data', {\n  from: optional(public_key),\n  amount: asset,\n  blinding_factor: bytes(32),\n  commitment: bytes(33),\n  check: uint32\n});\n// var stealth_confirmation = new Serializer(\n//     \"stealth_confirmation\", {\n//     one_time_key: public_key,\n//     to: optional( public_key ),\n//     encrypted_memo: stealth_memo_data\n// })\n\nexport {\n  operation,\n  transfer_operation_fee_parameters,\n  limit_order_create_operation_fee_parameters,\n  limit_order_cancel_operation_fee_parameters,\n  call_order_update_operation_fee_parameters,\n  fill_order_operation_fee_parameters,\n  account_create_operation_fee_parameters,\n  account_update_operation_fee_parameters,\n  account_whitelist_operation_fee_parameters,\n  account_upgrade_operation_fee_parameters,\n  account_transfer_operation_fee_parameters,\n  asset_create_operation_fee_parameters,\n  asset_update_operation_fee_parameters,\n  asset_update_bitasset_operation_fee_parameters,\n  asset_update_feed_producers_operation_fee_parameters,\n  asset_issue_operation_fee_parameters,\n  asset_reserve_operation_fee_parameters,\n  asset_fund_fee_pool_operation_fee_parameters,\n  asset_settle_operation_fee_parameters,\n  asset_global_settle_operation_fee_parameters,\n  asset_publish_feed_operation_fee_parameters,\n  witness_create_operation_fee_parameters,\n  witness_update_operation_fee_parameters,\n  proposal_create_operation_fee_parameters,\n  proposal_update_operation_fee_parameters,\n  proposal_delete_operation_fee_parameters,\n  withdraw_permission_create_operation_fee_parameters,\n  withdraw_permission_update_operation_fee_parameters,\n  withdraw_permission_claim_operation_fee_parameters,\n  withdraw_permission_delete_operation_fee_parameters,\n  committee_member_create_operation_fee_parameters,\n  committee_member_update_operation_fee_parameters,\n  committee_member_update_global_parameters_operation_fee_parameters,\n  vesting_balance_create_operation_fee_parameters,\n  vesting_balance_withdraw_operation_fee_parameters,\n  worker_create_operation_fee_parameters,\n  custom_operation_fee_parameters,\n  assert_operation_fee_parameters,\n  balance_claim_operation_fee_parameters,\n  override_transfer_operation_fee_parameters,\n  transfer_to_blind_operation_fee_parameters,\n  blind_transfer_operation_fee_parameters,\n  transfer_from_blind_operation_fee_parameters,\n  asset_settle_cancel_operation_fee_parameters,\n  asset_claim_fees_operation_fee_parameters,\n  fba_distribute_operation_fee_parameters,\n  asset_update_dividend_operation_fee_parameters,\n  asset_dividend_distribution_operation_fee_parameters,\n  sport_create_operation_fee_parameters,\n  sport_update_operation_fee_parameters,\n  event_group_create_operation_fee_parameters,\n  event_group_update_operation_fee_parameters,\n  event_create_operation_fee_parameters,\n  event_update_operation_fee_parameters,\n  betting_market_rules_create_operation_fee_parameters,\n  betting_market_rules_update_operation_fee_parameters,\n  betting_market_group_create_operation_fee_parameters,\n  betting_market_create_operation_fee_parameters,\n  bet_place_operation_fee_parameters,\n  betting_market_group_resolve_operation_fee_parameters,\n  betting_market_group_resolved_operation_fee_parameters,\n  betting_market_group_cancel_unmatched_bets_operation_fee_parameters,\n  bet_matched_operation_fee_parameters,\n  bet_cancel_operation_fee_parameters,\n  bet_canceled_operation_fee_parameters,\n  tournament_create_operation_fee_parameters,\n  tournament_join_operation_fee_parameters,\n  game_move_operation_fee_parameters,\n  tournament_payout_operation_fee_parameters,\n  tournament_leave_operation_fee_parameters,\n  betting_market_group_update_operation_fee_parameters,\n  betting_market_update_operation_fee_parameters,\n  bet_adjusted_operation_fee_parameters,\n  fee_schedule,\n  void_result,\n  asset,\n  processed_transaction,\n  signed_block,\n  block_header,\n  signed_block_header,\n  memo_data,\n  transfer,\n  limit_order_create,\n  limit_order_cancel,\n  call_order_update,\n  fill_order,\n  authority,\n  account_options,\n  account_create,\n  account_update,\n  account_whitelist,\n  account_upgrade,\n  account_transfer,\n  price,\n  asset_options,\n  bitasset_options,\n  asset_create,\n  asset_update,\n  asset_update_bitasset,\n  asset_update_feed_producers,\n  asset_issue,\n  asset_reserve,\n  asset_fund_fee_pool,\n  asset_settle,\n  asset_global_settle,\n  price_feed,\n  asset_publish_feed,\n  witness_create,\n  witness_update,\n  op_wrapper,\n  proposal_create,\n  proposal_update,\n  proposal_delete,\n  withdraw_permission_create,\n  withdraw_permission_update,\n  withdraw_permission_claim,\n  withdraw_permission_delete,\n  committee_member_create,\n  committee_member_update,\n  chain_parameters,\n  committee_member_update_global_parameters,\n  linear_vesting_policy_initializer,\n  cdd_vesting_policy_initializer,\n  vesting_balance_create,\n  vesting_balance_withdraw,\n  refund_worker_initializer,\n  vesting_balance_worker_initializer,\n  burn_worker_initializer,\n  worker_create,\n  custom,\n  account_name_eq_lit_predicate,\n  asset_symbol_eq_lit_predicate,\n  block_id_predicate,\n  assert,\n  balance_claim,\n  override_transfer,\n  stealth_confirmation,\n  blind_output,\n  transfer_to_blind,\n  blind_input,\n  blind_transfer,\n  transfer_from_blind,\n  asset_settle_cancel,\n  asset_claim_fees,\n  fba_distribute,\n  rock_paper_scissors_game_options,\n  tournament_options,\n  tournament_create,\n  tournament_join,\n  rock_paper_scissors_gesture,\n  rock_paper_scissors_throw_commit,\n  rock_paper_scissors_throw_reveal,\n  game_move,\n  dividend_asset_options,\n  asset_update_dividend,\n  asset_dividend_distribution,\n  sport_create,\n  sport_update,\n  event_group_create,\n  event_group_update,\n  event_create,\n  event_update,\n  betting_market_rules_create,\n  betting_market_rules_update,\n  betting_market_group_create,\n  betting_market_create,\n  bet_type,\n  bet_place,\n  betting_market_resolution_type,\n  betting_market_group_resolve,\n  betting_market_group_resolved,\n  betting_market_group_cancel_unmatched_bets,\n  bet_matched,\n  bet_cancel,\n  bet_canceled,\n  payout_type,\n  tournament_payout,\n  tournament_leave,\n  betting_market_group_update,\n  betting_market_update,\n  bet_adjusted,\n  transaction,\n  signed_transaction,\n  sport,\n  event_group,\n  event,\n  betting_market_rules,\n  betting_market_group,\n  betting_market,\n  bet,\n  betting_market_position,\n  global_betting_statistics,\n  stealth_memo_data\n};\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/serializer/src/operations.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 521,
    "kind": "variable",
    "name": "uint8",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~uint8",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 522,
    "kind": "variable",
    "name": "future_extensions",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~future_extensions",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 523,
    "kind": "function",
    "name": "Serializer",
    "memberof": "lib/serializer/src/operations.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/serializer/src/operations.js~Serializer",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "operation_name",
        "types": [
          "*"
        ]
      },
      {
        "name": "serilization_types_object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 524,
    "kind": "variable",
    "name": "fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~fee_parameters",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 551,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 525,
    "kind": "variable",
    "name": "operation_result",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~operation_result",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 639,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 526,
    "kind": "variable",
    "name": "vesting_policy_initializer",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~vesting_policy_initializer",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1086,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 527,
    "kind": "variable",
    "name": "worker_initializer",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~worker_initializer",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1117,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 528,
    "kind": "variable",
    "name": "predicate",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~predicate",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1156,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 529,
    "kind": "variable",
    "name": "game_specific_details",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~game_specific_details",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1257,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 530,
    "kind": "variable",
    "name": "game_specific_moves",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~game_specific_moves",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1307,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 531,
    "kind": "variable",
    "name": "event_status",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~event_status",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1644,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 532,
    "kind": "variable",
    "name": "betting_market_status",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_status",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1654,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 533,
    "kind": "variable",
    "name": "betting_market_group_status",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_group_status",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1662,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 534,
    "kind": "variable",
    "name": "operation",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~operation",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{operation}",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 535,
    "kind": "variable",
    "name": "transfer_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~transfer_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{transfer_operation_fee_parameters}",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 536,
    "kind": "variable",
    "name": "limit_order_create_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~limit_order_create_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{limit_order_create_operation_fee_parameters}",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 537,
    "kind": "variable",
    "name": "limit_order_cancel_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~limit_order_cancel_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{limit_order_cancel_operation_fee_parameters}",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 538,
    "kind": "variable",
    "name": "call_order_update_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~call_order_update_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{call_order_update_operation_fee_parameters}",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 539,
    "kind": "variable",
    "name": "fill_order_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~fill_order_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{fill_order_operation_fee_parameters}",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 540,
    "kind": "variable",
    "name": "account_create_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~account_create_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{account_create_operation_fee_parameters}",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 541,
    "kind": "variable",
    "name": "account_update_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~account_update_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{account_update_operation_fee_parameters}",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 542,
    "kind": "variable",
    "name": "account_whitelist_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~account_whitelist_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{account_whitelist_operation_fee_parameters}",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 543,
    "kind": "variable",
    "name": "account_upgrade_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~account_upgrade_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{account_upgrade_operation_fee_parameters}",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 544,
    "kind": "variable",
    "name": "account_transfer_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~account_transfer_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{account_transfer_operation_fee_parameters}",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 545,
    "kind": "variable",
    "name": "asset_create_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_create_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_create_operation_fee_parameters}",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 546,
    "kind": "variable",
    "name": "asset_update_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_update_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_update_operation_fee_parameters}",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 547,
    "kind": "variable",
    "name": "asset_update_bitasset_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_update_bitasset_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_update_bitasset_operation_fee_parameters}",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 548,
    "kind": "variable",
    "name": "asset_update_feed_producers_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_update_feed_producers_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_update_feed_producers_operation_fee_parameters}",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 549,
    "kind": "variable",
    "name": "asset_issue_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_issue_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_issue_operation_fee_parameters}",
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 550,
    "kind": "variable",
    "name": "asset_reserve_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_reserve_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_reserve_operation_fee_parameters}",
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 551,
    "kind": "variable",
    "name": "asset_fund_fee_pool_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_fund_fee_pool_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_fund_fee_pool_operation_fee_parameters}",
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 552,
    "kind": "variable",
    "name": "asset_settle_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_settle_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_settle_operation_fee_parameters}",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 553,
    "kind": "variable",
    "name": "asset_global_settle_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_global_settle_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_global_settle_operation_fee_parameters}",
    "description": null,
    "lineNumber": 194,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 554,
    "kind": "variable",
    "name": "asset_publish_feed_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_publish_feed_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_publish_feed_operation_fee_parameters}",
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 555,
    "kind": "variable",
    "name": "witness_create_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~witness_create_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{witness_create_operation_fee_parameters}",
    "description": null,
    "lineNumber": 208,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 556,
    "kind": "variable",
    "name": "witness_update_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~witness_update_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{witness_update_operation_fee_parameters}",
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 557,
    "kind": "variable",
    "name": "proposal_create_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~proposal_create_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{proposal_create_operation_fee_parameters}",
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 558,
    "kind": "variable",
    "name": "proposal_update_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~proposal_update_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{proposal_update_operation_fee_parameters}",
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 559,
    "kind": "variable",
    "name": "proposal_delete_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~proposal_delete_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{proposal_delete_operation_fee_parameters}",
    "description": null,
    "lineNumber": 238,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 560,
    "kind": "variable",
    "name": "withdraw_permission_create_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~withdraw_permission_create_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{withdraw_permission_create_operation_fee_parameters}",
    "description": null,
    "lineNumber": 245,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 561,
    "kind": "variable",
    "name": "withdraw_permission_update_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~withdraw_permission_update_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{withdraw_permission_update_operation_fee_parameters}",
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 562,
    "kind": "variable",
    "name": "withdraw_permission_claim_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~withdraw_permission_claim_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{withdraw_permission_claim_operation_fee_parameters}",
    "description": null,
    "lineNumber": 259,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 563,
    "kind": "variable",
    "name": "withdraw_permission_delete_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~withdraw_permission_delete_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{withdraw_permission_delete_operation_fee_parameters}",
    "description": null,
    "lineNumber": 267,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 564,
    "kind": "variable",
    "name": "committee_member_create_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~committee_member_create_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{committee_member_create_operation_fee_parameters}",
    "description": null,
    "lineNumber": 274,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 565,
    "kind": "variable",
    "name": "committee_member_update_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~committee_member_update_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{committee_member_update_operation_fee_parameters}",
    "description": null,
    "lineNumber": 281,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 566,
    "kind": "variable",
    "name": "committee_member_update_global_parameters_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~committee_member_update_global_parameters_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{committee_member_update_global_parameters_operation_fee_parameters}",
    "description": null,
    "lineNumber": 288,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 567,
    "kind": "variable",
    "name": "vesting_balance_create_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~vesting_balance_create_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{vesting_balance_create_operation_fee_parameters}",
    "description": null,
    "lineNumber": 295,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 568,
    "kind": "variable",
    "name": "vesting_balance_withdraw_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~vesting_balance_withdraw_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{vesting_balance_withdraw_operation_fee_parameters}",
    "description": null,
    "lineNumber": 302,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 569,
    "kind": "variable",
    "name": "worker_create_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~worker_create_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{worker_create_operation_fee_parameters}",
    "description": null,
    "lineNumber": 309,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 570,
    "kind": "variable",
    "name": "custom_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~custom_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{custom_operation_fee_parameters}",
    "description": null,
    "lineNumber": 316,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 571,
    "kind": "variable",
    "name": "assert_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~assert_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{assert_operation_fee_parameters}",
    "description": null,
    "lineNumber": 321,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 572,
    "kind": "variable",
    "name": "balance_claim_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~balance_claim_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{balance_claim_operation_fee_parameters}",
    "description": null,
    "lineNumber": 325,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 573,
    "kind": "variable",
    "name": "override_transfer_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~override_transfer_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{override_transfer_operation_fee_parameters}",
    "description": null,
    "lineNumber": 329,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 574,
    "kind": "variable",
    "name": "transfer_to_blind_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~transfer_to_blind_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{transfer_to_blind_operation_fee_parameters}",
    "description": null,
    "lineNumber": 337,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 575,
    "kind": "variable",
    "name": "blind_transfer_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~blind_transfer_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{blind_transfer_operation_fee_parameters}",
    "description": null,
    "lineNumber": 345,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 576,
    "kind": "variable",
    "name": "transfer_from_blind_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~transfer_from_blind_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{transfer_from_blind_operation_fee_parameters}",
    "description": null,
    "lineNumber": 353,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 577,
    "kind": "variable",
    "name": "asset_settle_cancel_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_settle_cancel_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_settle_cancel_operation_fee_parameters}",
    "description": null,
    "lineNumber": 360,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 578,
    "kind": "variable",
    "name": "asset_claim_fees_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_claim_fees_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_claim_fees_operation_fee_parameters}",
    "description": null,
    "lineNumber": 364,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 579,
    "kind": "variable",
    "name": "fba_distribute_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~fba_distribute_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{fba_distribute_operation_fee_parameters}",
    "description": null,
    "lineNumber": 371,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 580,
    "kind": "variable",
    "name": "asset_update_dividend_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_update_dividend_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_update_dividend_operation_fee_parameters}",
    "description": null,
    "lineNumber": 376,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 581,
    "kind": "variable",
    "name": "asset_dividend_distribution_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_dividend_distribution_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_dividend_distribution_operation_fee_parameters}",
    "description": null,
    "lineNumber": 383,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 582,
    "kind": "variable",
    "name": "sport_create_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~sport_create_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{sport_create_operation_fee_parameters}",
    "description": null,
    "lineNumber": 391,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 583,
    "kind": "variable",
    "name": "sport_update_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~sport_update_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{sport_update_operation_fee_parameters}",
    "description": null,
    "lineNumber": 398,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 584,
    "kind": "variable",
    "name": "event_group_create_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~event_group_create_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{event_group_create_operation_fee_parameters}",
    "description": null,
    "lineNumber": 405,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 585,
    "kind": "variable",
    "name": "event_group_update_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~event_group_update_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{event_group_update_operation_fee_parameters}",
    "description": null,
    "lineNumber": 412,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 586,
    "kind": "variable",
    "name": "event_create_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~event_create_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{event_create_operation_fee_parameters}",
    "description": null,
    "lineNumber": 419,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 587,
    "kind": "variable",
    "name": "event_update_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~event_update_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{event_update_operation_fee_parameters}",
    "description": null,
    "lineNumber": 426,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 588,
    "kind": "variable",
    "name": "betting_market_rules_create_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_rules_create_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_rules_create_operation_fee_parameters}",
    "description": null,
    "lineNumber": 433,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 589,
    "kind": "variable",
    "name": "betting_market_rules_update_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_rules_update_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_rules_update_operation_fee_parameters}",
    "description": null,
    "lineNumber": 440,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 590,
    "kind": "variable",
    "name": "betting_market_group_create_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_group_create_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_group_create_operation_fee_parameters}",
    "description": null,
    "lineNumber": 447,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 591,
    "kind": "variable",
    "name": "betting_market_create_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_create_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_create_operation_fee_parameters}",
    "description": null,
    "lineNumber": 454,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 592,
    "kind": "variable",
    "name": "bet_place_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~bet_place_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{bet_place_operation_fee_parameters}",
    "description": null,
    "lineNumber": 461,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 593,
    "kind": "variable",
    "name": "betting_market_group_resolve_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_group_resolve_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_group_resolve_operation_fee_parameters}",
    "description": null,
    "lineNumber": 468,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 594,
    "kind": "variable",
    "name": "betting_market_group_resolved_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_group_resolved_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_group_resolved_operation_fee_parameters}",
    "description": null,
    "lineNumber": 475,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 595,
    "kind": "variable",
    "name": "betting_market_group_cancel_unmatched_bets_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_group_cancel_unmatched_bets_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_group_cancel_unmatched_bets_operation_fee_parameters}",
    "description": null,
    "lineNumber": 479,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 596,
    "kind": "variable",
    "name": "bet_matched_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~bet_matched_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{bet_matched_operation_fee_parameters}",
    "description": null,
    "lineNumber": 486,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 597,
    "kind": "variable",
    "name": "bet_cancel_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~bet_cancel_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{bet_cancel_operation_fee_parameters}",
    "description": null,
    "lineNumber": 490,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 598,
    "kind": "variable",
    "name": "bet_canceled_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~bet_canceled_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{bet_canceled_operation_fee_parameters}",
    "description": null,
    "lineNumber": 497,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 599,
    "kind": "variable",
    "name": "tournament_create_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~tournament_create_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{tournament_create_operation_fee_parameters}",
    "description": null,
    "lineNumber": 501,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 600,
    "kind": "variable",
    "name": "tournament_join_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~tournament_join_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{tournament_join_operation_fee_parameters}",
    "description": null,
    "lineNumber": 508,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 601,
    "kind": "variable",
    "name": "game_move_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~game_move_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{game_move_operation_fee_parameters}",
    "description": null,
    "lineNumber": 515,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 602,
    "kind": "variable",
    "name": "tournament_payout_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~tournament_payout_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{tournament_payout_operation_fee_parameters}",
    "description": null,
    "lineNumber": 522,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 603,
    "kind": "variable",
    "name": "tournament_leave_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~tournament_leave_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{tournament_leave_operation_fee_parameters}",
    "description": null,
    "lineNumber": 526,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 604,
    "kind": "variable",
    "name": "betting_market_group_update_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_group_update_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_group_update_operation_fee_parameters}",
    "description": null,
    "lineNumber": 533,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 605,
    "kind": "variable",
    "name": "betting_market_update_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_update_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_update_operation_fee_parameters}",
    "description": null,
    "lineNumber": 540,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 606,
    "kind": "variable",
    "name": "bet_adjusted_operation_fee_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~bet_adjusted_operation_fee_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{bet_adjusted_operation_fee_parameters}",
    "description": null,
    "lineNumber": 547,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 607,
    "kind": "variable",
    "name": "fee_schedule",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~fee_schedule",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{fee_schedule}",
    "description": null,
    "lineNumber": 627,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 608,
    "kind": "variable",
    "name": "void_result",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~void_result",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{void_result}",
    "description": null,
    "lineNumber": 632,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 609,
    "kind": "variable",
    "name": "asset",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset}",
    "description": null,
    "lineNumber": 634,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 610,
    "kind": "variable",
    "name": "processed_transaction",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~processed_transaction",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{processed_transaction}",
    "description": null,
    "lineNumber": 641,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 611,
    "kind": "variable",
    "name": "signed_block",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~signed_block",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{signed_block}",
    "description": null,
    "lineNumber": 651,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 612,
    "kind": "variable",
    "name": "block_header",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~block_header",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{block_header}",
    "description": null,
    "lineNumber": 663,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 613,
    "kind": "variable",
    "name": "signed_block_header",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~signed_block_header",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{signed_block_header}",
    "description": null,
    "lineNumber": 673,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 614,
    "kind": "variable",
    "name": "memo_data",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~memo_data",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{memo_data}",
    "description": null,
    "lineNumber": 684,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 615,
    "kind": "variable",
    "name": "transfer",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~transfer",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{transfer}",
    "description": null,
    "lineNumber": 691,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 616,
    "kind": "variable",
    "name": "limit_order_create",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~limit_order_create",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{limit_order_create}",
    "description": null,
    "lineNumber": 700,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 617,
    "kind": "variable",
    "name": "limit_order_cancel",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~limit_order_cancel",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{limit_order_cancel}",
    "description": null,
    "lineNumber": 710,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 618,
    "kind": "variable",
    "name": "call_order_update",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~call_order_update",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{call_order_update}",
    "description": null,
    "lineNumber": 717,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 619,
    "kind": "variable",
    "name": "fill_order",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~fill_order",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{fill_order}",
    "description": null,
    "lineNumber": 725,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 620,
    "kind": "variable",
    "name": "authority",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~authority",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{authority}",
    "description": null,
    "lineNumber": 733,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 621,
    "kind": "variable",
    "name": "account_options",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~account_options",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{account_options}",
    "description": null,
    "lineNumber": 740,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 622,
    "kind": "variable",
    "name": "account_create",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~account_create",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{account_create}",
    "description": null,
    "lineNumber": 749,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 623,
    "kind": "variable",
    "name": "account_update",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~account_update",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{account_update}",
    "description": null,
    "lineNumber": 761,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 624,
    "kind": "variable",
    "name": "account_whitelist",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~account_whitelist",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{account_whitelist}",
    "description": null,
    "lineNumber": 770,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 625,
    "kind": "variable",
    "name": "account_upgrade",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~account_upgrade",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{account_upgrade}",
    "description": null,
    "lineNumber": 778,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 626,
    "kind": "variable",
    "name": "account_transfer",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~account_transfer",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{account_transfer}",
    "description": null,
    "lineNumber": 785,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 627,
    "kind": "variable",
    "name": "price",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~price",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{price}",
    "description": null,
    "lineNumber": 792,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 628,
    "kind": "variable",
    "name": "asset_options",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_options",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_options}",
    "description": null,
    "lineNumber": 797,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 629,
    "kind": "variable",
    "name": "bitasset_options",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~bitasset_options",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{bitasset_options}",
    "description": null,
    "lineNumber": 812,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 630,
    "kind": "variable",
    "name": "asset_create",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_create",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_create}",
    "description": null,
    "lineNumber": 822,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 631,
    "kind": "variable",
    "name": "asset_update",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_update",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_update}",
    "description": null,
    "lineNumber": 833,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 632,
    "kind": "variable",
    "name": "asset_update_bitasset",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_update_bitasset",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_update_bitasset}",
    "description": null,
    "lineNumber": 842,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 633,
    "kind": "variable",
    "name": "asset_update_feed_producers",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_update_feed_producers",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_update_feed_producers}",
    "description": null,
    "lineNumber": 850,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 634,
    "kind": "variable",
    "name": "asset_issue",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_issue",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_issue}",
    "description": null,
    "lineNumber": 858,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 635,
    "kind": "variable",
    "name": "asset_reserve",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_reserve",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_reserve}",
    "description": null,
    "lineNumber": 867,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 636,
    "kind": "variable",
    "name": "asset_fund_fee_pool",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_fund_fee_pool",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_fund_fee_pool}",
    "description": null,
    "lineNumber": 874,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 637,
    "kind": "variable",
    "name": "asset_settle",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_settle",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_settle}",
    "description": null,
    "lineNumber": 882,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 638,
    "kind": "variable",
    "name": "asset_global_settle",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_global_settle",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_global_settle}",
    "description": null,
    "lineNumber": 889,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 639,
    "kind": "variable",
    "name": "price_feed",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~price_feed",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{price_feed}",
    "description": null,
    "lineNumber": 897,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 640,
    "kind": "variable",
    "name": "asset_publish_feed",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_publish_feed",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_publish_feed}",
    "description": null,
    "lineNumber": 904,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 641,
    "kind": "variable",
    "name": "witness_create",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~witness_create",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{witness_create}",
    "description": null,
    "lineNumber": 912,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 642,
    "kind": "variable",
    "name": "witness_update",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~witness_update",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{witness_update}",
    "description": null,
    "lineNumber": 920,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 643,
    "kind": "variable",
    "name": "op_wrapper",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~op_wrapper",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{op_wrapper}",
    "description": null,
    "lineNumber": 929,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 644,
    "kind": "variable",
    "name": "proposal_create",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~proposal_create",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{proposal_create}",
    "description": null,
    "lineNumber": 933,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 645,
    "kind": "variable",
    "name": "proposal_update",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~proposal_update",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{proposal_update}",
    "description": null,
    "lineNumber": 942,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 646,
    "kind": "variable",
    "name": "proposal_delete",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~proposal_delete",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{proposal_delete}",
    "description": null,
    "lineNumber": 955,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 647,
    "kind": "variable",
    "name": "withdraw_permission_create",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~withdraw_permission_create",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{withdraw_permission_create}",
    "description": null,
    "lineNumber": 963,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 648,
    "kind": "variable",
    "name": "withdraw_permission_update",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~withdraw_permission_update",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{withdraw_permission_update}",
    "description": null,
    "lineNumber": 973,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 649,
    "kind": "variable",
    "name": "withdraw_permission_claim",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~withdraw_permission_claim",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{withdraw_permission_claim}",
    "description": null,
    "lineNumber": 984,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 650,
    "kind": "variable",
    "name": "withdraw_permission_delete",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~withdraw_permission_delete",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{withdraw_permission_delete}",
    "description": null,
    "lineNumber": 993,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 651,
    "kind": "variable",
    "name": "committee_member_create",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~committee_member_create",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{committee_member_create}",
    "description": null,
    "lineNumber": 1000,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 652,
    "kind": "variable",
    "name": "committee_member_update",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~committee_member_update",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{committee_member_update}",
    "description": null,
    "lineNumber": 1006,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 653,
    "kind": "variable",
    "name": "chain_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~chain_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{chain_parameters}",
    "description": null,
    "lineNumber": 1013,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 654,
    "kind": "variable",
    "name": "committee_member_update_global_parameters",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~committee_member_update_global_parameters",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{committee_member_update_global_parameters}",
    "description": null,
    "lineNumber": 1064,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 655,
    "kind": "variable",
    "name": "linear_vesting_policy_initializer",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~linear_vesting_policy_initializer",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{linear_vesting_policy_initializer}",
    "description": null,
    "lineNumber": 1072,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 656,
    "kind": "variable",
    "name": "cdd_vesting_policy_initializer",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~cdd_vesting_policy_initializer",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{cdd_vesting_policy_initializer}",
    "description": null,
    "lineNumber": 1081,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 657,
    "kind": "variable",
    "name": "vesting_balance_create",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~vesting_balance_create",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{vesting_balance_create}",
    "description": null,
    "lineNumber": 1091,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 658,
    "kind": "variable",
    "name": "vesting_balance_withdraw",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~vesting_balance_withdraw",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{vesting_balance_withdraw}",
    "description": null,
    "lineNumber": 1099,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 659,
    "kind": "variable",
    "name": "refund_worker_initializer",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~refund_worker_initializer",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{refund_worker_initializer}",
    "description": null,
    "lineNumber": 1106,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 660,
    "kind": "variable",
    "name": "vesting_balance_worker_initializer",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~vesting_balance_worker_initializer",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{vesting_balance_worker_initializer}",
    "description": null,
    "lineNumber": 1108,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 661,
    "kind": "variable",
    "name": "burn_worker_initializer",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~burn_worker_initializer",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{burn_worker_initializer}",
    "description": null,
    "lineNumber": 1115,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 662,
    "kind": "variable",
    "name": "worker_create",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~worker_create",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{worker_create}",
    "description": null,
    "lineNumber": 1123,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 663,
    "kind": "variable",
    "name": "custom",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~custom",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{custom}",
    "description": null,
    "lineNumber": 1134,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 664,
    "kind": "variable",
    "name": "account_name_eq_lit_predicate",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~account_name_eq_lit_predicate",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{account_name_eq_lit_predicate}",
    "description": null,
    "lineNumber": 1142,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 665,
    "kind": "variable",
    "name": "asset_symbol_eq_lit_predicate",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_symbol_eq_lit_predicate",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_symbol_eq_lit_predicate}",
    "description": null,
    "lineNumber": 1147,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 666,
    "kind": "variable",
    "name": "block_id_predicate",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~block_id_predicate",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{block_id_predicate}",
    "description": null,
    "lineNumber": 1152,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 667,
    "kind": "variable",
    "name": "assert",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~assert",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{assert}",
    "description": null,
    "lineNumber": 1162,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 668,
    "kind": "variable",
    "name": "balance_claim",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~balance_claim",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{balance_claim}",
    "description": null,
    "lineNumber": 1170,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 669,
    "kind": "variable",
    "name": "override_transfer",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~override_transfer",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{override_transfer}",
    "description": null,
    "lineNumber": 1178,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 670,
    "kind": "variable",
    "name": "stealth_confirmation",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~stealth_confirmation",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{stealth_confirmation}",
    "description": null,
    "lineNumber": 1188,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 671,
    "kind": "variable",
    "name": "blind_output",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~blind_output",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{blind_output}",
    "description": null,
    "lineNumber": 1194,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 672,
    "kind": "variable",
    "name": "transfer_to_blind",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~transfer_to_blind",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{transfer_to_blind}",
    "description": null,
    "lineNumber": 1201,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 673,
    "kind": "variable",
    "name": "blind_input",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~blind_input",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{blind_input}",
    "description": null,
    "lineNumber": 1209,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 674,
    "kind": "variable",
    "name": "blind_transfer",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~blind_transfer",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{blind_transfer}",
    "description": null,
    "lineNumber": 1214,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 675,
    "kind": "variable",
    "name": "transfer_from_blind",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~transfer_from_blind",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{transfer_from_blind}",
    "description": null,
    "lineNumber": 1220,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 676,
    "kind": "variable",
    "name": "asset_settle_cancel",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_settle_cancel",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_settle_cancel}",
    "description": null,
    "lineNumber": 1228,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 677,
    "kind": "variable",
    "name": "asset_claim_fees",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_claim_fees",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_claim_fees}",
    "description": null,
    "lineNumber": 1236,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 678,
    "kind": "variable",
    "name": "fba_distribute",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~fba_distribute",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{fba_distribute}",
    "description": null,
    "lineNumber": 1243,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 679,
    "kind": "variable",
    "name": "rock_paper_scissors_game_options",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~rock_paper_scissors_game_options",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{rock_paper_scissors_game_options}",
    "description": null,
    "lineNumber": 1250,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 680,
    "kind": "variable",
    "name": "tournament_options",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~tournament_options",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{tournament_options}",
    "description": null,
    "lineNumber": 1259,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 681,
    "kind": "variable",
    "name": "tournament_create",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~tournament_create",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{tournament_create}",
    "description": null,
    "lineNumber": 1273,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 682,
    "kind": "variable",
    "name": "tournament_join",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~tournament_join",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{tournament_join}",
    "description": null,
    "lineNumber": 1280,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 683,
    "kind": "variable",
    "name": "rock_paper_scissors_gesture",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~rock_paper_scissors_gesture",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{rock_paper_scissors_gesture}",
    "description": null,
    "lineNumber": 1289,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 684,
    "kind": "variable",
    "name": "rock_paper_scissors_throw_commit",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~rock_paper_scissors_throw_commit",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{rock_paper_scissors_throw_commit}",
    "description": null,
    "lineNumber": 1297,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 685,
    "kind": "variable",
    "name": "rock_paper_scissors_throw_reveal",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~rock_paper_scissors_throw_reveal",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{rock_paper_scissors_throw_reveal}",
    "description": null,
    "lineNumber": 1302,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 686,
    "kind": "variable",
    "name": "game_move",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~game_move",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{game_move}",
    "description": null,
    "lineNumber": 1312,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 687,
    "kind": "variable",
    "name": "dividend_asset_options",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~dividend_asset_options",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{dividend_asset_options}",
    "description": null,
    "lineNumber": 1320,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 688,
    "kind": "variable",
    "name": "asset_update_dividend",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_update_dividend",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_update_dividend}",
    "description": null,
    "lineNumber": 1328,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 689,
    "kind": "variable",
    "name": "asset_dividend_distribution",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~asset_dividend_distribution",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{asset_dividend_distribution}",
    "description": null,
    "lineNumber": 1336,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 690,
    "kind": "variable",
    "name": "sport_create",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~sport_create",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{sport_create}",
    "description": null,
    "lineNumber": 1344,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 691,
    "kind": "variable",
    "name": "sport_update",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~sport_update",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{sport_update}",
    "description": null,
    "lineNumber": 1350,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 692,
    "kind": "variable",
    "name": "event_group_create",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~event_group_create",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{event_group_create}",
    "description": null,
    "lineNumber": 1357,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 693,
    "kind": "variable",
    "name": "event_group_update",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~event_group_update",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{event_group_update}",
    "description": null,
    "lineNumber": 1364,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 694,
    "kind": "variable",
    "name": "event_create",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~event_create",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{event_create}",
    "description": null,
    "lineNumber": 1372,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 695,
    "kind": "variable",
    "name": "event_update",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~event_update",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{event_update}",
    "description": null,
    "lineNumber": 1381,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 696,
    "kind": "variable",
    "name": "betting_market_rules_create",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_rules_create",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_rules_create}",
    "description": null,
    "lineNumber": 1392,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 697,
    "kind": "variable",
    "name": "betting_market_rules_update",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_rules_update",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_rules_update}",
    "description": null,
    "lineNumber": 1399,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 698,
    "kind": "variable",
    "name": "betting_market_group_create",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_group_create",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_group_create}",
    "description": null,
    "lineNumber": 1407,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 699,
    "kind": "variable",
    "name": "betting_market_create",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_create",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_create}",
    "description": null,
    "lineNumber": 1416,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 700,
    "kind": "variable",
    "name": "bet_type",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~bet_type",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{bet_type}",
    "description": null,
    "lineNumber": 1424,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 701,
    "kind": "variable",
    "name": "bet_place",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~bet_place",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{bet_place}",
    "description": null,
    "lineNumber": 1426,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 702,
    "kind": "variable",
    "name": "betting_market_resolution_type",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_resolution_type",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_resolution_type}",
    "description": null,
    "lineNumber": 1436,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 703,
    "kind": "variable",
    "name": "betting_market_group_resolve",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_group_resolve",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_group_resolve}",
    "description": null,
    "lineNumber": 1443,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 704,
    "kind": "variable",
    "name": "betting_market_group_resolved",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_group_resolved",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_group_resolved}",
    "description": null,
    "lineNumber": 1450,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 705,
    "kind": "variable",
    "name": "betting_market_group_cancel_unmatched_bets",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_group_cancel_unmatched_bets",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_group_cancel_unmatched_bets}",
    "description": null,
    "lineNumber": 1459,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 706,
    "kind": "variable",
    "name": "bet_matched",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~bet_matched",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{bet_matched}",
    "description": null,
    "lineNumber": 1468,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 707,
    "kind": "variable",
    "name": "bet_cancel",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~bet_cancel",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{bet_cancel}",
    "description": null,
    "lineNumber": 1478,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 708,
    "kind": "variable",
    "name": "bet_canceled",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~bet_canceled",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{bet_canceled}",
    "description": null,
    "lineNumber": 1485,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 709,
    "kind": "variable",
    "name": "payout_type",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~payout_type",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{payout_type}",
    "description": null,
    "lineNumber": 1492,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 710,
    "kind": "variable",
    "name": "tournament_payout",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~tournament_payout",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{tournament_payout}",
    "description": null,
    "lineNumber": 1494,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 711,
    "kind": "variable",
    "name": "tournament_leave",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~tournament_leave",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{tournament_leave}",
    "description": null,
    "lineNumber": 1503,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 712,
    "kind": "variable",
    "name": "betting_market_group_update",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_group_update",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_group_update}",
    "description": null,
    "lineNumber": 1511,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 713,
    "kind": "variable",
    "name": "betting_market_update",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_update",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_update}",
    "description": null,
    "lineNumber": 1521,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 714,
    "kind": "variable",
    "name": "bet_adjusted",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~bet_adjusted",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{bet_adjusted}",
    "description": null,
    "lineNumber": 1530,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 715,
    "kind": "variable",
    "name": "transaction",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~transaction",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{transaction}",
    "description": null,
    "lineNumber": 1611,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 716,
    "kind": "variable",
    "name": "signed_transaction",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~signed_transaction",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{signed_transaction}",
    "description": null,
    "lineNumber": 1619,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 717,
    "kind": "variable",
    "name": "sport",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~sport",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{sport}",
    "description": null,
    "lineNumber": 1633,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 718,
    "kind": "variable",
    "name": "event_group",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~event_group",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{event_group}",
    "description": null,
    "lineNumber": 1638,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 719,
    "kind": "variable",
    "name": "event",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~event",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{event}",
    "description": null,
    "lineNumber": 1673,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 720,
    "kind": "variable",
    "name": "betting_market_rules",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_rules",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_rules}",
    "description": null,
    "lineNumber": 1684,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 721,
    "kind": "variable",
    "name": "betting_market_group",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_group",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_group}",
    "description": null,
    "lineNumber": 1690,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 722,
    "kind": "variable",
    "name": "betting_market",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market}",
    "description": null,
    "lineNumber": 1702,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 723,
    "kind": "variable",
    "name": "bet",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~bet",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{bet}",
    "description": null,
    "lineNumber": 1710,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 724,
    "kind": "variable",
    "name": "betting_market_position",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~betting_market_position",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{betting_market_position}",
    "description": null,
    "lineNumber": 1719,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 725,
    "kind": "variable",
    "name": "global_betting_statistics",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~global_betting_statistics",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{global_betting_statistics}",
    "description": null,
    "lineNumber": 1730,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 726,
    "kind": "variable",
    "name": "stealth_memo_data",
    "memberof": "lib/serializer/src/operations.js",
    "static": true,
    "longname": "lib/serializer/src/operations.js~stealth_memo_data",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/operations.js",
    "importStyle": "{stealth_memo_data}",
    "description": null,
    "lineNumber": 1740,
    "undocument": true,
    "type": {
      "types": [
        "lib/serializer/src/serializer.js~Serializer"
      ]
    }
  },
  {
    "__docId__": 727,
    "kind": "file",
    "name": "lib/serializer/src/precision.js",
    "content": "import BigInteger from 'bigi';\nimport v from './SerializerValidation';\n\n// _internal is for low-level transaction code\nconst _internal = {\n  // Warning: Long operations may over-flow without detection\n  to_long64(number_or_string, precision, error_info = '') {\n    v.required(number_or_string, `number_or_string ${error_info}`);\n    v.required(precision, `precision ${error_info}`);\n    return v.to_long(_internal.decimal_precision_string(number_or_string, precision, error_info));\n  },\n\n  decimal_precision_string(number, precision, error_info = '') {\n    v.required(number, `number ${error_info}`);\n    v.required(precision, `precision ${error_info}`);\n\n    let number_string = v.to_string(number);\n    number_string = number_string.trim();\n    precision = v.to_number(precision);\n\n    // remove leading zeros (not suffixing)\n    let number_parts = number_string.match(/^-?0*([0-9]*)\\.?([0-9]*)$/);\n\n    if (!number_parts) {\n      throw new Error(`Invalid number: ${number_string} ${error_info}`);\n    }\n\n    let sign = number_string.charAt(0) === '-' ? '-' : '';\n    let int_part = number_parts[1];\n    let decimal_part = number_parts[2];\n\n    if (!decimal_part) {\n      decimal_part = '';\n    }\n\n    // remove trailing zeros\n    while (/0$/.test(decimal_part)) {\n      decimal_part = decimal_part.substring(0, decimal_part.length - 1);\n    }\n\n    let zero_pad_count = precision - decimal_part.length;\n\n    if (zero_pad_count < 0) {\n      throw new Error(`overflow, up to ${precision} decimals may be used ${error_info}`);\n    }\n\n    if (sign === '-' && !/[1-9]/.test(int_part + decimal_part)) {\n      sign = '';\n    }\n\n    if (int_part === '') {\n      int_part = '0';\n    }\n\n    for (\n      let i = 0;\n      zero_pad_count > 0 ? i < zero_pad_count : i > zero_pad_count;\n      zero_pad_count > 0 ? i++ : i++\n    ) {\n      decimal_part += '0';\n    }\n\n    return sign + int_part + decimal_part;\n  }\n};\n\nconst _my = {\n  // Result may be used for int64 types (like transfer amount).  Asset's\n  // precision is used to convert the number to a whole number with an implied\n  // decimal place.\n\n  // \"1.01\" with a precision of 2 returns long 101\n  // See http://cryptocoinjs.com/modules/misc/bigi/#example\n\n  to_bigint64(number_or_string, precision, error_info = '') {\n    let long = _internal.to_long64(number_or_string, precision, error_info);\n    return BigInteger(long.toString());\n  },\n\n  // 101 string or long with a precision of 2 returns \"1.01\"\n  to_string64(number_or_string, precision, error_info = '') {\n    v.required(number_or_string, error_info);\n    v.number(precision, error_info);\n    let number_long = v.to_long(number_or_string, error_info);\n    let string64 = _internal.decimal_precision_string(number_long, precision, error_info);\n    v.no_overflow64(string64, error_info);\n    return string64;\n  },\n\n  _internal\n};\n\nexport default _my;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/serializer/src/precision.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 728,
    "kind": "variable",
    "name": "_internal",
    "memberof": "lib/serializer/src/precision.js",
    "static": true,
    "longname": "lib/serializer/src/precision.js~_internal",
    "access": "private",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/precision.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "{\"to_long64\": function, \"decimal_precision_string\": function}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 729,
    "kind": "variable",
    "name": "_my",
    "memberof": "lib/serializer/src/precision.js",
    "static": true,
    "longname": "lib/serializer/src/precision.js~_my",
    "access": "private",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/precision.js",
    "importStyle": "_my",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "{\"to_bigint64\": function, \"to_string64\": function, \"_internal\": *}"
      ]
    }
  },
  {
    "__docId__": 730,
    "kind": "file",
    "name": "lib/serializer/src/serializer.js",
    "content": "import ByteBuffer from 'bytebuffer';\nimport EC from './error_with_cause';\n\nconst HEX_DUMP = process.env.npm_config__graphene_serializer_hex_dump;\n\nclass Serializer {\n  constructor(operation_name, types) {\n    this.operation_name = operation_name;\n    this.types = types;\n\n    if (this.types) {\n      this.keys = Object.keys(this.types);\n    }\n\n    Serializer.printDebug = true;\n  }\n\n  fromByteBuffer(b) {\n    let object = {};\n    let field = null;\n\n    try {\n      let iterable = this.keys;\n\n      for (let i = 0; i < iterable.length; i++) {\n        field = iterable[i];\n        let type = this.types[field];\n\n        try {\n          if (HEX_DUMP) {\n            if (type.operation_name) {\n              console.error(type.operation_name);\n            } else {\n              let o1 = b.offset;\n              type.fromByteBuffer(b);\n              let o2 = b.offset;\n              b.offset = o1;\n              // b.reset()\n              let _b = b.copy(o1, o2);\n              console.error(`${this.operation_name}.${field}\\t`, _b.toHex());\n            }\n          }\n\n          object[field] = type.fromByteBuffer(b);\n        } catch (e) {\n          if (Serializer.printDebug) {\n            console.error(`Error reading ${this.operation_name}.${field} in data:`);\n            b.printDebug();\n          }\n\n          throw e;\n        }\n      }\n    } catch (error) {\n      EC.throw(`${this.operation_name}.${field}`, error);\n    }\n\n    return object;\n  }\n\n  appendByteBuffer(b, object) {\n    let field = null;\n\n    try {\n      let iterable = this.keys;\n\n      for (let i = 0; i < iterable.length; i++) {\n        field = iterable[i];\n        let type = this.types[field];\n        type.appendByteBuffer(b, object[field]);\n      }\n    } catch (error) {\n      try {\n        EC.throw(`${this.operation_name}.${field} = ${JSON.stringify(object[field])}`, error);\n      } catch (e) {\n        // circular ref\n        EC.throw(`${this.operation_name}.${field} = ${object[field]}`, error);\n      }\n    }\n  }\n\n  fromObject(serialized_object) {\n    let result = {};\n    let field = null;\n\n    try {\n      let iterable = this.keys;\n\n      for (let i = 0; i < iterable.length; i++) {\n        field = iterable[i];\n        let type = this.types[field];\n        let value = serialized_object[field];\n        // DEBUG value = value.resolve if value.resolve\n        // DEBUG console.log('... value',field,value)\n        let object = type.fromObject(value);\n        result[field] = object;\n      }\n    } catch (error) {\n      EC.throw(`${this.operation_name}.${field}`, error);\n    }\n\n    return result;\n  }\n\n  /**\n        @arg {boolean} [debug.use_default = false] - more template friendly\n        @arg {boolean} [debug.annotate = false] - add user-friendly information\n    */\n  toObject(serialized_object = {}, debug = {use_default: false, annotate: false}) {\n    let result = {};\n    let field = null;\n\n    try {\n      if (!this.types) {\n        return result;\n      }\n\n      let iterable = this.keys;\n\n      for (let i = 0; i < iterable.length; i++) {\n        field = iterable[i];\n        let type = this.types[field];\n        let object = type.toObject(\n          typeof serialized_object !== 'undefined' && serialized_object !== null\n            ? serialized_object[field]\n            : undefined,\n          debug\n        );\n        result[field] = object;\n\n        if (HEX_DUMP) {\n          let b = new ByteBuffer(ByteBuffer.DEFAULT_CAPACITY, ByteBuffer.LITTLE_ENDIAN);\n          type.appendByteBuffer(\n            b,\n            typeof serialized_object !== 'undefined' && serialized_object !== null\n              ? serialized_object[field]\n              : undefined\n          );\n          b = b.copy(0, b.offset);\n          console.error(`${this.operation_name}.${field}`, b.toHex());\n        }\n      }\n    } catch (error) {\n      EC.throw(`${this.operation_name}.${field}`, error);\n    }\n\n    return result;\n  }\n\n  /** Sort by the first element in a operation */\n  compare(a, b) {\n    let first_key = this.keys[0];\n    let first_type = this.types[first_key];\n\n    let valA = a[first_key];\n    let valB = b[first_key];\n\n    if (first_type.compare) {\n      return first_type.compare(valA, valB);\n    }\n\n    if (typeof valA === 'number' && typeof valB === 'number') {\n      return valA - valB;\n    }\n\n    let encoding;\n\n    if (Buffer.isBuffer(valA) && Buffer.isBuffer(valB)) {\n      // A binary string compare does not work.  If localeCompare is well supported that could\n      // replace HEX.  Performanance is very good so comparing HEX works.\n      encoding = 'hex';\n    }\n\n    let strA = valA.toString(encoding);\n    let strB = valB.toString(encoding);\n\n    let result = 0;\n\n    if (strA > strB) {\n      result = 1;\n    }\n\n    if (strA < strB) {\n      result = -1;\n    }\n\n    return result;\n  }\n\n  // <helper_functions>\n\n  fromHex(hex) {\n    let b = ByteBuffer.fromHex(hex, ByteBuffer.LITTLE_ENDIAN);\n    return this.fromByteBuffer(b);\n  }\n\n  fromBuffer(buffer) {\n    let b = ByteBuffer.fromBinary(buffer.toString('binary'), ByteBuffer.LITTLE_ENDIAN);\n    return this.fromByteBuffer(b);\n  }\n\n  toHex(object) {\n    // return this.toBuffer(object).toString(\"hex\")\n    let b = this.toByteBuffer(object);\n    return b.toHex();\n  }\n\n  toByteBuffer(object) {\n    let b = new ByteBuffer(ByteBuffer.DEFAULT_CAPACITY, ByteBuffer.LITTLE_ENDIAN);\n    this.appendByteBuffer(b, object);\n    return b.copy(0, b.offset);\n  }\n\n  toBuffer(object) {\n    return Buffer.from(this.toByteBuffer(object).toBinary(), 'binary');\n  }\n}\n\nexport default Serializer;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/serializer/src/serializer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 731,
    "kind": "variable",
    "name": "HEX_DUMP",
    "memberof": "lib/serializer/src/serializer.js",
    "static": true,
    "longname": "lib/serializer/src/serializer.js~HEX_DUMP",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/serializer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 732,
    "kind": "class",
    "name": "Serializer",
    "memberof": "lib/serializer/src/serializer.js",
    "static": true,
    "longname": "lib/serializer/src/serializer.js~Serializer",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/serializer.js",
    "importStyle": "Serializer",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 733,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/serializer/src/serializer.js~Serializer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/serializer/src/serializer.js~Serializer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 734,
    "kind": "member",
    "name": "operation_name",
    "memberof": "lib/serializer/src/serializer.js~Serializer",
    "static": false,
    "longname": "lib/serializer/src/serializer.js~Serializer#operation_name",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 735,
    "kind": "member",
    "name": "types",
    "memberof": "lib/serializer/src/serializer.js~Serializer",
    "static": false,
    "longname": "lib/serializer/src/serializer.js~Serializer#types",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 736,
    "kind": "member",
    "name": "keys",
    "memberof": "lib/serializer/src/serializer.js~Serializer",
    "static": false,
    "longname": "lib/serializer/src/serializer.js~Serializer#keys",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 737,
    "kind": "method",
    "name": "fromByteBuffer",
    "memberof": "lib/serializer/src/serializer.js~Serializer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/serializer/src/serializer.js~Serializer#fromByteBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 738,
    "kind": "method",
    "name": "appendByteBuffer",
    "memberof": "lib/serializer/src/serializer.js~Serializer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/serializer/src/serializer.js~Serializer#appendByteBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 739,
    "kind": "method",
    "name": "fromObject",
    "memberof": "lib/serializer/src/serializer.js~Serializer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/serializer/src/serializer.js~Serializer#fromObject",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "serialized_object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 740,
    "kind": "method",
    "name": "toObject",
    "memberof": "lib/serializer/src/serializer.js~Serializer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/serializer/src/serializer.js~Serializer#toObject",
    "access": "public",
    "description": "",
    "lineNumber": 109,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{boolean} [debug.use_default = false] - more template friendly"
      },
      {
        "tagName": "@arg",
        "tagValue": "{boolean} [debug.annotate = false] - add user-friendly information"
      }
    ],
    "params": [
      {
        "name": "serialized_object",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "debug",
        "optional": true,
        "types": [
          "{\"use_default\": boolean, \"annotate\": boolean}"
        ],
        "defaultRaw": {
          "use_default": false,
          "annotate": false
        },
        "defaultValue": "{\"use_default\":false,\"annotate\":false}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 741,
    "kind": "method",
    "name": "compare",
    "memberof": "lib/serializer/src/serializer.js~Serializer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/serializer/src/serializer.js~Serializer#compare",
    "access": "public",
    "description": "Sort by the first element in a operation",
    "lineNumber": 151,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 742,
    "kind": "method",
    "name": "fromHex",
    "memberof": "lib/serializer/src/serializer.js~Serializer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/serializer/src/serializer.js~Serializer#fromHex",
    "access": "public",
    "description": null,
    "lineNumber": 192,
    "undocument": true,
    "params": [
      {
        "name": "hex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 743,
    "kind": "method",
    "name": "fromBuffer",
    "memberof": "lib/serializer/src/serializer.js~Serializer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/serializer/src/serializer.js~Serializer#fromBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "params": [
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 744,
    "kind": "method",
    "name": "toHex",
    "memberof": "lib/serializer/src/serializer.js~Serializer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/serializer/src/serializer.js~Serializer#toHex",
    "access": "public",
    "description": null,
    "lineNumber": 202,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 745,
    "kind": "method",
    "name": "toByteBuffer",
    "memberof": "lib/serializer/src/serializer.js~Serializer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/serializer/src/serializer.js~Serializer#toByteBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 208,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 746,
    "kind": "method",
    "name": "toBuffer",
    "memberof": "lib/serializer/src/serializer.js~Serializer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/serializer/src/serializer.js~Serializer#toBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 214,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 747,
    "kind": "file",
    "name": "lib/serializer/src/template.js",
    "content": "/** Console print any transaction object with zero default values. */\nexport default function template(op) {\n  let object = op.toObject(undefined, {use_default: true, annotate: true});\n\n  // visual (with descriptions)\n  console.error(JSON.stringify(object, null, 4));\n\n  // usable in a copy-paste\n\n  object = op.toObject(undefined, {use_default: true, annotate: false});\n\n  // copy-paste one-lineer\n  console.error(JSON.stringify(object));\n}\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/serializer/src/template.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 748,
    "kind": "function",
    "name": "template",
    "memberof": "lib/serializer/src/template.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/serializer/src/template.js~template",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/template.js",
    "importStyle": "template",
    "description": "Console print any transaction object with zero default values.",
    "lineNumber": 2,
    "params": [
      {
        "name": "op",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 749,
    "kind": "file",
    "name": "lib/serializer/src/types.js",
    "content": "// Low-level types that make up operations\n\nimport {ChainConfig} from '../../ws';\nimport v from './SerializerValidation';\nimport fp from './FastParser';\n\nimport ChainTypes from '../../chain/src/ChainTypes';\nimport ObjectId from '../../chain/src/ObjectId';\n\nimport {PublicKey, Address} from '../../ecc';\n\nlet MIN_SIGNED_32 = -1 * Math.pow(2, 31);\nlet MAX_SIGNED_32 = Math.pow(2, 31) - 1;\n\nconst HEX_DUMP = process.env.npm_config__graphene_serializer_hex_dump;\n\nlet strCmp = (a, b) => {\n  let result = 0;\n\n  if (a > b) {\n    result = 1;\n  }\n\n  if (a < b) {\n    result = -1;\n  }\n\n  return result;\n};\n\nlet firstEl = (el) => (Array.isArray(el) ? el[0] : el);\n\nlet sortOperation = (array, st_operation) => {\n  if (!st_operation.nosort) {\n    // If the operation has its own compare function.\n    if (st_operation.compare) {\n      return array.sort((a, b) => st_operation.compare(firstEl(a), firstEl(b)));\n    }\n\n    return array.sort((a, b) => {\n      let aFirst = firstEl(a);\n      let bFirst = firstEl(b);\n\n      // If both of the first elements are numbers.\n      if (typeof aFirst === 'number' && typeof bFirst === 'number') {\n        return aFirst - bFirst;\n      }\n\n      // If they are both buffers.\n      if (Buffer.isBuffer(aFirst) && Buffer.isBuffer(bFirst)) {\n        return strCmp(aFirst.toString('hex'), bFirst.toString('hex'));\n      }\n\n      // Otherwise\n      return strCmp(aFirst.toString(), bFirst.toString());\n    });\n  }\n\n  return array;\n};\n\nconst Types = {};\n\nTypes.uint8 = {\n  fromByteBuffer(b) {\n    return b.readUint8();\n  },\n  appendByteBuffer(b, object) {\n    v.require_range(0, 0xff, object, `uint8 ${object}`);\n    b.writeUint8(object);\n  },\n  fromObject(object) {\n    v.require_range(0, 0xff, object, `uint8 ${object}`);\n    return object;\n  },\n  toObject(object, debug = {}) {\n    if (debug.use_default && object === undefined) {\n      return 0;\n    }\n\n    v.require_range(0, 0xff, object, `uint8 ${object}`);\n    return parseInt(object, 10);\n  }\n};\n\nTypes.uint16 = {\n  fromByteBuffer(b) {\n    return b.readUint16();\n  },\n  appendByteBuffer(b, object) {\n    v.require_range(0, 0xffff, object, `uint16 ${object}`);\n    b.writeUint16(object);\n  },\n  fromObject(object) {\n    v.require_range(0, 0xffff, object, `uint16 ${object}`);\n    return object;\n  },\n  toObject(object, debug = {}) {\n    if (debug.use_default && object === undefined) {\n      return 0;\n    }\n\n    v.require_range(0, 0xffff, object, `uint16 ${object}`);\n    return parseInt(object, 10);\n  }\n};\n\nTypes.uint32 = {\n  fromByteBuffer(b) {\n    return b.readUint32();\n  },\n  appendByteBuffer(b, object) {\n    v.require_range(0, 0xffffffff, object, `uint32 ${object}`);\n    b.writeUint32(object);\n  },\n  fromObject(object) {\n    v.require_range(0, 0xffffffff, object, `uint32 ${object}`);\n    return object;\n  },\n  toObject(object, debug = {}) {\n    if (debug.use_default && object === undefined) {\n      return 0;\n    }\n\n    v.require_range(0, 0xffffffff, object, `uint32 ${object}`);\n    return parseInt(object, 10);\n  }\n};\n\nTypes.varint32 = {\n  fromByteBuffer(b) {\n    return b.readVarint32();\n  },\n  appendByteBuffer(b, object) {\n    v.require_range(MIN_SIGNED_32, MAX_SIGNED_32, object, `uint32 ${object}`);\n    b.writeVarint32(object);\n  },\n  fromObject(object) {\n    v.require_range(MIN_SIGNED_32, MAX_SIGNED_32, object, `uint32 ${object}`);\n    return object;\n  },\n  toObject(object, debug = {}) {\n    if (debug.use_default && object === undefined) {\n      return 0;\n    }\n\n    v.require_range(MIN_SIGNED_32, MAX_SIGNED_32, object, `uint32 ${object}`);\n    return parseInt(object, 10);\n  }\n};\n\nTypes.int64 = {\n  fromByteBuffer(b) {\n    return b.readInt64();\n  },\n  appendByteBuffer(b, object) {\n    v.required(object);\n    b.writeInt64(v.to_long(object));\n  },\n  fromObject(object) {\n    v.required(object);\n    return v.to_long(object);\n  },\n  toObject(object, debug = {}) {\n    if (debug.use_default && object === undefined) {\n      return '0';\n    }\n\n    v.required(object);\n    return v.to_long(object).toString();\n  }\n};\n\nTypes.uint64 = {\n  fromByteBuffer(b) {\n    return b.readUint64();\n  },\n  appendByteBuffer(b, object) {\n    b.writeUint64(v.to_ulong(v.unsigned(object)));\n  },\n  fromObject(object) {\n    return v.to_ulong(v.unsigned(object));\n  },\n  toObject(object, debug = {}) {\n    if (debug.use_default && object === undefined) {\n      return '0';\n    }\n\n    return v.to_ulong(object).toString();\n  }\n};\n\nTypes.string = {\n  fromByteBuffer(b) {\n    let b_copy;\n    let len = b.readVarint32();\n    b_copy = b.copy(b.offset, b.offset + len);\n    b.skip(len);\n    return Buffer.from(b_copy.toBinary(), 'binary');\n  },\n  appendByteBuffer(b, object) {\n    v.required(object);\n    b.writeVarint32(object.length);\n    b.append(object.toString('binary'), 'binary');\n  },\n  fromObject(object) {\n    v.required(object);\n    return Buffer.from(object);\n  },\n  toObject(object, debug = {}) {\n    if (debug.use_default && object === undefined) {\n      return '';\n    }\n\n    return object.toString();\n  }\n};\n\nTypes.bytes = (size) => {\n  let bytes = {\n    fromByteBuffer(b) {\n      if (size === undefined) {\n        let b_copy;\n        let len = b.readVarint32();\n        b_copy = b.copy(b.offset, b.offset + len);\n        b.skip(len);\n        return Buffer.from(b_copy.toBinary(), 'binary');\n      }\n\n      let b_copy = b.copy(b.offset, b.offset + size);\n      b.skip(size);\n      return Buffer.from(b_copy.toBinary(), 'binary');\n    },\n    appendByteBuffer(b, object) {\n      v.required(object);\n\n      if (typeof object === 'string') {\n        object = Buffer.from(object, 'hex');\n      }\n\n      if (size === undefined) {\n        b.writeVarint32(object.length);\n      }\n\n      b.append(object.toString('binary'), 'binary');\n    },\n    fromObject(object) {\n      v.required(object);\n\n      if (Buffer.isBuffer(object)) {\n        return object;\n      }\n\n      return Buffer.from(object, 'hex');\n    },\n    toObject(object, debug = {}) {\n      if (debug.use_default && object === undefined) {\n        return new Array(size).join('00');\n      }\n\n      v.required(object);\n      return object.toString('hex');\n    }\n  };\n\n  return bytes;\n};\n\nTypes.bool = {\n  fromByteBuffer(b) {\n    return b.readUint8() === 1;\n  },\n  appendByteBuffer(b, object) {\n    // supports boolean or integer\n    b.writeUint8(JSON.parse(object) ? 1 : 0);\n  },\n  fromObject(object) {\n    return !!JSON.parse(object);\n  },\n  toObject(object, debug = {}) {\n    if (debug.use_default && object === undefined) {\n      return false;\n    }\n\n    return !!JSON.parse(object);\n  }\n};\n\nTypes.void = {\n  fromByteBuffer() {\n    throw new Error('(void) undefined type');\n  },\n  appendByteBuffer() {\n    throw new Error('(void) undefined type');\n  },\n  fromObject() {\n    throw new Error('(void) undefined type');\n  },\n  toObject(object, debug = {}) {\n    if (debug.use_default && object === undefined) {\n      return undefined;\n    }\n\n    throw new Error('(void) undefined type');\n  }\n};\n\nTypes.array = (st_operation) => {\n  let array = {\n    fromByteBuffer(b) {\n      let size = b.readVarint32();\n\n      if (HEX_DUMP) {\n        console.log(`varint32 size = ${size.toString(16)}`);\n      }\n\n      let result = [];\n\n      for (let i = 0; size > 0 ? i < size : i > size; size > 0 ? i++ : i++) {\n        result.push(st_operation.fromByteBuffer(b));\n      }\n\n      return sortOperation(result, st_operation);\n    },\n    appendByteBuffer(b, object) {\n      v.required(object);\n      object = sortOperation(object, st_operation);\n      b.writeVarint32(object.length);\n\n      for (let i = 0, len = object.length; i < len; i++) {\n        let o = object[i];\n        st_operation.appendByteBuffer(b, o);\n      }\n    },\n    fromObject(object) {\n      v.required(object);\n      object = sortOperation(object, st_operation);\n      let result = [];\n\n      for (let i = 0, len = object.length; i < len; i++) {\n        let o = object[i];\n        result.push(st_operation.fromObject(o));\n      }\n\n      return result;\n    },\n    toObject(object, debug = {}) {\n      if (debug.use_default && object === undefined) {\n        return [st_operation.toObject(object, debug)];\n      }\n\n      v.required(object);\n      object = sortOperation(object, st_operation);\n\n      let result = [];\n\n      for (let i = 0, len = object.length; i < len; i++) {\n        let o = object[i];\n        result.push(st_operation.toObject(o, debug));\n      }\n\n      return result;\n    }\n  };\n\n  return array;\n};\n\nTypes.time_point_sec = {\n  fromByteBuffer(b) {\n    return b.readUint32();\n  },\n  appendByteBuffer(b, object) {\n    if (typeof object !== 'number') {\n      object = Types.time_point_sec.fromObject(object);\n    }\n\n    b.writeUint32(object);\n  },\n  fromObject(object) {\n    v.required(object);\n\n    if (typeof object === 'number') {\n      return object;\n    }\n\n    if (object.getTime) {\n      return Math.floor(object.getTime() / 1000);\n    }\n\n    if (typeof object !== 'string') {\n      throw new Error(`Unknown date type: ${object}`);\n    }\n\n    // if(typeof object === \"string\" && !/Z$/.test(object))\n    //     object = object + \"Z\"\n\n    return Math.floor(new Date(object).getTime() / 1000);\n  },\n  toObject(object, debug = {}) {\n    if (debug.use_default && object === undefined) {\n      return new Date(0).toISOString().split('.')[0];\n    }\n\n    v.required(object);\n\n    if (typeof object === 'string') {\n      return object;\n    }\n\n    if (object.getTime) {\n      return object.toISOString().split('.')[0];\n    }\n\n    let int = parseInt(object, 10);\n    v.require_range(0, 0xffffffff, int, `uint32 ${object}`);\n    return new Date(int * 1000).toISOString().split('.')[0];\n  }\n};\n\nTypes.set = (st_operation) => {\n  let set_object = {\n    validate(array) {\n      let dup_map = {};\n\n      for (let i = 0, len = array.length; i < len; i++) {\n        let o = array[i];\n        let ref = typeof o;\n\n        if (['string', 'number'].indexOf(ref) >= 0) {\n          if (dup_map[o] !== undefined) {\n            throw new Error('duplicate (set)');\n          }\n\n          dup_map[o] = true;\n        }\n      }\n\n      return sortOperation(array, st_operation);\n    },\n    fromByteBuffer(b) {\n      let size = b.readVarint32();\n\n      if (HEX_DUMP) {\n        console.log(`varint32 size = ${size.toString(16)}`);\n      }\n\n      return this.validate(\n        (() => {\n          let result = [];\n\n          for (let i = 0; size > 0 ? i < size : i > size; size > 0 ? i++ : i++) {\n            result.push(st_operation.fromByteBuffer(b));\n          }\n\n          return result;\n        })()\n      );\n    },\n    appendByteBuffer(b, object) {\n      if (!object) {\n        object = [];\n      }\n\n      b.writeVarint32(object.length);\n      let iterable = this.validate(object);\n\n      for (let i = 0, len = iterable.length; i < len; i++) {\n        let o = iterable[i];\n        st_operation.appendByteBuffer(b, o);\n      }\n    },\n    fromObject(object) {\n      if (!object) {\n        object = [];\n      }\n\n      return this.validate(\n        (() => {\n          let result = [];\n\n          for (let i = 0, len = object.length; i < len; i++) {\n            let o = object[i];\n            result.push(st_operation.fromObject(o));\n          }\n\n          return result;\n        })()\n      );\n    },\n    toObject(object, debug = {}) {\n      if (debug.use_default && object === undefined) {\n        return [st_operation.toObject(object, debug)];\n      }\n\n      if (!object) {\n        object = [];\n      }\n\n      let result = [];\n\n      for (let i = 0, len = object.length; i < len; i++) {\n        let o = object[i];\n        result.push(st_operation.toObject(o, debug));\n      }\n\n      return this.validate(result);\n    }\n  };\n\n  return set_object;\n};\n\nTypes.fixed_array = (count, st_operation) => {\n  let fixed_array = {\n    fromByteBuffer(b) {\n      let results = [];\n\n      for (let i = 0, ref = count; i < ref; i++) {\n        results.push(st_operation.fromByteBuffer(b));\n      }\n\n      return sortOperation(results, st_operation);\n    },\n    appendByteBuffer(b, object) {\n      if (count !== 0) {\n        v.required(object);\n        object = sortOperation(object, st_operation);\n      }\n\n      for (let i = 0, ref = count; i < ref; i++) {\n        st_operation.appendByteBuffer(b, object[i]);\n      }\n    },\n    fromObject(object) {\n      if (count !== 0) {\n        v.required(object);\n      }\n\n      let results = [];\n\n      for (let i = 0, ref = count; i < ref; i++) {\n        results.push(st_operation.fromObject(object[i]));\n      }\n\n      return results;\n    },\n    toObject(object, debug) {\n      if (debug == null) {\n        debug = {};\n      }\n\n      let results;\n\n      if (debug.use_default && object === undefined) {\n        results = [];\n\n        for (let i = 0, ref = count; i < ref; i++) {\n          results.push(st_operation.toObject(undefined, debug));\n        }\n\n        return results;\n      }\n\n      if (count !== 0) {\n        v.required(object);\n      }\n\n      results = [];\n\n      for (let i = 0, ref = count; i < ref; i++) {\n        results.push(st_operation.toObject(object[i], debug));\n      }\n\n      return results;\n    }\n  };\n\n  return fixed_array;\n};\n\n/* Supports instance numbers (11) or object types (1.2.11).  Object type\nValidation is enforced when an object type is used. */\nTypes.id_type = (reserved_spaces, object_type) => {\n  v.required(reserved_spaces, 'reserved_spaces');\n  v.required(object_type, 'object_type');\n\n  let id_type_object = {\n    fromByteBuffer(b) {\n      return b.readVarint32();\n    },\n    appendByteBuffer(b, object) {\n      v.required(object);\n\n      if (object.resolve !== undefined) {\n        object = object.resolve;\n      }\n\n      // convert 1.2.n into just n\n      if (/^[0-9]+\\.[0-9]+\\.[0-9]+$/.test(object)) {\n        object = v.get_instance(reserved_spaces, object_type, object);\n      }\n\n      b.writeVarint32(v.to_number(object));\n    },\n    fromObject(object) {\n      v.required(object);\n\n      if (object.resolve !== undefined) {\n        object = object.resolve;\n      }\n\n      if (v.is_digits(object)) {\n        return v.to_number(object);\n      }\n\n      return v.get_instance(reserved_spaces, object_type, object);\n    },\n    toObject(object, debug = {}) {\n      let object_type_id = ChainTypes.object_type[object_type];\n\n      if (debug.use_default && object === undefined) {\n        return `${reserved_spaces}.${object_type_id}.0`;\n      }\n\n      v.required(object);\n\n      if (object.resolve !== undefined) {\n        object = object.resolve;\n      }\n\n      if (/^[0-9]+\\.[0-9]+\\.[0-9]+$/.test(object)) {\n        object = v.get_instance(reserved_spaces, object_type, object);\n      }\n\n      return `${reserved_spaces}.${object_type_id}.${object}`;\n    }\n  };\n\n  return id_type_object;\n};\n\nTypes.protocol_id_type = (name) => {\n  v.required(name, 'name');\n  return Types.id_type(ChainTypes.reserved_spaces.protocol_ids, name);\n};\n\nTypes.implementation_id_type = (name) => {\n  let result = Types.id_type(ChainTypes.reserved_spaces.implementation_ids, name);\n  return result;\n};\n\nTypes.object_id_type = {\n  fromByteBuffer(b) {\n    return ObjectId.fromByteBuffer(b);\n  },\n  appendByteBuffer(b, object) {\n    v.required(object);\n\n    if (object.resolve !== undefined) {\n      object = object.resolve;\n    }\n\n    object = ObjectId.fromString(object);\n    object.appendByteBuffer(b);\n  },\n  fromObject(object) {\n    v.required(object);\n\n    if (object.resolve !== undefined) {\n      object = object.resolve;\n    }\n\n    return ObjectId.fromString(object);\n  },\n  toObject(object, debug = {}) {\n    if (debug.use_default && object === undefined) {\n      return '0.0.0';\n    }\n\n    v.required(object);\n\n    if (object.resolve !== undefined) {\n      object = object.resolve;\n    }\n\n    object = ObjectId.fromString(object);\n    return object.toString();\n  }\n};\n\nTypes.vote_id = {\n  TYPE: 0x000000ff,\n  ID: 0xffffff00,\n  fromByteBuffer(b) {\n    let value = b.readUint32();\n    return {\n      type: value & this.TYPE, // eslint-disable-line\n      id: value & this.ID // eslint-disable-line\n    };\n  },\n  appendByteBuffer(b, object) {\n    v.required(object);\n\n    if (object === 'string') {\n      object = Types.vote_id.fromObject(object);\n    }\n\n    let value = (object.id << 8) | object.type; // eslint-disable-line\n    b.writeUint32(value);\n  },\n  fromObject(object) {\n    v.required(object, '(type vote_id)');\n\n    if (typeof object === 'object') {\n      v.required(object.type, 'type');\n      v.required(object.id, 'id');\n      return object;\n    }\n\n    v.require_test(/^[0-9]+:[0-9]+$/, object, `vote_id format ${object}`);\n    let [type, id] = object.split(':');\n    v.require_range(0, 0xff, type, `vote type ${object}`);\n    v.require_range(0, 0xffffff, id, `vote id ${object}`);\n    return {type, id};\n  },\n  toObject(object, debug = {}) {\n    if (debug.use_default && object === undefined) {\n      return '0:0';\n    }\n\n    v.required(object);\n\n    if (typeof object === 'string') {\n      object = Types.vote_id.fromObject(object);\n    }\n\n    return `${object.type}:${object.id}`;\n  },\n  compare(a, b) {\n    if (typeof a !== 'object') {\n      a = Types.vote_id.fromObject(a);\n    }\n\n    if (typeof b !== 'object') {\n      b = Types.vote_id.fromObject(b);\n    }\n\n    return parseInt(a.id, 10) - parseInt(b.id, 10);\n  }\n};\n\nTypes.optional = (st_operation) => {\n  v.required(st_operation, 'st_operation');\n  return {\n    fromByteBuffer(b) {\n      if (!(b.readUint8() === 1)) {\n        return undefined;\n      }\n\n      return st_operation.fromByteBuffer(b);\n    },\n    appendByteBuffer(b, object) {\n      if (object !== null && object !== undefined) {\n        b.writeUint8(1);\n        st_operation.appendByteBuffer(b, object);\n      } else {\n        b.writeUint8(0);\n      }\n    },\n    fromObject(object) {\n      if (object === undefined) {\n        return undefined;\n      }\n\n      return st_operation.fromObject(object);\n    },\n    toObject(object, debug = {}) {\n      // toObject is only null save if use_default is true\n      let result_object = (() => {\n        if (!debug.use_default && object === undefined) {\n          return undefined;\n        }\n\n        return st_operation.toObject(object, debug);\n      })();\n\n      if (debug.annotate) {\n        if (typeof result_object === 'object') {\n          result_object.__optional = 'parent is optional';\n        } else {\n          result_object = {__optional: result_object};\n        }\n      }\n\n      return result_object;\n    }\n  };\n};\n\nTypes.static_variant = (_st_operations) => {\n  let static_variant = {\n    nosort: true,\n    st_operations: _st_operations,\n    fromByteBuffer(b) {\n      let type_id = b.readVarint32();\n      let st_operation = this.st_operations[type_id];\n\n      if (HEX_DUMP) {\n        console.error(`static_variant id 0x${type_id.toString(16)} (${type_id})`);\n      }\n\n      v.required(st_operation, `operation ${type_id}`);\n      return [type_id, st_operation.fromByteBuffer(b)];\n    },\n    appendByteBuffer(b, object) {\n      v.required(object);\n      let type_id = object[0];\n      let st_operation = this.st_operations[type_id];\n      v.required(st_operation, `operation ${type_id}`);\n      b.writeVarint32(type_id);\n      st_operation.appendByteBuffer(b, object[1]);\n    },\n    fromObject(object) {\n      v.required(object);\n      let type_id = object[0];\n      let st_operation = this.st_operations[type_id];\n\n      v.required(st_operation, `operation ${type_id}`);\n      return [type_id, st_operation.fromObject(object[1])];\n    },\n    toObject(object, debug = {}) {\n      if (debug.use_default && object === undefined) {\n        return [0, this.st_operations[0].toObject(undefined, debug)];\n      }\n\n      v.required(object);\n      let type_id = object[0];\n      let st_operation = this.st_operations[type_id];\n      v.required(st_operation, `operation ${type_id}`);\n      return [type_id, st_operation.toObject(object[1], debug)];\n    }\n  };\n\n  return static_variant;\n};\n\nTypes.map = (key_st_operation, value_st_operation) => {\n  let map_object = {\n    validate(array) {\n      if (!Array.isArray(array)) {\n        throw new Error('expecting array');\n      }\n\n      let dup_map = {};\n\n      for (let i = 0, len = array.length; i < len; i++) {\n        let o = array[i];\n        let ref;\n\n        if (!(o.length === 2)) {\n          throw new Error('expecting two elements');\n        }\n\n        ref = typeof o[0];\n\n        if (ref && ['number', 'string'].indexOf(ref) >= 0) {\n          if (dup_map[o[0]] !== undefined) {\n            throw new Error('duplicate (map)');\n          }\n\n          dup_map[o[0]] = true;\n        }\n      }\n\n      return sortOperation(array, key_st_operation);\n    },\n\n    fromByteBuffer(b) {\n      let result = [];\n      let end = b.readVarint32();\n\n      for (let i = 0; end > 0 ? i < end : i > end; end > 0 ? i++ : i++) {\n        result.push([key_st_operation.fromByteBuffer(b), value_st_operation.fromByteBuffer(b)]);\n      }\n\n      return this.validate(result);\n    },\n\n    appendByteBuffer(b, object) {\n      this.validate(object);\n      b.writeVarint32(object.length);\n\n      for (let i = 0, len = object.length; i < len; i++) {\n        let o = object[i];\n        key_st_operation.appendByteBuffer(b, o[0]);\n        value_st_operation.appendByteBuffer(b, o[1]);\n      }\n    },\n    fromObject(object) {\n      v.required(object);\n      let result = [];\n\n      for (let i = 0, len = object.length; i < len; i++) {\n        let o = object[i];\n        result.push([key_st_operation.fromObject(o[0]), value_st_operation.fromObject(o[1])]);\n      }\n\n      return this.validate(result);\n    },\n    toObject(object, debug = {}) {\n      if (debug.use_default && object === undefined) {\n        return [\n          [\n            key_st_operation.toObject(undefined, debug),\n            value_st_operation.toObject(undefined, debug)\n          ]\n        ];\n      }\n\n      v.required(object);\n      object = this.validate(object);\n      let result = [];\n\n      for (let i = 0, len = object.length; i < len; i++) {\n        let o = object[i];\n        result.push([\n          key_st_operation.toObject(o[0], debug),\n          value_st_operation.toObject(o[1], debug)\n        ]);\n      }\n\n      return result;\n    }\n  };\n\n  return map_object;\n};\n\nTypes.public_key = {\n  toPublic(object) {\n    if (object.resolve !== undefined) {\n      object = object.resolve;\n    }\n\n    if (object instanceof PublicKey) {\n      return object;\n    }\n\n    let result = object;\n\n    if (!object) {\n      return null;\n    }\n\n    if (!object.Q) {\n      result = PublicKey.fromStringOrThrow(object);\n    }\n\n    return result;\n  },\n  fromByteBuffer(b) {\n    return fp.public_key(b);\n  },\n  appendByteBuffer(b, object) {\n    v.required(object);\n    fp.public_key(b, Types.public_key.toPublic(object));\n  },\n  fromObject(object) {\n    v.required(object);\n\n    if (object.Q) {\n      return object;\n    }\n\n    return Types.public_key.toPublic(object);\n  },\n  toObject(object, debug = {}) {\n    if (debug.use_default && object === undefined) {\n      return `${ChainConfig.address_prefix}859gxfnXyUriMgUeThh1fWv3oqcpLFyHa3TfFYC4PK2HqhToVM`;\n    }\n\n    v.required(object);\n    return object.toString();\n  },\n  compare(a, b) {\n    return strCmp(a.toAddressString(), b.toAddressString());\n  }\n};\n\nTypes.address = {\n  _to_address(object) {\n    v.required(object);\n\n    if (object.addy) {\n      return object;\n    }\n\n    return Address.fromString(object);\n  },\n  fromByteBuffer(b) {\n    return new Address(fp.ripemd160(b));\n  },\n  appendByteBuffer(b, object) {\n    fp.ripemd160(b, Types.address._to_address(object).toBuffer());\n  },\n  fromObject(object) {\n    return Types.address._to_address(object);\n  },\n  toObject(object, debug = {}) {\n    if (debug.use_default && object === undefined) {\n      return `${ChainConfig.address_prefix}664KmHxSuQyDsfwo4WEJvWpzg1QKdg67S`;\n    }\n\n    return Types.address._to_address(object).toString();\n  },\n  compare(a, b) {\n    return strCmp(a.toString(), b.toString());\n  }\n};\n\nTypes.variant = {\n  fromByteBuffer(b) {\n    let type = b.readUint8();\n\n    switch (type) {\n      case 0:\n        return null;\n      case 1:\n        return Types.int64.fromByteBuffer(b);\n      case 2:\n        return Types.uint64.fromByteBuffer(b);\n      case 3:\n        return b.readDouble();\n      case 4:\n        return Types.bool.fromByteBuffer(b);\n      case 5:\n        return Types.string.fromByteBuffer(b);\n      case 6:\n        return Types.array(Types.variant).fromByteBuffer(b);\n      case 7:\n      default:\n        return Types.variant_object.fromByteBuffer(b);\n    }\n  },\n\n  appendByteBuffer(b, object) {\n    if (typeof object === 'number') {\n      if (Number.isInteger(object)) {\n        if (object >= 0) {\n          b.writeUint8(2);\n          Types.uint64.appendByteBuffer(b, object);\n        } else {\n          b.writeUint8(1);\n          Types.int64.appendByteBuffer(b, object);\n        }\n      } else {\n        b.writeUint8(3);\n        b.writeDouble(Number.parseFloat(object));\n      }\n    } else if (typeof object === 'boolean') {\n      b.writeUint8(4);\n      Types.bool.appendByteBuffer(b, object);\n    } else if (typeof object === 'string') {\n      b.writeUint8(5);\n      Types.string.appendByteBuffer(b, object);\n    } else if (Array.isArray(object)) {\n      b.writeUint8(6);\n      Types.array(Types.variant).appendByteBuffer(b, object);\n    } else {\n      b.writeUint8(7);\n      Types.variant_object.appendByteBuffer(b, object);\n    }\n  },\n\n  fromObject(object) {\n    return JSON.parse(object);\n  },\n\n  toObject(object) {\n    return JSON.parse(object);\n  }\n};\n\nTypes.variant_object = {\n  fromByteBuffer(b) {\n    let count = b.readVarint32();\n    let result = {};\n\n    for (let i = 0; i < count; ++i) {\n      let key = Types.string.fromByteBuffer(b);\n      result[key] = Types.variant.fromByteBuffer(b);\n    }\n\n    return result;\n  },\n\n  appendByteBuffer(b, object) {\n    let keys = Object.keys(object);\n\n    b.writeVarint32(keys.length); // number of key/value pairs\n\n    for (let i = 0, len = keys.length; i < len; i++) {\n      let key = keys[i];\n      Types.string.appendByteBuffer(b, key);\n      Types.variant.appendByteBuffer(b, object[key]);\n    }\n  },\n  fromObject(object) {\n    let newObject = {};\n\n    let keys = Object.keys(object);\n\n    for (let i = 0, len = keys.length; i < len; i++) {\n      let key = keys[i];\n      newObject[key] = object[key];\n    }\n\n    return newObject;\n  },\n  toObject(object) {\n    let newObject = {};\n\n    let keys = Object.keys(object);\n\n    for (let i = 0, len = keys.length; i < len; i++) {\n      let key = keys[i];\n      newObject[key] = object[key];\n    }\n\n    return newObject;\n  }\n};\n\nTypes.enumeration = (values) => {\n  let enumeration = {\n    fromByteBuffer(b) {\n      return values[b.readVarint32ZigZag()];\n    },\n    appendByteBuffer(b, object) {\n      b.writeVarint32ZigZag(values.indexOf(object));\n    },\n    fromObject(object) {\n      return object;\n    },\n    toObject(object) {\n      return object;\n    }\n  };\n\n  return enumeration;\n};\n\nTypes.sha256 = Types.bytes(32);\n\nexport default Types;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/serializer/src/types.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 750,
    "kind": "variable",
    "name": "MIN_SIGNED_32",
    "memberof": "lib/serializer/src/types.js",
    "static": true,
    "longname": "lib/serializer/src/types.js~MIN_SIGNED_32",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 751,
    "kind": "variable",
    "name": "MAX_SIGNED_32",
    "memberof": "lib/serializer/src/types.js",
    "static": true,
    "longname": "lib/serializer/src/types.js~MAX_SIGNED_32",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 752,
    "kind": "variable",
    "name": "HEX_DUMP",
    "memberof": "lib/serializer/src/types.js",
    "static": true,
    "longname": "lib/serializer/src/types.js~HEX_DUMP",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 753,
    "kind": "function",
    "name": "strCmp",
    "memberof": "lib/serializer/src/types.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/serializer/src/types.js~strCmp",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 754,
    "kind": "function",
    "name": "firstEl",
    "memberof": "lib/serializer/src/types.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/serializer/src/types.js~firstEl",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "el",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 755,
    "kind": "function",
    "name": "sortOperation",
    "memberof": "lib/serializer/src/types.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/serializer/src/types.js~sortOperation",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/serializer/src/types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      },
      {
        "name": "st_operation",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 756,
    "kind": "variable",
    "name": "Types",
    "memberof": "lib/serializer/src/types.js",
    "static": true,
    "longname": "lib/serializer/src/types.js~Types",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/serializer/src/types.js",
    "importStyle": "Types",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 757,
    "kind": "file",
    "name": "lib/ws/ApiInstances.js",
    "content": "import ChainWebSocket from './ChainWebSocket';\nimport GrapheneApi from './GrapheneApi';\nimport ChainConfig from './ChainConfig';\n\nlet inst;\n\nclass ApisInstance {\n  /** @arg {string} connection .. */\n  connect(cs, connectTimeout) {\n    let rpc_user = '';\n    let rpc_password = '';\n\n    if (\n      typeof window !== 'undefined'\n      && window.location\n      && window.location.protocol === 'https:'\n      && cs.indexOf('wss://') < 0\n    ) {\n      throw new Error('Secure domains require wss connection');\n    }\n\n    this.ws_rpc = new ChainWebSocket(cs, this.statusCb, connectTimeout);\n\n    this.init_promise = this.ws_rpc.login(rpc_user, rpc_password).then(() => {\n      console.log('Connected to API node:', cs);\n      this._db = new GrapheneApi(this.ws_rpc, 'database');\n      this._net = new GrapheneApi(this.ws_rpc, 'network_broadcast');\n      this._hist = new GrapheneApi(this.ws_rpc, 'history');\n      this._crypto = new GrapheneApi(this.ws_rpc, 'crypto');\n      this._bookie = new GrapheneApi(this.ws_rpc, 'bookie');\n      let db_promise = this._db.init()\n        .then(() => this._db.exec('get_chain_id', []).then((_chain_id) => {\n          this.chain_id = _chain_id;\n          return ChainConfig.setChainId(_chain_id);\n        }));\n\n      this.ws_rpc.on_reconnect = () => {\n        this.ws_rpc.login('', '').then(() => {\n          this._db.init().then(() => {\n            if (this.statusCb) {\n              this.statusCb(ChainWebSocket.status.RECONNECTED);\n            }\n          });\n          this._net.init();\n          this._hist.init();\n          this._crypto.init();\n          this._bookie.init();\n        });\n      };\n\n      return Promise.all([\n        db_promise,\n        this._net.init(),\n        this._hist.init(),\n        // Temporary squash crypto API error until the API is upgraded everywhere\n        this._crypto.init().catch((e) => console.error('ApiInstance\\tCrypto API Error', e)),\n        this._bookie.init()\n      ]);\n    });\n  }\n\n  close() {\n    if (this.ws_rpc) {\n      this.ws_rpc.close();\n    }\n\n    this.ws_rpc = null;\n  }\n\n  db_api() {\n    return this._db;\n  }\n\n  network_api() {\n    return this._net;\n  }\n\n  history_api() {\n    return this._hist;\n  }\n\n  crypto_api() {\n    return this._crypto;\n  }\n\n  bookie_api() {\n    return this._bookie;\n  }\n\n  setRpcConnectionStatusCallback(callback) {\n    this.statusCb = callback;\n  }\n}\n\n/**\n    Configure: configure as follows `Apis.instance(\"ws://localhost:8090\").init_promise`.  This\n    returns a promise, once resolved the connection is ready.\n\n    Import: import { Apis } from \"@graphene/chain\"\n\n    Short-hand: Apis.db(\"method\", \"parm1\", 2, 3, ...).  Returns a promise with results.\n\n    Additional usage: Apis.instance().db_api().exec(\"method\", [\"method\", \"parm1\", 2, 3, ...]).\n    Returns a promise with results.\n*/\n\nexport default {\n  setRpcConnectionStatusCallback(callback) {\n    this.statusCb = callback;\n\n    if (inst) {\n      inst.setRpcConnectionStatusCallback(callback);\n    }\n  },\n  /**\n        @arg {string} cs is only provided in the first call\n        @return {Apis} singleton .. Check Apis.instance().init_promise to\n        know when the connection is established\n    */\n  reset(cs = 'ws://localhost:8090', connect, connectTimeout = 4000) {\n    if (inst) {\n      inst.close();\n      inst = null;\n    }\n\n    inst = new ApisInstance();\n    inst.setRpcConnectionStatusCallback(this.statusCb);\n\n    if (inst && connect) {\n      inst.connect(\n        cs,\n        connectTimeout\n      );\n    }\n\n    return inst;\n  },\n  instance(cs = 'ws://localhost:8090', connect, connectTimeout = 4000) {\n    if (!inst) {\n      inst = new ApisInstance();\n      inst.setRpcConnectionStatusCallback(this.statusCb);\n    }\n\n    if (inst && connect) {\n      inst.connect(\n        cs,\n        connectTimeout\n      );\n    }\n\n    return inst;\n  },\n  chainId() {\n    return this.instance().chain_id;\n  },\n  close() {\n    if (inst) {\n      inst.close();\n      inst = null;\n    }\n  }\n  // db: (method, ...args) => Apis.instance().db_api().exec(method, toStrings(args)),\n  // network: (method, ...args) => Apis.instance().network_api().exec(method, toStrings(args)),\n  // history: (method, ...args) => Apis.instance().history_api().exec(method, toStrings(args)),\n  // crypto: (method, ...args) => Apis.instance().crypto_api().exec(method, toStrings(args))\n};\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/ws/ApiInstances.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 758,
    "kind": "class",
    "name": "ApisInstance",
    "memberof": "lib/ws/ApiInstances.js",
    "static": true,
    "longname": "lib/ws/ApiInstances.js~ApisInstance",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ws/ApiInstances.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 759,
    "kind": "method",
    "name": "connect",
    "memberof": "lib/ws/ApiInstances.js~ApisInstance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ApiInstances.js~ApisInstance#connect",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{string} connection .."
      }
    ],
    "params": [
      {
        "name": "cs",
        "types": [
          "*"
        ]
      },
      {
        "name": "connectTimeout",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 760,
    "kind": "member",
    "name": "ws_rpc",
    "memberof": "lib/ws/ApiInstances.js~ApisInstance",
    "static": false,
    "longname": "lib/ws/ApiInstances.js~ApisInstance#ws_rpc",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 761,
    "kind": "member",
    "name": "init_promise",
    "memberof": "lib/ws/ApiInstances.js~ApisInstance",
    "static": false,
    "longname": "lib/ws/ApiInstances.js~ApisInstance#init_promise",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 762,
    "kind": "member",
    "name": "_db",
    "memberof": "lib/ws/ApiInstances.js~ApisInstance",
    "static": false,
    "longname": "lib/ws/ApiInstances.js~ApisInstance#_db",
    "access": "private",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 763,
    "kind": "member",
    "name": "_net",
    "memberof": "lib/ws/ApiInstances.js~ApisInstance",
    "static": false,
    "longname": "lib/ws/ApiInstances.js~ApisInstance#_net",
    "access": "private",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 764,
    "kind": "member",
    "name": "_hist",
    "memberof": "lib/ws/ApiInstances.js~ApisInstance",
    "static": false,
    "longname": "lib/ws/ApiInstances.js~ApisInstance#_hist",
    "access": "private",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 765,
    "kind": "member",
    "name": "_crypto",
    "memberof": "lib/ws/ApiInstances.js~ApisInstance",
    "static": false,
    "longname": "lib/ws/ApiInstances.js~ApisInstance#_crypto",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 766,
    "kind": "member",
    "name": "_bookie",
    "memberof": "lib/ws/ApiInstances.js~ApisInstance",
    "static": false,
    "longname": "lib/ws/ApiInstances.js~ApisInstance#_bookie",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 767,
    "kind": "member",
    "name": "chain_id",
    "memberof": "lib/ws/ApiInstances.js~ApisInstance",
    "static": false,
    "longname": "lib/ws/ApiInstances.js~ApisInstance#chain_id",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 768,
    "kind": "method",
    "name": "close",
    "memberof": "lib/ws/ApiInstances.js~ApisInstance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ApiInstances.js~ApisInstance#close",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 770,
    "kind": "method",
    "name": "db_api",
    "memberof": "lib/ws/ApiInstances.js~ApisInstance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ApiInstances.js~ApisInstance#db_api",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 771,
    "kind": "method",
    "name": "network_api",
    "memberof": "lib/ws/ApiInstances.js~ApisInstance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ApiInstances.js~ApisInstance#network_api",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 772,
    "kind": "method",
    "name": "history_api",
    "memberof": "lib/ws/ApiInstances.js~ApisInstance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ApiInstances.js~ApisInstance#history_api",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 773,
    "kind": "method",
    "name": "crypto_api",
    "memberof": "lib/ws/ApiInstances.js~ApisInstance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ApiInstances.js~ApisInstance#crypto_api",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 774,
    "kind": "method",
    "name": "bookie_api",
    "memberof": "lib/ws/ApiInstances.js~ApisInstance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ApiInstances.js~ApisInstance#bookie_api",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 775,
    "kind": "method",
    "name": "setRpcConnectionStatusCallback",
    "memberof": "lib/ws/ApiInstances.js~ApisInstance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ApiInstances.js~ApisInstance#setRpcConnectionStatusCallback",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 776,
    "kind": "member",
    "name": "statusCb",
    "memberof": "lib/ws/ApiInstances.js~ApisInstance",
    "static": false,
    "longname": "lib/ws/ApiInstances.js~ApisInstance#statusCb",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 777,
    "kind": "file",
    "name": "lib/ws/ApisInstance.js",
    "content": "let ChainWebSocket = require('./ChainWebSocket');\nlet GrapheneApi = require('./GrapheneApi');\n\nclass ApisInstance {\n  constructor(ChainConfig) {\n    this.chainConfig = ChainConfig;\n  }\n\n  /** @arg {string} connection .. */\n  connect(cs) {\n    // console.log(\"INFO\\tApiInstances\\tconnect\\t\", cs);\n\n    let rpc_user = '';\n    let rpc_password = '';\n\n    if (\n      typeof window !== 'undefined'\n      && window.location && window.location.protocol === 'https:' && cs.indexOf('wss://') < 0\n    ) {\n      throw new Error('Secure domains require wss connection');\n    }\n\n    this.ws_rpc = new ChainWebSocket(cs, this.statusCb);\n\n    this.init_promise = this.ws_rpc.login(rpc_user, rpc_password).then(() => {\n      // console.log(\"Login done\");\n      this._db = new GrapheneApi(this.ws_rpc, 'database');\n      this._net = new GrapheneApi(this.ws_rpc, 'network_broadcast');\n      this._hist = new GrapheneApi(this.ws_rpc, 'history');\n      this._crypt = new GrapheneApi(this.ws_rpc, 'crypto');\n      this._bookie = new GrapheneApi(this.ws_rpc, 'bookie');\n      let db_promise = this._db.init().then(() => this._db.exec('get_chain_id', [])\n        .then((_chain_id) => {\n          this.chain_id = _chain_id;\n\n          if (this.chainConfig) {\n            return this.chainConfig.setChainId(_chain_id);\n          }\n\n          return _chain_id;\n        }));\n\n      this.ws_rpc.on_reconnect = () => {\n        this.ws_rpc.login('', '').then(() => {\n          this._db.init().then(() => {\n            if (this.statusCb) {\n              this.statusCb('reconnect');\n            }\n          });\n          this._net.init();\n          this._hist.init();\n          this._crypt.init();\n          this._bookie.init();\n        });\n      };\n\n      return Promise.all([\n        db_promise,\n        this._net.init(),\n        this._hist.init(),\n        // Temporary squash crypto API error until the API is upgraded everywhere\n        this._crypt.init().catch((e) => console.error('ApiInstance\\tCrypto API Error', e)),\n        this._bookie.init()\n      ]);\n    });\n  }\n\n  close() {\n    this.ws_rpc.close();\n    this.ws_rpc = null;\n  }\n\n  db_api() {\n    return this._db;\n  }\n\n  network_api() {\n    return this._net;\n  }\n\n  history_api() {\n    return this._hist;\n  }\n\n  crypto_api() {\n    return this._crypt;\n  }\n\n  bookie_api() {\n    return this._bookie;\n  }\n\n  setRpcConnectionStatusCallback(callback) {\n    this.statusCb = callback;\n  }\n}\n\nmodule.exports = ApisInstance;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/ws/ApisInstance.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 778,
    "kind": "variable",
    "name": "ChainWebSocket",
    "memberof": "lib/ws/ApisInstance.js",
    "static": true,
    "longname": "lib/ws/ApisInstance.js~ChainWebSocket",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ws/ApisInstance.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 779,
    "kind": "variable",
    "name": "GrapheneApi",
    "memberof": "lib/ws/ApisInstance.js",
    "static": true,
    "longname": "lib/ws/ApisInstance.js~GrapheneApi",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ws/ApisInstance.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 780,
    "kind": "class",
    "name": "ApisInstance",
    "memberof": "lib/ws/ApisInstance.js",
    "static": true,
    "longname": "lib/ws/ApisInstance.js~ApisInstance",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ws/ApisInstance.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 781,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/ws/ApisInstance.js~ApisInstance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ApisInstance.js~ApisInstance#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 782,
    "kind": "member",
    "name": "chainConfig",
    "memberof": "lib/ws/ApisInstance.js~ApisInstance",
    "static": false,
    "longname": "lib/ws/ApisInstance.js~ApisInstance#chainConfig",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 783,
    "kind": "method",
    "name": "connect",
    "memberof": "lib/ws/ApisInstance.js~ApisInstance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ApisInstance.js~ApisInstance#connect",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@arg",
        "tagValue": "{string} connection .."
      }
    ],
    "params": [
      {
        "name": "cs",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 784,
    "kind": "member",
    "name": "ws_rpc",
    "memberof": "lib/ws/ApisInstance.js~ApisInstance",
    "static": false,
    "longname": "lib/ws/ApisInstance.js~ApisInstance#ws_rpc",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 785,
    "kind": "member",
    "name": "init_promise",
    "memberof": "lib/ws/ApisInstance.js~ApisInstance",
    "static": false,
    "longname": "lib/ws/ApisInstance.js~ApisInstance#init_promise",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 786,
    "kind": "member",
    "name": "_db",
    "memberof": "lib/ws/ApisInstance.js~ApisInstance",
    "static": false,
    "longname": "lib/ws/ApisInstance.js~ApisInstance#_db",
    "access": "private",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 787,
    "kind": "member",
    "name": "_net",
    "memberof": "lib/ws/ApisInstance.js~ApisInstance",
    "static": false,
    "longname": "lib/ws/ApisInstance.js~ApisInstance#_net",
    "access": "private",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 788,
    "kind": "member",
    "name": "_hist",
    "memberof": "lib/ws/ApisInstance.js~ApisInstance",
    "static": false,
    "longname": "lib/ws/ApisInstance.js~ApisInstance#_hist",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 789,
    "kind": "member",
    "name": "_crypt",
    "memberof": "lib/ws/ApisInstance.js~ApisInstance",
    "static": false,
    "longname": "lib/ws/ApisInstance.js~ApisInstance#_crypt",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 790,
    "kind": "member",
    "name": "_bookie",
    "memberof": "lib/ws/ApisInstance.js~ApisInstance",
    "static": false,
    "longname": "lib/ws/ApisInstance.js~ApisInstance#_bookie",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 791,
    "kind": "member",
    "name": "chain_id",
    "memberof": "lib/ws/ApisInstance.js~ApisInstance",
    "static": false,
    "longname": "lib/ws/ApisInstance.js~ApisInstance#chain_id",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 792,
    "kind": "method",
    "name": "close",
    "memberof": "lib/ws/ApisInstance.js~ApisInstance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ApisInstance.js~ApisInstance#close",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 794,
    "kind": "method",
    "name": "db_api",
    "memberof": "lib/ws/ApisInstance.js~ApisInstance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ApisInstance.js~ApisInstance#db_api",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 795,
    "kind": "method",
    "name": "network_api",
    "memberof": "lib/ws/ApisInstance.js~ApisInstance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ApisInstance.js~ApisInstance#network_api",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 796,
    "kind": "method",
    "name": "history_api",
    "memberof": "lib/ws/ApisInstance.js~ApisInstance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ApisInstance.js~ApisInstance#history_api",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 797,
    "kind": "method",
    "name": "crypto_api",
    "memberof": "lib/ws/ApisInstance.js~ApisInstance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ApisInstance.js~ApisInstance#crypto_api",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 798,
    "kind": "method",
    "name": "bookie_api",
    "memberof": "lib/ws/ApisInstance.js~ApisInstance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ApisInstance.js~ApisInstance#bookie_api",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 799,
    "kind": "method",
    "name": "setRpcConnectionStatusCallback",
    "memberof": "lib/ws/ApisInstance.js~ApisInstance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ApisInstance.js~ApisInstance#setRpcConnectionStatusCallback",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 800,
    "kind": "member",
    "name": "statusCb",
    "memberof": "lib/ws/ApisInstance.js~ApisInstance",
    "static": false,
    "longname": "lib/ws/ApisInstance.js~ApisInstance#statusCb",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 801,
    "kind": "file",
    "name": "lib/ws/ChainConfig.js",
    "content": "const defaults = {\n  core_asset: 'PPY',\n  address_prefix: 'PPY',\n  expire_in_secs: 15,\n  expire_in_secs_proposal: 24 * 60 * 60,\n  review_in_secs_committee: 24 * 60 * 60\n};\n\nconst networks = {\n  networks: {\n    Peerplays: {\n      core_asset: 'PPY',\n      address_prefix: 'PPY',\n      chain_id:\n        '6b6b5f0ce7a36d323768e534f3edb41c6d6332a541a95725b98e28d140850134'\n    },\n    PeerplaysTestnet: {\n      core_asset: 'PPYTEST',\n      address_prefix: 'PPYTEST',\n      chain_id:\n        'be6b79295e728406cbb7494bcb626e62ad278fa4018699cf8f75739f4c1a81fd'\n    }\n  }\n};\n\nclass ChainConfig {\n  constructor() {\n    this.reset();\n  }\n\n  reset() {\n    Object.assign(this, defaults);\n  }\n\n  setChainId(chainID) {\n    let ref = Object.keys(networks);\n\n    for (let i = 0, len = ref.length; i < len; i++) {\n      let network_name = ref[i];\n      let network = networks[network_name];\n\n      if (network.chain_id === chainID) {\n        this.network_name = network_name;\n\n        if (network.address_prefix) {\n          this.address_prefix = network.address_prefix;\n        }\n\n        return {\n          network_name,\n          network\n        };\n      }\n    }\n\n    if (!this.network_name) {\n      console.log('Unknown chain id (this may be a testnet)', chainID);\n    }\n  }\n\n  setPrefix(prefix = 'PPY') {\n    this.address_prefix = prefix;\n  }\n}\nexport default new ChainConfig();\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/ws/ChainConfig.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 802,
    "kind": "variable",
    "name": "defaults",
    "memberof": "lib/ws/ChainConfig.js",
    "static": true,
    "longname": "lib/ws/ChainConfig.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ws/ChainConfig.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "{\"core_asset\": string, \"address_prefix\": string, \"expire_in_secs\": number, \"expire_in_secs_proposal\": *, \"review_in_secs_committee\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 803,
    "kind": "variable",
    "name": "networks",
    "memberof": "lib/ws/ChainConfig.js",
    "static": true,
    "longname": "lib/ws/ChainConfig.js~networks",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ws/ChainConfig.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{\"networks\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 804,
    "kind": "class",
    "name": "ChainConfig",
    "memberof": "lib/ws/ChainConfig.js",
    "static": true,
    "longname": "lib/ws/ChainConfig.js~ChainConfig",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ws/ChainConfig.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "pseudoExport": true,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 805,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/ws/ChainConfig.js~ChainConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ChainConfig.js~ChainConfig#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true
  },
  {
    "__docId__": 806,
    "kind": "method",
    "name": "reset",
    "memberof": "lib/ws/ChainConfig.js~ChainConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ChainConfig.js~ChainConfig#reset",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 807,
    "kind": "method",
    "name": "setChainId",
    "memberof": "lib/ws/ChainConfig.js~ChainConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ChainConfig.js~ChainConfig#setChainId",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "chainID",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"network_name\": *, \"network\": *}"
      ]
    }
  },
  {
    "__docId__": 808,
    "kind": "member",
    "name": "network_name",
    "memberof": "lib/ws/ChainConfig.js~ChainConfig",
    "static": false,
    "longname": "lib/ws/ChainConfig.js~ChainConfig#network_name",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 809,
    "kind": "member",
    "name": "address_prefix",
    "memberof": "lib/ws/ChainConfig.js~ChainConfig",
    "static": false,
    "longname": "lib/ws/ChainConfig.js~ChainConfig#address_prefix",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 810,
    "kind": "method",
    "name": "setPrefix",
    "memberof": "lib/ws/ChainConfig.js~ChainConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ChainConfig.js~ChainConfig#setPrefix",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "prefix",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "PPY",
        "defaultValue": "PPY"
      }
    ],
    "return": null
  },
  {
    "__docId__": 812,
    "kind": "variable",
    "name": "chainConfig",
    "memberof": "lib/ws/ChainConfig.js",
    "static": true,
    "longname": "lib/ws/ChainConfig.js~chainConfig",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ws/ChainConfig.js",
    "importStyle": "chainConfig",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "lib/ws/ChainConfig.js~ChainConfig"
      ]
    }
  },
  {
    "__docId__": 813,
    "kind": "file",
    "name": "lib/ws/ChainWebSocket.js",
    "content": "let SOCKET_DEBUG = false;\nlet WebSocketClient = null;\n\nif (typeof WebSocket !== 'undefined') {\n  WebSocketClient = WebSocket;\n} else {\n  WebSocketClient = require('ws'); // eslint-disable-line global-require\n}\n\nconst SUBSCRIBE_OPERATIONS = [\n  'set_subscribe_callback',\n  'subscribe_to_market',\n  'broadcast_transaction_with_callback',\n  'set_pending_transaction_callback'\n];\n\nconst UNSUBSCRIBE_OPERATIONS = ['unsubscribe_from_market', 'unsubscribe_from_accounts'];\n\nconst HEALTH_CHECK_INTERVAL = 10000;\n\nclass ChainWebSocket {\n  /**\n   *Creates an instance of ChainWebSocket.\n   * @param {string}    serverAddress           The address of the websocket to connect to.\n   * @param {function}  statusCb                Called when status events occur.\n   * @param {number}    [connectTimeout=10000]  The time for a connection attempt to complete.\n   * @memberof ChainWebSocket\n   */\n  constructor(serverAddress, statusCb, connectTimeout = 10000) {\n    this.statusCb = statusCb;\n    this.serverAddress = serverAddress;\n    this.timeoutInterval = connectTimeout;\n\n    // The currenct connection state of the websocket.\n    this.connected = false;\n    this.reconnectTimeout = null;\n\n    // Callback to execute when the websocket is reconnected.\n    this.on_reconnect = null;\n\n    // An incrementing ID for each request so that we can pair it with the\n    // response from the websocket.\n    this.cbId = 0;\n\n    // Objects to store key/value pairs for callbacks, subscription callbacks\n    // and unsubscribe callbacks.\n    this.cbs = {};\n    this.subs = {};\n    this.unsub = {};\n\n    // Current connection promises' rejection\n    this.currentResolve = null;\n    this.currentReject = null;\n\n    // Health check for the connection to the BlockChain.\n    this.healthCheck = null;\n\n    // Copy the constants to this instance.\n    this.status = ChainWebSocket.status;\n\n    // Bind the functions to the instance.\n    this.onConnectionOpen = this.onConnectionOpen.bind(this);\n    this.onConnectionClose = this.onConnectionClose.bind(this);\n    this.onConnectionTerminate = this.onConnectionTerminate.bind(this);\n    this.onConnectionError = this.onConnectionError.bind(this);\n    this.onConnectionTimeout = this.onConnectionTimeout.bind(this);\n    this.createConnection = this.createConnection.bind(this);\n    this.createConnectionPromise = this.createConnectionPromise.bind(this);\n    this.listener = this.listener.bind(this);\n\n    // Create the initial connection the blockchain.\n    this.createConnection();\n  }\n\n  /**\n   * Create the connection to the Blockchain.\n   *\n   * @returns\n   * @memberof ChainWebSocket\n   */\n  createConnection() {\n    this.debug('!!! ChainWebSocket create connection');\n\n    // Clear any possible reconnect timers.\n    this.reconnectTimeout = null;\n\n    // Create the promise for this connection\n    if (!this.connect_promise) {\n      this.connect_promise = new Promise(this.createConnectionPromise);\n    }\n\n    // Attempt to create the websocket\n    try {\n      this.ws = new WebSocketClient(this.serverAddress);\n    } catch (error) {\n      // Set a timeout to try and reconnect here.\n      return this.resetConnection();\n    }\n\n    this.addEventListeners();\n\n    // Handle timeouts to the websocket's initial connection.\n    this.connectionTimeout = setTimeout(this.onConnectionTimeout, this.timeoutInterval);\n  }\n\n  /**\n   * Reset the connection to the BlockChain.\n   *\n   * @memberof ChainWebSocket\n   */\n  resetConnection() {\n    // Close the Websocket if its still 'half-open'\n    this.close();\n\n    // Make sure we only ever have one timeout running to reconnect.\n    if (!this.reconnectTimeout) {\n      this.debug('!!! ChainWebSocket reset connection', this.timeoutInterval);\n      this.reconnectTimeout = setTimeout(this.createConnection, this.timeoutInterval);\n    }\n\n    // Reject the current promise if there is one.\n    if (this.currentReject) {\n      this.currentReject(new Error(`Connection attempt failed: ${this.serverAddress}`));\n    }\n  }\n\n  /**\n   * Add event listeners to the WebSocket.\n   *\n   * @memberof ChainWebSocket\n   */\n  addEventListeners() {\n    this.debug('!!! ChainWebSocket add event listeners');\n    this.ws.addEventListener('open', this.onConnectionOpen);\n    this.ws.addEventListener('close', this.onConnectionClose);\n    this.ws.addEventListener('error', this.onConnectionError);\n    this.ws.addEventListener('message', this.listener);\n  }\n\n  /**\n   * Remove the event listers from the WebSocket. Its important to remove the event listerers\n   * for garbaage collection. Because we are creating a new WebSocket on each connection attempt\n   * any listeners that are still attached could prevent the old sockets from\n   * being garbage collected.\n   *\n   * @memberof ChainWebSocket\n   */\n  removeEventListeners() {\n    this.debug('!!! ChainWebSocket remove event listeners');\n    this.ws.removeEventListener('open', this.onConnectionOpen);\n    this.ws.removeEventListener('close', this.onConnectionClose);\n    this.ws.removeEventListener('error', this.onConnectionError);\n    this.ws.removeEventListener('message', this.listener);\n  }\n\n  /**\n   * A function that is passed to a new promise that stores the resolve and reject callbacks\n   * in the state.\n   *\n   * @param {function} resolve A callback to be executed when the promise is resolved.\n   * @param {function} reject A callback to be executed when the promise is rejected.\n   * @memberof ChainWebSocket\n   */\n  createConnectionPromise(resolve, reject) {\n    this.debug('!!! ChainWebSocket createPromise');\n    this.currentResolve = resolve;\n    this.currentReject = reject;\n  }\n\n  /**\n   * Called when a new Websocket connection is opened.\n   *\n   * @memberof ChainWebSocket\n   */\n  onConnectionOpen() {\n    this.debug('!!! ChainWebSocket Connected ');\n\n    this.connected = true;\n\n    clearTimeout(this.connectionTimeout);\n    this.connectionTimeout = null;\n\n    // This will trigger the login process as well as some additional setup in ApiInstances\n    if (this.on_reconnect) {\n      this.on_reconnect();\n    }\n\n    if (this.currentResolve) {\n      this.currentResolve();\n    }\n\n    if (this.statusCb) {\n      this.statusCb(ChainWebSocket.status.OPEN);\n    }\n  }\n\n  /**\n   * called when the connection attempt times out.\n   *\n   * @memberof ChainWebSocket\n   */\n  onConnectionTimeout() {\n    this.debug('!!! ChainWebSocket timeout');\n    this.onConnectionClose(new Error('Connection timed out.'));\n  }\n\n  /**\n   * Called when the Websocket is not responding to the health checks.\n   *\n   * @memberof ChainWebSocket\n   */\n  onConnectionTerminate() {\n    this.debug('!!! ChainWebSocket terminate');\n    this.onConnectionClose(new Error('Connection was terminated.'));\n  }\n\n  /**\n   * Called when the connection to the Blockchain is closed.\n   *\n   * @param {*} error\n   * @memberof ChainWebSocket\n   */\n  onConnectionClose(error) {\n    this.debug('!!! ChainWebSocket Close ', error);\n\n    this.resetConnection();\n\n    if (this.statusCb) {\n      this.statusCb(ChainWebSocket.status.CLOSED);\n    }\n  }\n\n  /**\n   * Called when the Websocket encounters an error.\n   *\n   * @param {*} error\n   * @memberof ChainWebSocket\n   */\n  onConnectionError(error) {\n    this.debug('!!! ChainWebSocket On Connection Error ', error);\n\n    this.resetConnection();\n\n    if (this.statusCb) {\n      this.statusCb(ChainWebSocket.status.ERROR);\n    }\n  }\n\n  /**\n   * Entry point to make RPC calls on the BlockChain.\n   *\n   * @param {array} params An array of params to be passed to the rpc call. [method, ...params]\n   * @returns A new promise for this specific call.\n   * @memberof ChainWebSocket\n   */\n  call(params) {\n    if (!this.connected) {\n      this.debug('!!! ChainWebSocket Call not connected. ');\n      return Promise.reject(new Error('Disconnected from the BlockChain.'));\n    }\n\n    this.debug('!!! ChainWebSocket Call connected. ', params);\n\n    let request = {\n      method: params[1],\n      params,\n      id: this.cbId + 1\n    };\n\n    this.cbId = request.id;\n\n    if (SUBSCRIBE_OPERATIONS.includes(request.method)) {\n      // Store callback in subs map\n      this.subs[request.id] = {\n        callback: request.params[2][0]\n      };\n\n      // Replace callback with the callback id\n      request.params[2][0] = request.id;\n    }\n\n    if (UNSUBSCRIBE_OPERATIONS.includes(request.method)) {\n      if (typeof request.params[2][0] !== 'function') {\n        throw new Error('First parameter of unsub must be the original callback');\n      }\n\n      let unSubCb = request.params[2].splice(0, 1)[0];\n\n      // Find the corresponding subscription\n      for (let id in this.subs) { // eslint-disable-line\n        if (this.subs[id].callback === unSubCb) {\n          this.unsub[request.id] = id;\n          break;\n        }\n      }\n    }\n\n    if (!this.healthCheck) {\n      this.healthCheck = setTimeout(this.onConnectionTerminate.bind(this), HEALTH_CHECK_INTERVAL);\n    }\n\n    return new Promise((resolve, reject) => {\n      this.cbs[request.id] = {\n        time: new Date(),\n        resolve,\n        reject\n      };\n\n      // Set all requests to be 'call' methods.\n      request.method = 'call';\n\n      try {\n        this.ws.send(JSON.stringify(request));\n      } catch (error) {\n        this.debug('Caught a nasty error : ', error);\n      }\n    });\n  }\n\n  /**\n   * Called when messages are received on the Websocket.\n   *\n   * @param {*} response The message received.\n   * @memberof ChainWebSocket\n   */\n  listener(response) {\n    let responseJSON = null;\n\n    try {\n      responseJSON = JSON.parse(response.data);\n    } catch (error) {\n      responseJSON.error = `Error parsing response: ${error.stack}`;\n      this.debug('Error parsing response: ', response);\n    }\n\n    // Clear the health check timeout, we've just received a healthy response from the server.\n    if (this.healthCheck) {\n      clearTimeout(this.healthCheck);\n      this.healthCheck = null;\n    }\n\n    let sub = false;\n    let callback = null;\n\n    if (responseJSON.method === 'notice') {\n      sub = true;\n      responseJSON.id = responseJSON.params[0];\n    }\n\n    if (!sub) {\n      callback = this.cbs[responseJSON.id];\n    } else {\n      callback = this.subs[responseJSON.id].callback;\n    }\n\n    if (callback && !sub) {\n      if (responseJSON.error) {\n        this.debug('----> responseJSON : ', responseJSON);\n        callback.reject(responseJSON.error);\n      } else {\n        callback.resolve(responseJSON.result);\n      }\n\n      delete this.cbs[responseJSON.id];\n\n      if (this.unsub[responseJSON.id]) {\n        delete this.subs[this.unsub[responseJSON.id]];\n        delete this.unsub[responseJSON.id];\n      }\n    } else if (callback && sub) {\n      callback(responseJSON.params[1]);\n    } else {\n      this.debug('Warning: unknown websocket responseJSON: ', responseJSON);\n    }\n  }\n\n  /**\n   * Login to the Blockchain.\n   *\n   * @param {string} user Username\n   * @param {string} password Password\n   * @returns A promise that is fulfilled after login.\n   * @memberof ChainWebSocket\n   */\n  login(user, password) {\n    this.debug('!!! ChainWebSocket login.', user, password);\n    return this.connect_promise.then(() => this.call([1, 'login', [user, password]]));\n  }\n\n  /**\n   * Close the connection to the Blockchain.\n   *\n   * @memberof ChainWebSocket\n   */\n  close() {\n    if (this.ws) {\n      this.removeEventListeners();\n\n      // Try and fire close on the connection.\n      this.ws.close();\n\n      // Clear our references so that it can be garbage collected.\n      this.ws = null;\n    }\n\n    // Clear our timeouts for connection timeout and health check.\n    clearTimeout(this.connectionTimeout);\n    this.connectionTimeout = null;\n\n    clearTimeout(this.healthCheck);\n    this.healthCheck = null;\n\n    clearTimeout(this.reconnectTimeout);\n    this.reconnectTimeout = null;\n\n    // Toggle the connected flag.\n    this.connected = false;\n  }\n\n  debug(...params) {\n    if (SOCKET_DEBUG) {\n      console.log.apply(null, params);\n    }\n  }\n}\n\n// Constants for STATE\nChainWebSocket.status = {\n  RECONNECTED: 'reconnected',\n  OPEN: 'open',\n  CLOSED: 'closed',\n  ERROR: 'error'\n};\n\nexport default ChainWebSocket;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/ws/ChainWebSocket.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 814,
    "kind": "variable",
    "name": "SOCKET_DEBUG",
    "memberof": "lib/ws/ChainWebSocket.js",
    "static": true,
    "longname": "lib/ws/ChainWebSocket.js~SOCKET_DEBUG",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ws/ChainWebSocket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 815,
    "kind": "variable",
    "name": "WebSocketClient",
    "memberof": "lib/ws/ChainWebSocket.js",
    "static": true,
    "longname": "lib/ws/ChainWebSocket.js~WebSocketClient",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ws/ChainWebSocket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 816,
    "kind": "variable",
    "name": "SUBSCRIBE_OPERATIONS",
    "memberof": "lib/ws/ChainWebSocket.js",
    "static": true,
    "longname": "lib/ws/ChainWebSocket.js~SUBSCRIBE_OPERATIONS",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ws/ChainWebSocket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 817,
    "kind": "variable",
    "name": "UNSUBSCRIBE_OPERATIONS",
    "memberof": "lib/ws/ChainWebSocket.js",
    "static": true,
    "longname": "lib/ws/ChainWebSocket.js~UNSUBSCRIBE_OPERATIONS",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ws/ChainWebSocket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 818,
    "kind": "variable",
    "name": "HEALTH_CHECK_INTERVAL",
    "memberof": "lib/ws/ChainWebSocket.js",
    "static": true,
    "longname": "lib/ws/ChainWebSocket.js~HEALTH_CHECK_INTERVAL",
    "access": "public",
    "export": false,
    "importPath": "peerplaysjs-lib/lib/ws/ChainWebSocket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 819,
    "kind": "class",
    "name": "ChainWebSocket",
    "memberof": "lib/ws/ChainWebSocket.js",
    "static": true,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ws/ChainWebSocket.js",
    "importStyle": "ChainWebSocket",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 820,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#constructor",
    "access": "public",
    "description": "Creates an instance of ChainWebSocket.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "serverAddress",
        "description": "The address of the websocket to connect to."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "statusCb",
        "description": "Called when status events occur."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10000",
        "defaultRaw": 10000,
        "name": "connectTimeout",
        "description": "The time for a connection attempt to complete."
      }
    ]
  },
  {
    "__docId__": 821,
    "kind": "member",
    "name": "statusCb",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#statusCb",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 822,
    "kind": "member",
    "name": "serverAddress",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#serverAddress",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 823,
    "kind": "member",
    "name": "timeoutInterval",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#timeoutInterval",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 824,
    "kind": "member",
    "name": "connected",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#connected",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 825,
    "kind": "member",
    "name": "reconnectTimeout",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#reconnectTimeout",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 826,
    "kind": "member",
    "name": "on_reconnect",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#on_reconnect",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 827,
    "kind": "member",
    "name": "cbId",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#cbId",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 828,
    "kind": "member",
    "name": "cbs",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#cbs",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 829,
    "kind": "member",
    "name": "subs",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#subs",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 830,
    "kind": "member",
    "name": "unsub",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#unsub",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 831,
    "kind": "member",
    "name": "currentResolve",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#currentResolve",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 832,
    "kind": "member",
    "name": "currentReject",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#currentReject",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 833,
    "kind": "member",
    "name": "healthCheck",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#healthCheck",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 834,
    "kind": "member",
    "name": "status",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#status",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 843,
    "kind": "method",
    "name": "createConnection",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#createConnection",
    "access": "public",
    "description": "Create the connection to the Blockchain.",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 845,
    "kind": "member",
    "name": "connect_promise",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#connect_promise",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 846,
    "kind": "member",
    "name": "ws",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#ws",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 847,
    "kind": "member",
    "name": "connectionTimeout",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#connectionTimeout",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 848,
    "kind": "method",
    "name": "resetConnection",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#resetConnection",
    "access": "public",
    "description": "Reset the connection to the BlockChain.",
    "lineNumber": 111,
    "params": [],
    "return": null
  },
  {
    "__docId__": 850,
    "kind": "method",
    "name": "addEventListeners",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#addEventListeners",
    "access": "public",
    "description": "Add event listeners to the WebSocket.",
    "lineNumber": 132,
    "params": [],
    "return": null
  },
  {
    "__docId__": 851,
    "kind": "method",
    "name": "removeEventListeners",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#removeEventListeners",
    "access": "public",
    "description": "Remove the event listers from the WebSocket. Its important to remove the event listerers\nfor garbaage collection. Because we are creating a new WebSocket on each connection attempt\nany listeners that are still attached could prevent the old sockets from\nbeing garbage collected.",
    "lineNumber": 148,
    "params": [],
    "return": null
  },
  {
    "__docId__": 852,
    "kind": "method",
    "name": "createConnectionPromise",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#createConnectionPromise",
    "access": "public",
    "description": "A function that is passed to a new promise that stores the resolve and reject callbacks\nin the state.",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "resolve",
        "description": "A callback to be executed when the promise is resolved."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "reject",
        "description": "A callback to be executed when the promise is rejected."
      }
    ],
    "return": null
  },
  {
    "__docId__": 855,
    "kind": "method",
    "name": "onConnectionOpen",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#onConnectionOpen",
    "access": "public",
    "description": "Called when a new Websocket connection is opened.",
    "lineNumber": 175,
    "params": [],
    "return": null
  },
  {
    "__docId__": 858,
    "kind": "method",
    "name": "onConnectionTimeout",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#onConnectionTimeout",
    "access": "public",
    "description": "called when the connection attempt times out.",
    "lineNumber": 202,
    "params": [],
    "return": null
  },
  {
    "__docId__": 859,
    "kind": "method",
    "name": "onConnectionTerminate",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#onConnectionTerminate",
    "access": "public",
    "description": "Called when the Websocket is not responding to the health checks.",
    "lineNumber": 212,
    "params": [],
    "return": null
  },
  {
    "__docId__": 860,
    "kind": "method",
    "name": "onConnectionClose",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#onConnectionClose",
    "access": "public",
    "description": "Called when the connection to the Blockchain is closed.",
    "lineNumber": 223,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 861,
    "kind": "method",
    "name": "onConnectionError",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#onConnectionError",
    "access": "public",
    "description": "Called when the Websocket encounters an error.",
    "lineNumber": 239,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 862,
    "kind": "method",
    "name": "call",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#call",
    "access": "public",
    "description": "Entry point to make RPC calls on the BlockChain.",
    "lineNumber": 256,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "A new promise for this specific call."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "An array of params to be passed to the rpc call. [method, ...params]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "A new promise for this specific call."
    }
  },
  {
    "__docId__": 865,
    "kind": "method",
    "name": "listener",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#listener",
    "access": "public",
    "description": "Called when messages are received on the Websocket.",
    "lineNumber": 326,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "The message received."
      }
    ],
    "return": null
  },
  {
    "__docId__": 867,
    "kind": "method",
    "name": "login",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#login",
    "access": "public",
    "description": "Login to the Blockchain.",
    "lineNumber": 385,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "A promise that is fulfilled after login."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "Username"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": "Password"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "A promise that is fulfilled after login."
    }
  },
  {
    "__docId__": 868,
    "kind": "method",
    "name": "close",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#close",
    "access": "public",
    "description": "Close the connection to the Blockchain.",
    "lineNumber": 395,
    "params": [],
    "return": null
  },
  {
    "__docId__": 874,
    "kind": "method",
    "name": "debug",
    "memberof": "lib/ws/ChainWebSocket.js~ChainWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ChainWebSocket.js~ChainWebSocket#debug",
    "access": "public",
    "description": null,
    "lineNumber": 420,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 875,
    "kind": "file",
    "name": "lib/ws/ConnectionManager.js",
    "content": "import Apis from './ApiInstances';\nimport ChainWebSocket from './ChainWebSocket';\n\nclass ConnectionManager {\n  constructor({url, urls}) {\n    this.url = url;\n    this.urls = urls.filter((a) => a !== url);\n  }\n\n  logFailure(url) {\n    console.error('Unable to connect to', `${url}, skipping to next full node API server`);\n  }\n\n  isURL(str) {\n    /* eslint-disable-next-line */\n    const endpointPattern = new RegExp('((^(?:ws(s)?:\\\\/\\\\/)|(?:http(s)?:\\\\/\\\\/))+((?:[^\\\\/\\\\/\\\\.])+\\\\??(?:[-\\\\+=&;%@.\\\\w_]*)((#?(?:[\\\\w])*)(:?[0-9]*))))');\n\n    return endpointPattern.test(str);\n  }\n\n  connect(connect = true, url = this.url) {\n    return new Promise((resolve, reject) => {\n      Apis.instance(url, connect)\n        .init_promise.then(resolve)\n        .catch((error) => {\n          Apis.instance().close();\n          reject(error);\n        });\n    });\n  }\n\n  connectWithFallback(connect = true, url = this.url, index = 0, resolve = null, reject = null) {\n    if (reject && index > this.urls.length - 1) {\n      return reject(\n        new Error(\n          `Tried ${index + 1} connections, none of which worked: ${JSON.stringify(\n            this.urls.concat(this.url)\n          )}`\n        )\n      );\n    }\n\n    const fallback = (resolve, reject) => {\n      this.logFailure(url);\n      return this.connectWithFallback(connect, this.urls[index], index + 1, resolve, reject);\n    };\n\n    if (resolve && reject) {\n      return this.connect(connect, url)\n        .then(resolve)\n        .catch(() => {\n          fallback(resolve, reject);\n        });\n    }\n\n    return new Promise((resolve, reject) => {\n      this.connect(connect)\n        .then(resolve)\n        .catch(() => {\n          fallback(resolve, reject);\n        });\n    });\n  }\n\n  ping(conn, resolve, reject) {\n    let connectionStartTimes = {};\n    let url = conn.serverAddress;\n\n    if (!this.isURL(url)) {\n      throw Error('URL NOT VALID', url);\n    }\n\n    connectionStartTimes[url] = new Date().getTime();\n\n    const doPing = (resolve, reject) => {\n      // Pass in blank rpc_user and rpc_password.\n      conn.login('', '')\n        .then((result) => {\n          // Make sure connection is closed as it is simply a health check\n          if (result) {\n            conn.close();\n          }\n\n          let urlLatency = {[url]: new Date().getTime() - connectionStartTimes[url]};\n          resolve(urlLatency);\n        }).catch((err) => {\n          console.warn('PING ERROR: ', err);\n          reject(err);\n        });\n    };\n\n    if (resolve && reject) {\n      doPing(resolve, reject);\n    } else {\n      return new Promise(doPing);\n    }\n  }\n\n  /**\n  * sorts the nodes into a list based on latency\n  * @memberof ConnectionManager\n  */\n  sortNodesByLatency(resolve, reject) {\n    let latencyList = this.checkConnections();\n\n    // Sort list by latency\n    const checkFunction = (resolve, reject) => {\n      latencyList.then((response) => {\n        let sortedList = Object.keys(response).sort((a, b) => response[a] - response[b]);\n        resolve(sortedList);\n      }).catch((err) => {\n        reject(err);\n      });\n    };\n\n    if (resolve && reject) {\n      checkFunction(resolve, reject);\n    } else {\n      return new Promise(checkFunction);\n    }\n  }\n\n  checkConnections(resolve, reject) {\n    const checkFunction = (resolve, reject) => {\n      let fullList = this.urls;\n      let connectionPromises = [];\n\n      fullList.forEach((url) => {\n        let conn = new ChainWebSocket(url, () => {});\n\n        connectionPromises.push(() => this.ping(conn)\n          .then((urlLatency) => urlLatency)\n          .catch(() => {\n            conn.close();\n            return null;\n          }));\n      });\n\n      Promise.all(connectionPromises.map((a) => a()))\n        .then((res) => {\n          resolve(\n            res.filter((a) => !!a).reduce((f, a) => {\n              let key = Object.keys(a)[0];\n              f[key] = a[key];\n              return f;\n            }, {})\n          );\n        })\n        .catch(() => this.checkConnections(resolve, reject));\n    };\n\n    if (resolve && reject) {\n      checkFunction(resolve, reject);\n    } else {\n      return new Promise(checkFunction);\n    }\n  }\n}\n\nexport default ConnectionManager;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/ws/ConnectionManager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 876,
    "kind": "class",
    "name": "ConnectionManager",
    "memberof": "lib/ws/ConnectionManager.js",
    "static": true,
    "longname": "lib/ws/ConnectionManager.js~ConnectionManager",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ws/ConnectionManager.js",
    "importStyle": "ConnectionManager",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 877,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/ws/ConnectionManager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ConnectionManager.js~ConnectionManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 878,
    "kind": "member",
    "name": "url",
    "memberof": "lib/ws/ConnectionManager.js~ConnectionManager",
    "static": false,
    "longname": "lib/ws/ConnectionManager.js~ConnectionManager#url",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 879,
    "kind": "member",
    "name": "urls",
    "memberof": "lib/ws/ConnectionManager.js~ConnectionManager",
    "static": false,
    "longname": "lib/ws/ConnectionManager.js~ConnectionManager#urls",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 880,
    "kind": "method",
    "name": "logFailure",
    "memberof": "lib/ws/ConnectionManager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ConnectionManager.js~ConnectionManager#logFailure",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 881,
    "kind": "method",
    "name": "isURL",
    "memberof": "lib/ws/ConnectionManager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ConnectionManager.js~ConnectionManager#isURL",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 882,
    "kind": "method",
    "name": "connect",
    "memberof": "lib/ws/ConnectionManager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ConnectionManager.js~ConnectionManager#connect",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "connect",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "url",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 883,
    "kind": "method",
    "name": "connectWithFallback",
    "memberof": "lib/ws/ConnectionManager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ConnectionManager.js~ConnectionManager#connectWithFallback",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "connect",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "url",
        "optional": true,
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      },
      {
        "name": "resolve",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      },
      {
        "name": "reject",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 884,
    "kind": "method",
    "name": "ping",
    "memberof": "lib/ws/ConnectionManager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ConnectionManager.js~ConnectionManager#ping",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "conn",
        "types": [
          "*"
        ]
      },
      {
        "name": "resolve",
        "types": [
          "*"
        ]
      },
      {
        "name": "reject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 885,
    "kind": "method",
    "name": "sortNodesByLatency",
    "memberof": "lib/ws/ConnectionManager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ConnectionManager.js~ConnectionManager#sortNodesByLatency",
    "access": "public",
    "description": "sorts the nodes into a list based on latency",
    "lineNumber": 103,
    "params": [
      {
        "name": "resolve",
        "types": [
          "*"
        ]
      },
      {
        "name": "reject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 886,
    "kind": "method",
    "name": "checkConnections",
    "memberof": "lib/ws/ConnectionManager.js~ConnectionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/ConnectionManager.js~ConnectionManager#checkConnections",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [
      {
        "name": "resolve",
        "types": [
          "*"
        ]
      },
      {
        "name": "reject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 887,
    "kind": "file",
    "name": "lib/ws/GrapheneApi.js",
    "content": "class GrapheneApi {\n  constructor(ws_rpc, api_name) {\n    this.ws_rpc = ws_rpc;\n    this.api_name = api_name;\n  }\n\n  init() {\n    return this.ws_rpc.call([1, this.api_name, []]).then((response) => {\n      this.api_id = response;\n      return this;\n    });\n  }\n\n  exec(method, params) {\n    return this.ws_rpc.call([this.api_id, method, params]).catch((error) => {\n      console.log('!!! GrapheneApi error: ', method, params, error, JSON.stringify(error));\n      throw error;\n    });\n  }\n}\n\nexport default GrapheneApi;\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/ws/GrapheneApi.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 888,
    "kind": "class",
    "name": "GrapheneApi",
    "memberof": "lib/ws/GrapheneApi.js",
    "static": true,
    "longname": "lib/ws/GrapheneApi.js~GrapheneApi",
    "access": "public",
    "export": true,
    "importPath": "peerplaysjs-lib/lib/ws/GrapheneApi.js",
    "importStyle": "GrapheneApi",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 889,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/ws/GrapheneApi.js~GrapheneApi",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/GrapheneApi.js~GrapheneApi#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 890,
    "kind": "member",
    "name": "ws_rpc",
    "memberof": "lib/ws/GrapheneApi.js~GrapheneApi",
    "static": false,
    "longname": "lib/ws/GrapheneApi.js~GrapheneApi#ws_rpc",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 891,
    "kind": "member",
    "name": "api_name",
    "memberof": "lib/ws/GrapheneApi.js~GrapheneApi",
    "static": false,
    "longname": "lib/ws/GrapheneApi.js~GrapheneApi#api_name",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 892,
    "kind": "method",
    "name": "init",
    "memberof": "lib/ws/GrapheneApi.js~GrapheneApi",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/GrapheneApi.js~GrapheneApi#init",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 893,
    "kind": "member",
    "name": "api_id",
    "memberof": "lib/ws/GrapheneApi.js~GrapheneApi",
    "static": false,
    "longname": "lib/ws/GrapheneApi.js~GrapheneApi#api_id",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 894,
    "kind": "method",
    "name": "exec",
    "memberof": "lib/ws/GrapheneApi.js~GrapheneApi",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/ws/GrapheneApi.js~GrapheneApi#exec",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 895,
    "kind": "file",
    "name": "lib/ws/index.js",
    "content": "/* Websocket lib */\nimport Apis from './ApiInstances';\nimport ConnectionManager from './ConnectionManager';\nimport ChainConfig from './ChainConfig';\n\nexport {\n  Apis,\n  ConnectionManager,\n  ChainConfig\n};\n",
    "static": true,
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/lib/ws/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "# PeerplaysJS (peerplaysjs-lib)\n\nPure JavaScript Bitshares/Graphene library for node.js and browsers. Can be used to construct, sign and broadcast transactions in JavaScript, and to easily obtain data from the blockchain via public apis.\n\nMost of this code was written by [jcalfee](https://github.com/jcalfee).\n\n[![npm version](https://img.shields.io/npm/v/peerplaysjs-lib.svg?style=flat-square)](https://www.npmjs.com/package/peerplaysjs-lib)\n[![npm version](https://img.shields.io/node/v/peerplaysjs-lib.svg?style=flat-square)](https://www.npmjs.com/package/peerplaysjs-lib)\n[![npm downloads](https://img.shields.io/npm/dm/peerplaysjs-lib.svg?style=flat-square)](https://www.npmjs.com/package/peerplaysjs-lib)\n[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) \n[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)\n\n## Setup\n\nThis library can be obtained through npm:\n\n```bash\nnpm install peerplaysjs-lib\n```\n\n## Getting Started\n\nIt is recommended to use Node v8.9.x.\n\nOn Ubuntu and OSX, the easiest way to install Node is to use the [Node Version Manager](https://github.com/creationix/nvm).\nFor Windows users there is [NVM-Windows](https://github.com/coreybutler/nvm-windows).\n\nTo install NVM for Linux/OSX, simply copy paste the following in a terminal:\n\n```bash\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash\nnvm install v8\nnvm use v8\n```\n\nOnce you have Node installed, you can clone the repo:\n\n```bash\ngit clone https://github.com/peerplays-network/peerplaysjs-lib\ncd peerplaysjs-lib\n```\n\n## Development\n\nInitialize the application by running `npm run init`. Doing so will install commitizen globally on your environment so you can later commit via `git cz`.\n\n### Commits\n\n> If you have run the init script, you can commit via `git cz`.  \n> If you have not run the init script, you must commit via `npm run commit`.  \n> If you do neither, commit message consistency will be difficult for you.\n\nThis repository uses a combination of tools to aid in consistent commit messages. The reason we do this is so we can have dynamic changelog creation and smart semantic versioning based on commits (with the ability to override).\nThe following tools are used:\n\n1. [commitizen](https://www.npmjs.com/package/commitizen)  \n   Used for prompting recommended entries within a commit message to ensure it contains the necessary information.\n   - [conventional changelog](https://www.npmjs.com/package/cz-conventional-changelog)  \n     - Prompts for conventional changelog standard.\n2. [husky](https://www.npmjs.com/package/husky)  \n   By using the hooks from this package we intercept commits being made and verify them with commitlint.\n   - Prevent bad commits/pushes.\n3. [commitlint](https://www.npmjs.com/package/@commitlint/cli)\n   - cli\n   - [config-conventional](https://www.npmjs.com/package/@commitlint/config-conventional)\n     - rule preset in use\n\n## Usage\n\nFour sub-libraries are included: `ECC`, `Chain`, `WS` and `Serializer`. Generally only the `ECC` and `Chain` libraries need to be used directly. The `WS` library handles all the websocket connections.\n\n### WS\n\n<details>\n\n<summary>peerplaysjs-ws is deprecated</summary>\n\nPeerplaysjs-lib includes the now deprecated peerplaysjs-ws library within itself. Updating your code to reflect this is simple, here is an example:\n\n```javascript\n// current code\nimport {Apis} from 'peerplaysjs-ws';\n\n// refactored\nimport {Apis} from 'peerplaysjs-lib';\n```\n\nOnce you have all of your peerplaysjs-ws imports updated, you can uninstall the peerplaysjs-ws package.\n</details>\n\n\n```html\n<script type=\"text/javascript\" src=\"https://cdn.rawgit.com/pbsa/peerplaysjs-ws/build/peerplaysjs-ws.js\" />\n```\n\nA variable peerplays_ws will be available in window.\n\nFor use in a webpack/browserify context, see the example below for how to open a websocket connection to the Openledger API and subscribe to any object updates:\n\n```javascript\nvar {Apis} = require(\"peerplaysjs-lib\");\nApis.instance(\"wss://bitshares.openledger.info/ws\").init_promise.then((res) => {\n    console.log(\"connected to:\", res[0].network);\n    Apis.instance().db_api().exec( \"set_subscribe_callback\", [ updateListener, true ] )\n});\n\nfunction updateListener(object) {\n    console.log(\"set_subscribe_callback:\\n\", object);\n}\n```\n\nThe `set_subscribe_callback` callback (updateListener) will be called whenever an object on the blockchain changes or is removed. This is very powerful and can be used to listen to updates for specific accounts, assets or most anything else, as all state changes happen through object updates. Be aware though that you will receive quite a lot of data this way.\n\n### Chain\n\nThis library provides utility functions to handle blockchain state as well as a login class that can be used for simple login functionality using a specific key seed.\n\n#### Login\n\nThe login class uses the following format for keys:\n\n```bash\nkeySeed = accountName + role + password\n```\n\nUsing this seed, private keys are generated for either the default roles `active, owner, memo`, or as specified. A minimum password length of 12 characters is enforced, but an even longer password is recommended. Three methods are provided:\n\n```js\ngenerateKeys(account, password, [roles])\ncheckKeys(account, password, auths)\nsignTransaction(tr)\n```\n\nThe auths object should contain the auth arrays from the account object. An example is this:\n\n```json\n{\n    active: [\n        [\"GPH5Abm5dCdy3hJ1C5ckXkqUH2Me7dXqi9Y7yjn9ACaiSJ9h8r8mL\", 1]\n    ]\n}\n```\n\nIf checkKeys is successful, you can use signTransaction to sign a TransactionBuilder transaction using the private keys for that account.\n\n#### State container\n\nThe Chain library contains a complete state container called the ChainStore. The ChainStore will automatically configure the `set_subscribe_callback` and handle any incoming state changes appropriately. It uses Immutable.js for storing the state, so all objects are return as immutable objects. It has its own `subscribe` method that can be used to register a callback that will be called whenever a state change happens.\n\nThe ChainStore has several useful methods to retrieve, among other things, objects, assets and accounts using either object ids or asset/account names. These methods are synchronous and will return `undefined` to indicate fetching in progress, and `null` to indicate that the object does not exist.\n\n```js\nimport {Apis} from \"peerplaysjs-ws\";\nimport {ChainStore} from \"peerplaysjs-lib\";\n\nApis.instance(\"wss://bitshares.openledger.info/ws\", true).init_promise.then((res) => {\n    console.log(\"connected to:\", res[0].network);\n    ChainStore.init().then(() => {\n        ChainStore.subscribe(updateState);\n    });\n});\n\nlet dynamicGlobal = null;\nfunction updateState(object) {\n    dynamicGlobal = ChainStore.getObject(\"2.1.0\");\n    console.log(\"ChainStore object update\\n\", dynamicGlobal ? dynamicGlobal.toJS() : dynamicGlobal);\n}\n\n```\n\n### ECC\n\nThe ECC library contains all the crypto functions for private and public keys as well as transaction creation/signing.\n\n#### Private keys\n\nAs a quick example, here's how to generate a new private key from a seed (a brainkey for example):\n\n```js\nimport {PrivateKey, key} from \"peerplaysjs-lib\";\n\nlet seed = \"THIS IS A TERRIBLE BRAINKEY SEED WORD SEQUENCE\";\nlet pkey = PrivateKey.fromSeed( key.normalize_brainKey(seed) );\n\nconsole.log(\"\\nPrivate key:\", pkey.toWif());\nconsole.log(\"Public key :\", pkey.toPublicKey().toString(), \"\\n\");\n```\n\n#### Transactions\n\nTODO transaction signing example\n\n## ESDoc (beta)\n\n```bash\nnpm i -g esdoc esdoc-es7-plugin\nesdoc -c ./esdoc.json\nopen out/esdoc/index.html\n```\n\n## Releases\n\nThis repository uses a [standard version](https://www.npmjs.com/package/standard-version) to aid in version control and release management.\n\nWhen using standard version to cut a release, there is automated changelog modifitions made based on commit messages.\n\n```csharp\n// If you typically use npm version to cut a new release, do this instead:\nnpm run release\n// To cut a release and bump the version by major, minor, or patch, use the following respectively:\nnpm run release-major // major bump\nnpm run release-minor // minor bump\nnpm run release-patch // patch bump\n// To cut a pre-release:\nnpm run pre-release // v0.2.1 to v0.2.2-rc.0\n```\n",
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"peerplaysjs-lib\",\n  \"version\": \"0.6.0\",\n  \"description\": \"Pure JavaScript Peerplaysjs library for node.js and browsers.\",\n  \"browser\": {\n    \"ws\": false,\n    \"crypto\": false\n  },\n  \"scripts\": {\n    \"init\": \"npm install commitizen -g && npm i\",\n    \"commit\": \"git-cz\",\n    \"pre-release\": \"npm run release -- --prerelease rc\",\n    \"release\": \"standard-version\",\n    \"release-major\": \"npm run release -- --release-as major\",\n    \"release-minor\": \"npm run release -- --release-as minor\",\n    \"release-patch\": \"npm run release -- --release-as patch\",\n    \"test\": \"BABEL_ENV=test mocha --compilers js:babel-register --recursive\",\n    \"test:chain\": \"BABEL_ENV=test mocha --compilers js:babel-register ./test/chain --recursive\",\n    \"test:ecc\": \"BABEL_ENV=test mocha --compilers js:babel-register ./test/ecc --recursive\",\n    \"test:serializer\": \"BABEL_ENV=test mocha --compilers js:babel-register ./test/serializer --recursive\",\n    \"test:watch\": \"npm test -- --watch\",\n    \"clean\": \"rm -rf ./dist/* & rm -rf ./build/*\",\n    \"prebuild\": \"npm run clean\",\n    \"build\": \"babel lib -d dist\",\n    \"postbuild\": \"npm run browserify\",\n    \"build:watch\": \"babel lib -d dist --watch\",\n    \"prebrowserify\": \"rm -rf ./build/*\",\n    \"browserify\": \"browserify -t [browserify-package-json --global=true] -p [bundle-collapser/plugin] dist/browser.js --full-path=false --standalone peerplays_js -o build/peerplaysjs-lib.js -d\",\n    \"postbrowserify\": \"uglifyjs --compress --mangle --sequences --drop_console --output build/peerplaysjs-lib.min.js -- build/peerplaysjs-lib.js\",\n    \"doc\": \"esdoc -c esdoc.json\",\n    \"example:transfer\": \"babel-node examples/transfer\",\n    \"example:chainStore\": \"babel-node examples/chainStore\",\n    \"example:privKey\": \"babel-node examples/privKey\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/peerplays-network/peerplaysjs-lib\"\n  },\n  \"author\": \"Sigve Kvalsvik <bitsharesblocks@gmail.com> (https://github.com/svk31)\",\n  \"contributors\": [\n    \"James Calfee <james@jcalfee.info> (https://github.com/jcalfee/)\",\n    \"Daniel Larimer <dan@cryptonomex.com> (https://github.com/bytemaster/)\",\n    \"Valentine Zavgorodnev <valentine.zavgorodnev@gmail.com> (https://github.com/valzav/)\"\n  ],\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/peerplays-network/peerplaysjs-lib/issues\"\n  },\n  \"engines\": {\n    \"node\": \">= 6.0.0\"\n  },\n  \"main\": \"dist/index.js\",\n  \"jsnext:main\": \"lib/index.js\",\n  \"dependencies\": {\n    \"assert\": \"^1.3.0\",\n    \"bigi\": \"^1.4.1\",\n    \"bs58\": \"^3.0.0\",\n    \"buffer\": \"^5.1.0\",\n    \"bytebuffer\": \"^5.0.0\",\n    \"create-hash\": \"^1.1.2\",\n    \"create-hmac\": \"^1.1.4\",\n    \"crypto-js\": \"^3.1.9-1\",\n    \"deep-equal\": \"^1.0.1\",\n    \"ecurve\": \"^1.0.2\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"event-emitter\": \"^0.3.4\",\n    \"immutable\": \"^3.7.6\",\n    \"secure-random\": \"^1.1.1\",\n    \"uglify-js\": \"^3.5.2\",\n    \"ws\": \"2.3.1\"\n  },\n  \"devDependencies\": {\n    \"@commitlint/cli\": \"^7.5.2\",\n    \"@commitlint/config-conventional\": \"^7.5.0\",\n    \"babel-cli\": \"^6.18.0\",\n    \"babel-core\": \"^6.21.0\",\n    \"babel-eslint\": \"^7.1.1\",\n    \"babel-plugin-add-module-exports\": \"^0.2.1\",\n    \"babel-preset-es2015\": \"^6.18.0\",\n    \"babel-preset-stage-1\": \"^6.16.0\",\n    \"browserify\": \"^13.1.0\",\n    \"browserify-package-json\": \"^1.0.1\",\n    \"bundle-collapser\": \"^1.3.0\",\n    \"commitizen\": \"^3.0.7\",\n    \"cz-conventional-changelog\": \"^2.1.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"eslint\": \"^4.19.1\",\n    \"eslint-config-airbnb\": \"^17.0.0\",\n    \"eslint-plugin-import\": \"^2.13.0\",\n    \"eslint-plugin-jsx-a11y\": \"^6.1.1\",\n    \"eslint-plugin-prettier\": \"^2.6.2\",\n    \"eslint-plugin-react\": \"^7.10.0\",\n    \"husky\": \"^1.3.1\",\n    \"mocha\": \"^5.2.0\",\n    \"prettier\": \"^1.13.7\",\n    \"standard-version\": \"^5.0.2\",\n    \"uglifyjs\": \"^2.4.10\"\n  },\n  \"config\": {\n    \"commitizen\": {\n      \"path\": \"./node_modules/cz-conventional-changelog\"\n    }\n  }\n}\n",
    "longname": "/Users/mseaward/Documents/code/__MAMOKIN/peerplaysjs-lib/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]