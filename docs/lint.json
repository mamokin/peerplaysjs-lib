[
  {
    "name": "ChainStore#getAccountRefsOfKey",
    "filePath": "lib/chain/src/ChainStore.js",
    "lines": [
      {
        "lineNumber": 488,
        "line": "  /**"
      },
      {
        "lineNumber": 489,
        "line": "   *  @param the public key to find accounts that reference it"
      },
      {
        "lineNumber": 490,
        "line": "   *"
      },
      {
        "lineNumber": 491,
        "line": "   *  @return Set of account ids that reference the given key"
      },
      {
        "lineNumber": 492,
        "line": "   *  @return a empty Set if no items are found"
      },
      {
        "lineNumber": 493,
        "line": "   *  @return undefined if the result is unknown"
      },
      {
        "lineNumber": 494,
        "line": "   *"
      },
      {
        "lineNumber": 495,
        "line": "   *  If this method returns undefined, then it will send a request to"
      },
      {
        "lineNumber": 496,
        "line": "   *  the server for the current set of accounts after which the"
      },
      {
        "lineNumber": 497,
        "line": "   *  server will notify us of any accounts that reference these keys"
      },
      {
        "lineNumber": 498,
        "line": "   */"
      },
      {
        "lineNumber": 499,
        "line": "  getAccountRefsOfKey(key) {"
      }
    ],
    "codeParams": [
      "key"
    ],
    "docParams": [
      "the"
    ]
  },
  {
    "name": "ChainStore#fetchFullAccount",
    "filePath": "lib/chain/src/ChainStore.js",
    "lines": [
      {
        "lineNumber": 1059,
        "line": "  /**"
      },
      {
        "lineNumber": 1060,
        "line": "   *  Fetches an account and all of its associated data in a single query"
      },
      {
        "lineNumber": 1061,
        "line": "   *"
      },
      {
        "lineNumber": 1062,
        "line": "   *  @param an account name or account id"
      },
      {
        "lineNumber": 1063,
        "line": "   *"
      },
      {
        "lineNumber": 1064,
        "line": "   *  @return undefined if the account in question is in the process of being fetched"
      },
      {
        "lineNumber": 1065,
        "line": "   *  @return the object if it has already been fetched"
      },
      {
        "lineNumber": 1066,
        "line": "   *  @return null if the object has been queried and was not found"
      },
      {
        "lineNumber": 1067,
        "line": "   */"
      },
      {
        "lineNumber": 1068,
        "line": "  fetchFullAccount(name_or_id) {"
      }
    ],
    "codeParams": [
      "name_or_id"
    ],
    "docParams": [
      "an"
    ]
  },
  {
    "name": "ChainStore#fetchRecentHistory",
    "filePath": "lib/chain/src/ChainStore.js",
    "lines": [
      {
        "lineNumber": 1270,
        "line": "  /**"
      },
      {
        "lineNumber": 1271,
        "line": "   * There are two ways to extend the account history, add new more"
      },
      {
        "lineNumber": 1272,
        "line": "   * recent history, and extend historic hstory. This method will fetch"
      },
      {
        "lineNumber": 1273,
        "line": "   * the most recent account history and prepend it to the list of"
      },
      {
        "lineNumber": 1274,
        "line": "   * historic operations."
      },
      {
        "lineNumber": 1275,
        "line": "   *"
      },
      {
        "lineNumber": 1276,
        "line": "   *  @param account immutable account object"
      },
      {
        "lineNumber": 1277,
        "line": "   *  @return a promise with the account history"
      },
      {
        "lineNumber": 1278,
        "line": "   */"
      },
      {
        "lineNumber": 1279,
        "line": "  fetchRecentHistory(account, limit = 100) {"
      }
    ],
    "codeParams": [
      "account",
      "limit"
    ],
    "docParams": [
      "account"
    ]
  },
  {
    "name": "Signature.signBufferSha256",
    "filePath": "lib/ecc/src/signature.js",
    "lines": [
      {
        "lineNumber": 72,
        "line": "  /** Sign a buffer of exactally 32 bytes in size (sha256(text))"
      },
      {
        "lineNumber": 73,
        "line": "        @param {Buffer} buf - 32 bytes binary"
      },
      {
        "lineNumber": 74,
        "line": "        @param {PrivateKey} private_key"
      },
      {
        "lineNumber": 75,
        "line": "        @return {Signature}"
      },
      {
        "lineNumber": 76,
        "line": "    */"
      },
      {
        "lineNumber": 77,
        "line": "  static signBufferSha256(buf_sha256, private_key) {"
      }
    ],
    "codeParams": [
      "buf_sha256",
      "private_key"
    ],
    "docParams": [
      "buf",
      "private_key"
    ]
  },
  {
    "name": "Signature#verifyBuffer",
    "filePath": "lib/ecc/src/signature.js",
    "lines": [
      {
        "lineNumber": 121,
        "line": "  /**"
      },
      {
        "lineNumber": 122,
        "line": "        @param {Buffer} un-hashed"
      },
      {
        "lineNumber": 123,
        "line": "        @param {./PublicKey}"
      },
      {
        "lineNumber": 124,
        "line": "        @return {boolean}"
      },
      {
        "lineNumber": 125,
        "line": "    */"
      },
      {
        "lineNumber": 126,
        "line": "  verifyBuffer(buf, public_key) {"
      }
    ],
    "codeParams": [
      "buf",
      "public_key"
    ],
    "docParams": [
      "un-hashed"
    ]
  }
]